
stm32_f103_solder_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dcc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08007ee0  08007ee0  00017ee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080081c0  080081c0  000181c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080081c8  080081c8  000181c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080081cc  080081cc  000181cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000067c  20000000  080081d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001f0  20000680  0800884c  00020680  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20000870  0800884c  00020870  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ed08  00000000  00000000  000206a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000213f  00000000  00000000  0002f3ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ef0  00000000  00000000  000314f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e00  00000000  00000000  000323e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007a2e  00000000  00000000  000331e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000470a  00000000  00000000  0003ac0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003f318  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000049ec  00000000  00000000  0003f394  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000680 	.word	0x20000680
 800012c:	00000000 	.word	0x00000000
 8000130:	08007ec4 	.word	0x08007ec4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000684 	.word	0x20000684
 800014c:	08007ec4 	.word	0x08007ec4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2uiz>:
 8000a80:	004a      	lsls	r2, r1, #1
 8000a82:	d211      	bcs.n	8000aa8 <__aeabi_d2uiz+0x28>
 8000a84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a88:	d211      	bcs.n	8000aae <__aeabi_d2uiz+0x2e>
 8000a8a:	d50d      	bpl.n	8000aa8 <__aeabi_d2uiz+0x28>
 8000a8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a94:	d40e      	bmi.n	8000ab4 <__aeabi_d2uiz+0x34>
 8000a96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	4770      	bx	lr
 8000aa8:	f04f 0000 	mov.w	r0, #0
 8000aac:	4770      	bx	lr
 8000aae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_d2uiz+0x3a>
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0000 	mov.w	r0, #0
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_frsub>:
 8000ac0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ac4:	e002      	b.n	8000acc <__addsf3>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_fsub>:
 8000ac8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000acc <__addsf3>:
 8000acc:	0042      	lsls	r2, r0, #1
 8000ace:	bf1f      	itttt	ne
 8000ad0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ad4:	ea92 0f03 	teqne	r2, r3
 8000ad8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000adc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae0:	d06a      	beq.n	8000bb8 <__addsf3+0xec>
 8000ae2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ae6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aea:	bfc1      	itttt	gt
 8000aec:	18d2      	addgt	r2, r2, r3
 8000aee:	4041      	eorgt	r1, r0
 8000af0:	4048      	eorgt	r0, r1
 8000af2:	4041      	eorgt	r1, r0
 8000af4:	bfb8      	it	lt
 8000af6:	425b      	neglt	r3, r3
 8000af8:	2b19      	cmp	r3, #25
 8000afa:	bf88      	it	hi
 8000afc:	4770      	bxhi	lr
 8000afe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b12:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b16:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b1a:	bf18      	it	ne
 8000b1c:	4249      	negne	r1, r1
 8000b1e:	ea92 0f03 	teq	r2, r3
 8000b22:	d03f      	beq.n	8000ba4 <__addsf3+0xd8>
 8000b24:	f1a2 0201 	sub.w	r2, r2, #1
 8000b28:	fa41 fc03 	asr.w	ip, r1, r3
 8000b2c:	eb10 000c 	adds.w	r0, r0, ip
 8000b30:	f1c3 0320 	rsb	r3, r3, #32
 8000b34:	fa01 f103 	lsl.w	r1, r1, r3
 8000b38:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b3c:	d502      	bpl.n	8000b44 <__addsf3+0x78>
 8000b3e:	4249      	negs	r1, r1
 8000b40:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b44:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b48:	d313      	bcc.n	8000b72 <__addsf3+0xa6>
 8000b4a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b4e:	d306      	bcc.n	8000b5e <__addsf3+0x92>
 8000b50:	0840      	lsrs	r0, r0, #1
 8000b52:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b56:	f102 0201 	add.w	r2, r2, #1
 8000b5a:	2afe      	cmp	r2, #254	; 0xfe
 8000b5c:	d251      	bcs.n	8000c02 <__addsf3+0x136>
 8000b5e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b66:	bf08      	it	eq
 8000b68:	f020 0001 	biceq.w	r0, r0, #1
 8000b6c:	ea40 0003 	orr.w	r0, r0, r3
 8000b70:	4770      	bx	lr
 8000b72:	0049      	lsls	r1, r1, #1
 8000b74:	eb40 0000 	adc.w	r0, r0, r0
 8000b78:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	d1ed      	bne.n	8000b5e <__addsf3+0x92>
 8000b82:	fab0 fc80 	clz	ip, r0
 8000b86:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b8a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b8e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b92:	bfaa      	itet	ge
 8000b94:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b98:	4252      	neglt	r2, r2
 8000b9a:	4318      	orrge	r0, r3
 8000b9c:	bfbc      	itt	lt
 8000b9e:	40d0      	lsrlt	r0, r2
 8000ba0:	4318      	orrlt	r0, r3
 8000ba2:	4770      	bx	lr
 8000ba4:	f092 0f00 	teq	r2, #0
 8000ba8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bac:	bf06      	itte	eq
 8000bae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bb2:	3201      	addeq	r2, #1
 8000bb4:	3b01      	subne	r3, #1
 8000bb6:	e7b5      	b.n	8000b24 <__addsf3+0x58>
 8000bb8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bbc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc0:	bf18      	it	ne
 8000bc2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc6:	d021      	beq.n	8000c0c <__addsf3+0x140>
 8000bc8:	ea92 0f03 	teq	r2, r3
 8000bcc:	d004      	beq.n	8000bd8 <__addsf3+0x10c>
 8000bce:	f092 0f00 	teq	r2, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	4608      	moveq	r0, r1
 8000bd6:	4770      	bx	lr
 8000bd8:	ea90 0f01 	teq	r0, r1
 8000bdc:	bf1c      	itt	ne
 8000bde:	2000      	movne	r0, #0
 8000be0:	4770      	bxne	lr
 8000be2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000be6:	d104      	bne.n	8000bf2 <__addsf3+0x126>
 8000be8:	0040      	lsls	r0, r0, #1
 8000bea:	bf28      	it	cs
 8000bec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf0:	4770      	bx	lr
 8000bf2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bf6:	bf3c      	itt	cc
 8000bf8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bxcc	lr
 8000bfe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c02:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	4770      	bx	lr
 8000c0c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c10:	bf16      	itet	ne
 8000c12:	4608      	movne	r0, r1
 8000c14:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c18:	4601      	movne	r1, r0
 8000c1a:	0242      	lsls	r2, r0, #9
 8000c1c:	bf06      	itte	eq
 8000c1e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c22:	ea90 0f01 	teqeq	r0, r1
 8000c26:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c2a:	4770      	bx	lr

08000c2c <__aeabi_ui2f>:
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e004      	b.n	8000c3c <__aeabi_i2f+0x8>
 8000c32:	bf00      	nop

08000c34 <__aeabi_i2f>:
 8000c34:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c38:	bf48      	it	mi
 8000c3a:	4240      	negmi	r0, r0
 8000c3c:	ea5f 0c00 	movs.w	ip, r0
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c48:	4601      	mov	r1, r0
 8000c4a:	f04f 0000 	mov.w	r0, #0
 8000c4e:	e01c      	b.n	8000c8a <__aeabi_l2f+0x2a>

08000c50 <__aeabi_ul2f>:
 8000c50:	ea50 0201 	orrs.w	r2, r0, r1
 8000c54:	bf08      	it	eq
 8000c56:	4770      	bxeq	lr
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e00a      	b.n	8000c74 <__aeabi_l2f+0x14>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_l2f>:
 8000c60:	ea50 0201 	orrs.w	r2, r0, r1
 8000c64:	bf08      	it	eq
 8000c66:	4770      	bxeq	lr
 8000c68:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__aeabi_l2f+0x14>
 8000c6e:	4240      	negs	r0, r0
 8000c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c74:	ea5f 0c01 	movs.w	ip, r1
 8000c78:	bf02      	ittt	eq
 8000c7a:	4684      	moveq	ip, r0
 8000c7c:	4601      	moveq	r1, r0
 8000c7e:	2000      	moveq	r0, #0
 8000c80:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c84:	bf08      	it	eq
 8000c86:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c8e:	fabc f28c 	clz	r2, ip
 8000c92:	3a08      	subs	r2, #8
 8000c94:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c98:	db10      	blt.n	8000cbc <__aeabi_l2f+0x5c>
 8000c9a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca4:	f1c2 0220 	rsb	r2, r2, #32
 8000ca8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cac:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb0:	eb43 0002 	adc.w	r0, r3, r2
 8000cb4:	bf08      	it	eq
 8000cb6:	f020 0001 	biceq.w	r0, r0, #1
 8000cba:	4770      	bx	lr
 8000cbc:	f102 0220 	add.w	r2, r2, #32
 8000cc0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc4:	f1c2 0220 	rsb	r2, r2, #32
 8000cc8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ccc:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd0:	eb43 0002 	adc.w	r0, r3, r2
 8000cd4:	bf08      	it	eq
 8000cd6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cda:	4770      	bx	lr

08000cdc <__aeabi_fmul>:
 8000cdc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ce4:	bf1e      	ittt	ne
 8000ce6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cea:	ea92 0f0c 	teqne	r2, ip
 8000cee:	ea93 0f0c 	teqne	r3, ip
 8000cf2:	d06f      	beq.n	8000dd4 <__aeabi_fmul+0xf8>
 8000cf4:	441a      	add	r2, r3
 8000cf6:	ea80 0c01 	eor.w	ip, r0, r1
 8000cfa:	0240      	lsls	r0, r0, #9
 8000cfc:	bf18      	it	ne
 8000cfe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d02:	d01e      	beq.n	8000d42 <__aeabi_fmul+0x66>
 8000d04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d08:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d0c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d10:	fba0 3101 	umull	r3, r1, r0, r1
 8000d14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d18:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d1c:	bf3e      	ittt	cc
 8000d1e:	0049      	lslcc	r1, r1, #1
 8000d20:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d24:	005b      	lslcc	r3, r3, #1
 8000d26:	ea40 0001 	orr.w	r0, r0, r1
 8000d2a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d2e:	2afd      	cmp	r2, #253	; 0xfd
 8000d30:	d81d      	bhi.n	8000d6e <__aeabi_fmul+0x92>
 8000d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3a:	bf08      	it	eq
 8000d3c:	f020 0001 	biceq.w	r0, r0, #1
 8000d40:	4770      	bx	lr
 8000d42:	f090 0f00 	teq	r0, #0
 8000d46:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d4a:	bf08      	it	eq
 8000d4c:	0249      	lsleq	r1, r1, #9
 8000d4e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d52:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d56:	3a7f      	subs	r2, #127	; 0x7f
 8000d58:	bfc2      	ittt	gt
 8000d5a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d5e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d62:	4770      	bxgt	lr
 8000d64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	3a01      	subs	r2, #1
 8000d6e:	dc5d      	bgt.n	8000e2c <__aeabi_fmul+0x150>
 8000d70:	f112 0f19 	cmn.w	r2, #25
 8000d74:	bfdc      	itt	le
 8000d76:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d7a:	4770      	bxle	lr
 8000d7c:	f1c2 0200 	rsb	r2, r2, #0
 8000d80:	0041      	lsls	r1, r0, #1
 8000d82:	fa21 f102 	lsr.w	r1, r1, r2
 8000d86:	f1c2 0220 	rsb	r2, r2, #32
 8000d8a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d92:	f140 0000 	adc.w	r0, r0, #0
 8000d96:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d9a:	bf08      	it	eq
 8000d9c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da0:	4770      	bx	lr
 8000da2:	f092 0f00 	teq	r2, #0
 8000da6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0040      	lsleq	r0, r0, #1
 8000dae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000db2:	3a01      	subeq	r2, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fmul+0xce>
 8000db6:	ea40 000c 	orr.w	r0, r0, ip
 8000dba:	f093 0f00 	teq	r3, #0
 8000dbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0049      	lsleq	r1, r1, #1
 8000dc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dca:	3b01      	subeq	r3, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xe6>
 8000dce:	ea41 010c 	orr.w	r1, r1, ip
 8000dd2:	e78f      	b.n	8000cf4 <__aeabi_fmul+0x18>
 8000dd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	bf18      	it	ne
 8000dde:	ea93 0f0c 	teqne	r3, ip
 8000de2:	d00a      	beq.n	8000dfa <__aeabi_fmul+0x11e>
 8000de4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de8:	bf18      	it	ne
 8000dea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	d1d8      	bne.n	8000da2 <__aeabi_fmul+0xc6>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f090 0f00 	teq	r0, #0
 8000dfe:	bf17      	itett	ne
 8000e00:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e04:	4608      	moveq	r0, r1
 8000e06:	f091 0f00 	teqne	r1, #0
 8000e0a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e0e:	d014      	beq.n	8000e3a <__aeabi_fmul+0x15e>
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d101      	bne.n	8000e1a <__aeabi_fmul+0x13e>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	d10f      	bne.n	8000e3a <__aeabi_fmul+0x15e>
 8000e1a:	ea93 0f0c 	teq	r3, ip
 8000e1e:	d103      	bne.n	8000e28 <__aeabi_fmul+0x14c>
 8000e20:	024b      	lsls	r3, r1, #9
 8000e22:	bf18      	it	ne
 8000e24:	4608      	movne	r0, r1
 8000e26:	d108      	bne.n	8000e3a <__aeabi_fmul+0x15e>
 8000e28:	ea80 0001 	eor.w	r0, r0, r1
 8000e2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e38:	4770      	bx	lr
 8000e3a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e42:	4770      	bx	lr

08000e44 <__aeabi_fdiv>:
 8000e44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e4c:	bf1e      	ittt	ne
 8000e4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e52:	ea92 0f0c 	teqne	r2, ip
 8000e56:	ea93 0f0c 	teqne	r3, ip
 8000e5a:	d069      	beq.n	8000f30 <__aeabi_fdiv+0xec>
 8000e5c:	eba2 0203 	sub.w	r2, r2, r3
 8000e60:	ea80 0c01 	eor.w	ip, r0, r1
 8000e64:	0249      	lsls	r1, r1, #9
 8000e66:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e6a:	d037      	beq.n	8000edc <__aeabi_fdiv+0x98>
 8000e6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e70:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e74:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	bf38      	it	cc
 8000e80:	005b      	lslcc	r3, r3, #1
 8000e82:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e86:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	bf24      	itt	cs
 8000e8e:	1a5b      	subcs	r3, r3, r1
 8000e90:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e94:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e98:	bf24      	itt	cs
 8000e9a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e9e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ea2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ea6:	bf24      	itt	cs
 8000ea8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eb4:	bf24      	itt	cs
 8000eb6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ebe:	011b      	lsls	r3, r3, #4
 8000ec0:	bf18      	it	ne
 8000ec2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ec6:	d1e0      	bne.n	8000e8a <__aeabi_fdiv+0x46>
 8000ec8:	2afd      	cmp	r2, #253	; 0xfd
 8000eca:	f63f af50 	bhi.w	8000d6e <__aeabi_fmul+0x92>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed4:	bf08      	it	eq
 8000ed6:	f020 0001 	biceq.w	r0, r0, #1
 8000eda:	4770      	bx	lr
 8000edc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ee4:	327f      	adds	r2, #127	; 0x7f
 8000ee6:	bfc2      	ittt	gt
 8000ee8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef0:	4770      	bxgt	lr
 8000ef2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	3a01      	subs	r2, #1
 8000efc:	e737      	b.n	8000d6e <__aeabi_fmul+0x92>
 8000efe:	f092 0f00 	teq	r2, #0
 8000f02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f06:	bf02      	ittt	eq
 8000f08:	0040      	lsleq	r0, r0, #1
 8000f0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f0e:	3a01      	subeq	r2, #1
 8000f10:	d0f9      	beq.n	8000f06 <__aeabi_fdiv+0xc2>
 8000f12:	ea40 000c 	orr.w	r0, r0, ip
 8000f16:	f093 0f00 	teq	r3, #0
 8000f1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0049      	lsleq	r1, r1, #1
 8000f22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f26:	3b01      	subeq	r3, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xda>
 8000f2a:	ea41 010c 	orr.w	r1, r1, ip
 8000f2e:	e795      	b.n	8000e5c <__aeabi_fdiv+0x18>
 8000f30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f34:	ea92 0f0c 	teq	r2, ip
 8000f38:	d108      	bne.n	8000f4c <__aeabi_fdiv+0x108>
 8000f3a:	0242      	lsls	r2, r0, #9
 8000f3c:	f47f af7d 	bne.w	8000e3a <__aeabi_fmul+0x15e>
 8000f40:	ea93 0f0c 	teq	r3, ip
 8000f44:	f47f af70 	bne.w	8000e28 <__aeabi_fmul+0x14c>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e776      	b.n	8000e3a <__aeabi_fmul+0x15e>
 8000f4c:	ea93 0f0c 	teq	r3, ip
 8000f50:	d104      	bne.n	8000f5c <__aeabi_fdiv+0x118>
 8000f52:	024b      	lsls	r3, r1, #9
 8000f54:	f43f af4c 	beq.w	8000df0 <__aeabi_fmul+0x114>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e76e      	b.n	8000e3a <__aeabi_fmul+0x15e>
 8000f5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f60:	bf18      	it	ne
 8000f62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	d1ca      	bne.n	8000efe <__aeabi_fdiv+0xba>
 8000f68:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f6c:	f47f af5c 	bne.w	8000e28 <__aeabi_fmul+0x14c>
 8000f70:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f74:	f47f af3c 	bne.w	8000df0 <__aeabi_fmul+0x114>
 8000f78:	e75f      	b.n	8000e3a <__aeabi_fmul+0x15e>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_uldivmod>:
 8000f7c:	b953      	cbnz	r3, 8000f94 <__aeabi_uldivmod+0x18>
 8000f7e:	b94a      	cbnz	r2, 8000f94 <__aeabi_uldivmod+0x18>
 8000f80:	2900      	cmp	r1, #0
 8000f82:	bf08      	it	eq
 8000f84:	2800      	cmpeq	r0, #0
 8000f86:	bf1c      	itt	ne
 8000f88:	f04f 31ff 	movne.w	r1, #4294967295
 8000f8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000f90:	f000 b97a 	b.w	8001288 <__aeabi_idiv0>
 8000f94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f9c:	f000 f806 	bl	8000fac <__udivmoddi4>
 8000fa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fa8:	b004      	add	sp, #16
 8000faa:	4770      	bx	lr

08000fac <__udivmoddi4>:
 8000fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fb0:	468c      	mov	ip, r1
 8000fb2:	460e      	mov	r6, r1
 8000fb4:	4604      	mov	r4, r0
 8000fb6:	9d08      	ldr	r5, [sp, #32]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d150      	bne.n	800105e <__udivmoddi4+0xb2>
 8000fbc:	428a      	cmp	r2, r1
 8000fbe:	4617      	mov	r7, r2
 8000fc0:	d96c      	bls.n	800109c <__udivmoddi4+0xf0>
 8000fc2:	fab2 fe82 	clz	lr, r2
 8000fc6:	f1be 0f00 	cmp.w	lr, #0
 8000fca:	d00b      	beq.n	8000fe4 <__udivmoddi4+0x38>
 8000fcc:	f1ce 0c20 	rsb	ip, lr, #32
 8000fd0:	fa01 f60e 	lsl.w	r6, r1, lr
 8000fd4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000fd8:	fa02 f70e 	lsl.w	r7, r2, lr
 8000fdc:	ea4c 0c06 	orr.w	ip, ip, r6
 8000fe0:	fa00 f40e 	lsl.w	r4, r0, lr
 8000fe4:	0c3a      	lsrs	r2, r7, #16
 8000fe6:	fbbc f9f2 	udiv	r9, ip, r2
 8000fea:	b2bb      	uxth	r3, r7
 8000fec:	fb02 cc19 	mls	ip, r2, r9, ip
 8000ff0:	fb09 fa03 	mul.w	sl, r9, r3
 8000ff4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000ff8:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8000ffc:	45b2      	cmp	sl, r6
 8000ffe:	d90a      	bls.n	8001016 <__udivmoddi4+0x6a>
 8001000:	19f6      	adds	r6, r6, r7
 8001002:	f109 31ff 	add.w	r1, r9, #4294967295
 8001006:	f080 8125 	bcs.w	8001254 <__udivmoddi4+0x2a8>
 800100a:	45b2      	cmp	sl, r6
 800100c:	f240 8122 	bls.w	8001254 <__udivmoddi4+0x2a8>
 8001010:	f1a9 0902 	sub.w	r9, r9, #2
 8001014:	443e      	add	r6, r7
 8001016:	eba6 060a 	sub.w	r6, r6, sl
 800101a:	fbb6 f0f2 	udiv	r0, r6, r2
 800101e:	fb02 6610 	mls	r6, r2, r0, r6
 8001022:	fb00 f303 	mul.w	r3, r0, r3
 8001026:	b2a4      	uxth	r4, r4
 8001028:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800102c:	42a3      	cmp	r3, r4
 800102e:	d909      	bls.n	8001044 <__udivmoddi4+0x98>
 8001030:	19e4      	adds	r4, r4, r7
 8001032:	f100 32ff 	add.w	r2, r0, #4294967295
 8001036:	f080 810b 	bcs.w	8001250 <__udivmoddi4+0x2a4>
 800103a:	42a3      	cmp	r3, r4
 800103c:	f240 8108 	bls.w	8001250 <__udivmoddi4+0x2a4>
 8001040:	3802      	subs	r0, #2
 8001042:	443c      	add	r4, r7
 8001044:	2100      	movs	r1, #0
 8001046:	1ae4      	subs	r4, r4, r3
 8001048:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800104c:	2d00      	cmp	r5, #0
 800104e:	d062      	beq.n	8001116 <__udivmoddi4+0x16a>
 8001050:	2300      	movs	r3, #0
 8001052:	fa24 f40e 	lsr.w	r4, r4, lr
 8001056:	602c      	str	r4, [r5, #0]
 8001058:	606b      	str	r3, [r5, #4]
 800105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105e:	428b      	cmp	r3, r1
 8001060:	d907      	bls.n	8001072 <__udivmoddi4+0xc6>
 8001062:	2d00      	cmp	r5, #0
 8001064:	d055      	beq.n	8001112 <__udivmoddi4+0x166>
 8001066:	2100      	movs	r1, #0
 8001068:	e885 0041 	stmia.w	r5, {r0, r6}
 800106c:	4608      	mov	r0, r1
 800106e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001072:	fab3 f183 	clz	r1, r3
 8001076:	2900      	cmp	r1, #0
 8001078:	f040 808f 	bne.w	800119a <__udivmoddi4+0x1ee>
 800107c:	42b3      	cmp	r3, r6
 800107e:	d302      	bcc.n	8001086 <__udivmoddi4+0xda>
 8001080:	4282      	cmp	r2, r0
 8001082:	f200 80fc 	bhi.w	800127e <__udivmoddi4+0x2d2>
 8001086:	1a84      	subs	r4, r0, r2
 8001088:	eb66 0603 	sbc.w	r6, r6, r3
 800108c:	2001      	movs	r0, #1
 800108e:	46b4      	mov	ip, r6
 8001090:	2d00      	cmp	r5, #0
 8001092:	d040      	beq.n	8001116 <__udivmoddi4+0x16a>
 8001094:	e885 1010 	stmia.w	r5, {r4, ip}
 8001098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800109c:	b912      	cbnz	r2, 80010a4 <__udivmoddi4+0xf8>
 800109e:	2701      	movs	r7, #1
 80010a0:	fbb7 f7f2 	udiv	r7, r7, r2
 80010a4:	fab7 fe87 	clz	lr, r7
 80010a8:	f1be 0f00 	cmp.w	lr, #0
 80010ac:	d135      	bne.n	800111a <__udivmoddi4+0x16e>
 80010ae:	2101      	movs	r1, #1
 80010b0:	1bf6      	subs	r6, r6, r7
 80010b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80010b6:	fa1f f887 	uxth.w	r8, r7
 80010ba:	fbb6 f2fc 	udiv	r2, r6, ip
 80010be:	fb0c 6612 	mls	r6, ip, r2, r6
 80010c2:	fb08 f002 	mul.w	r0, r8, r2
 80010c6:	0c23      	lsrs	r3, r4, #16
 80010c8:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80010cc:	42b0      	cmp	r0, r6
 80010ce:	d907      	bls.n	80010e0 <__udivmoddi4+0x134>
 80010d0:	19f6      	adds	r6, r6, r7
 80010d2:	f102 33ff 	add.w	r3, r2, #4294967295
 80010d6:	d202      	bcs.n	80010de <__udivmoddi4+0x132>
 80010d8:	42b0      	cmp	r0, r6
 80010da:	f200 80d2 	bhi.w	8001282 <__udivmoddi4+0x2d6>
 80010de:	461a      	mov	r2, r3
 80010e0:	1a36      	subs	r6, r6, r0
 80010e2:	fbb6 f0fc 	udiv	r0, r6, ip
 80010e6:	fb0c 6610 	mls	r6, ip, r0, r6
 80010ea:	fb08 f800 	mul.w	r8, r8, r0
 80010ee:	b2a3      	uxth	r3, r4
 80010f0:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80010f4:	45a0      	cmp	r8, r4
 80010f6:	d907      	bls.n	8001108 <__udivmoddi4+0x15c>
 80010f8:	19e4      	adds	r4, r4, r7
 80010fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80010fe:	d202      	bcs.n	8001106 <__udivmoddi4+0x15a>
 8001100:	45a0      	cmp	r8, r4
 8001102:	f200 80b9 	bhi.w	8001278 <__udivmoddi4+0x2cc>
 8001106:	4618      	mov	r0, r3
 8001108:	eba4 0408 	sub.w	r4, r4, r8
 800110c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001110:	e79c      	b.n	800104c <__udivmoddi4+0xa0>
 8001112:	4629      	mov	r1, r5
 8001114:	4628      	mov	r0, r5
 8001116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800111a:	fa07 f70e 	lsl.w	r7, r7, lr
 800111e:	f1ce 0320 	rsb	r3, lr, #32
 8001122:	fa26 f203 	lsr.w	r2, r6, r3
 8001126:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800112a:	fbb2 f1fc 	udiv	r1, r2, ip
 800112e:	fa1f f887 	uxth.w	r8, r7
 8001132:	fb0c 2211 	mls	r2, ip, r1, r2
 8001136:	fa06 f60e 	lsl.w	r6, r6, lr
 800113a:	fa20 f303 	lsr.w	r3, r0, r3
 800113e:	fb01 f908 	mul.w	r9, r1, r8
 8001142:	4333      	orrs	r3, r6
 8001144:	0c1e      	lsrs	r6, r3, #16
 8001146:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800114a:	45b1      	cmp	r9, r6
 800114c:	fa00 f40e 	lsl.w	r4, r0, lr
 8001150:	d909      	bls.n	8001166 <__udivmoddi4+0x1ba>
 8001152:	19f6      	adds	r6, r6, r7
 8001154:	f101 32ff 	add.w	r2, r1, #4294967295
 8001158:	f080 808c 	bcs.w	8001274 <__udivmoddi4+0x2c8>
 800115c:	45b1      	cmp	r9, r6
 800115e:	f240 8089 	bls.w	8001274 <__udivmoddi4+0x2c8>
 8001162:	3902      	subs	r1, #2
 8001164:	443e      	add	r6, r7
 8001166:	eba6 0609 	sub.w	r6, r6, r9
 800116a:	fbb6 f0fc 	udiv	r0, r6, ip
 800116e:	fb0c 6210 	mls	r2, ip, r0, r6
 8001172:	fb00 f908 	mul.w	r9, r0, r8
 8001176:	b29e      	uxth	r6, r3
 8001178:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800117c:	45b1      	cmp	r9, r6
 800117e:	d907      	bls.n	8001190 <__udivmoddi4+0x1e4>
 8001180:	19f6      	adds	r6, r6, r7
 8001182:	f100 33ff 	add.w	r3, r0, #4294967295
 8001186:	d271      	bcs.n	800126c <__udivmoddi4+0x2c0>
 8001188:	45b1      	cmp	r9, r6
 800118a:	d96f      	bls.n	800126c <__udivmoddi4+0x2c0>
 800118c:	3802      	subs	r0, #2
 800118e:	443e      	add	r6, r7
 8001190:	eba6 0609 	sub.w	r6, r6, r9
 8001194:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001198:	e78f      	b.n	80010ba <__udivmoddi4+0x10e>
 800119a:	f1c1 0720 	rsb	r7, r1, #32
 800119e:	fa22 f807 	lsr.w	r8, r2, r7
 80011a2:	408b      	lsls	r3, r1
 80011a4:	ea48 0303 	orr.w	r3, r8, r3
 80011a8:	fa26 f407 	lsr.w	r4, r6, r7
 80011ac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80011b0:	fbb4 f9fe 	udiv	r9, r4, lr
 80011b4:	fa1f fc83 	uxth.w	ip, r3
 80011b8:	fb0e 4419 	mls	r4, lr, r9, r4
 80011bc:	408e      	lsls	r6, r1
 80011be:	fa20 f807 	lsr.w	r8, r0, r7
 80011c2:	fb09 fa0c 	mul.w	sl, r9, ip
 80011c6:	ea48 0806 	orr.w	r8, r8, r6
 80011ca:	ea4f 4618 	mov.w	r6, r8, lsr #16
 80011ce:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 80011d2:	45a2      	cmp	sl, r4
 80011d4:	fa02 f201 	lsl.w	r2, r2, r1
 80011d8:	fa00 f601 	lsl.w	r6, r0, r1
 80011dc:	d908      	bls.n	80011f0 <__udivmoddi4+0x244>
 80011de:	18e4      	adds	r4, r4, r3
 80011e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80011e4:	d244      	bcs.n	8001270 <__udivmoddi4+0x2c4>
 80011e6:	45a2      	cmp	sl, r4
 80011e8:	d942      	bls.n	8001270 <__udivmoddi4+0x2c4>
 80011ea:	f1a9 0902 	sub.w	r9, r9, #2
 80011ee:	441c      	add	r4, r3
 80011f0:	eba4 040a 	sub.w	r4, r4, sl
 80011f4:	fbb4 f0fe 	udiv	r0, r4, lr
 80011f8:	fb0e 4410 	mls	r4, lr, r0, r4
 80011fc:	fb00 fc0c 	mul.w	ip, r0, ip
 8001200:	fa1f f888 	uxth.w	r8, r8
 8001204:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8001208:	45a4      	cmp	ip, r4
 800120a:	d907      	bls.n	800121c <__udivmoddi4+0x270>
 800120c:	18e4      	adds	r4, r4, r3
 800120e:	f100 3eff 	add.w	lr, r0, #4294967295
 8001212:	d229      	bcs.n	8001268 <__udivmoddi4+0x2bc>
 8001214:	45a4      	cmp	ip, r4
 8001216:	d927      	bls.n	8001268 <__udivmoddi4+0x2bc>
 8001218:	3802      	subs	r0, #2
 800121a:	441c      	add	r4, r3
 800121c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001220:	fba0 8902 	umull	r8, r9, r0, r2
 8001224:	eba4 0c0c 	sub.w	ip, r4, ip
 8001228:	45cc      	cmp	ip, r9
 800122a:	46c2      	mov	sl, r8
 800122c:	46ce      	mov	lr, r9
 800122e:	d315      	bcc.n	800125c <__udivmoddi4+0x2b0>
 8001230:	d012      	beq.n	8001258 <__udivmoddi4+0x2ac>
 8001232:	b155      	cbz	r5, 800124a <__udivmoddi4+0x29e>
 8001234:	ebb6 030a 	subs.w	r3, r6, sl
 8001238:	eb6c 060e 	sbc.w	r6, ip, lr
 800123c:	fa06 f707 	lsl.w	r7, r6, r7
 8001240:	40cb      	lsrs	r3, r1
 8001242:	431f      	orrs	r7, r3
 8001244:	40ce      	lsrs	r6, r1
 8001246:	602f      	str	r7, [r5, #0]
 8001248:	606e      	str	r6, [r5, #4]
 800124a:	2100      	movs	r1, #0
 800124c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001250:	4610      	mov	r0, r2
 8001252:	e6f7      	b.n	8001044 <__udivmoddi4+0x98>
 8001254:	4689      	mov	r9, r1
 8001256:	e6de      	b.n	8001016 <__udivmoddi4+0x6a>
 8001258:	4546      	cmp	r6, r8
 800125a:	d2ea      	bcs.n	8001232 <__udivmoddi4+0x286>
 800125c:	ebb8 0a02 	subs.w	sl, r8, r2
 8001260:	eb69 0e03 	sbc.w	lr, r9, r3
 8001264:	3801      	subs	r0, #1
 8001266:	e7e4      	b.n	8001232 <__udivmoddi4+0x286>
 8001268:	4670      	mov	r0, lr
 800126a:	e7d7      	b.n	800121c <__udivmoddi4+0x270>
 800126c:	4618      	mov	r0, r3
 800126e:	e78f      	b.n	8001190 <__udivmoddi4+0x1e4>
 8001270:	4681      	mov	r9, r0
 8001272:	e7bd      	b.n	80011f0 <__udivmoddi4+0x244>
 8001274:	4611      	mov	r1, r2
 8001276:	e776      	b.n	8001166 <__udivmoddi4+0x1ba>
 8001278:	3802      	subs	r0, #2
 800127a:	443c      	add	r4, r7
 800127c:	e744      	b.n	8001108 <__udivmoddi4+0x15c>
 800127e:	4608      	mov	r0, r1
 8001280:	e706      	b.n	8001090 <__udivmoddi4+0xe4>
 8001282:	3a02      	subs	r2, #2
 8001284:	443e      	add	r6, r7
 8001286:	e72b      	b.n	80010e0 <__udivmoddi4+0x134>

08001288 <__aeabi_idiv0>:
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop

0800128c <PID_init>:

double kI_clamp_MIN, kI_clamp_MAX;
double output_MIN, output_MAX, output;

void PID_init()
{
 800128c:	b490      	push	{r4, r7}
 800128e:	af00      	add	r7, sp, #0
	// set all working variable to 0
	error = 0;
 8001290:	4a0f      	ldr	r2, [pc, #60]	; (80012d0 <PID_init+0x44>)
 8001292:	f04f 0300 	mov.w	r3, #0
 8001296:	f04f 0400 	mov.w	r4, #0
 800129a:	e882 0018 	stmia.w	r2, {r3, r4}
	last_error = 0;
 800129e:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <PID_init+0x48>)
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	f04f 0400 	mov.w	r4, #0
 80012a8:	e882 0018 	stmia.w	r2, {r3, r4}

	kI_error_sum = 0;
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <PID_init+0x4c>)
 80012ae:	f04f 0300 	mov.w	r3, #0
 80012b2:	f04f 0400 	mov.w	r4, #0
 80012b6:	e882 0018 	stmia.w	r2, {r3, r4}
	kD_error_der = 0;
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <PID_init+0x50>)
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	f04f 0400 	mov.w	r4, #0
 80012c4:	e882 0018 	stmia.w	r2, {r3, r4}
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc90      	pop	{r4, r7}
 80012ce:	4770      	bx	lr
 80012d0:	20000730 	.word	0x20000730
 80012d4:	200006e0 	.word	0x200006e0
 80012d8:	20000710 	.word	0x20000710
 80012dc:	20000700 	.word	0x20000700

080012e0 <PID_set_gain>:

void PID_set_gain(float kP_set, float kI_set, float kD_set)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
	kP = kP_set;
 80012ec:	68f8      	ldr	r0, [r7, #12]
 80012ee:	f7ff f89b 	bl	8000428 <__aeabi_f2d>
 80012f2:	4603      	mov	r3, r0
 80012f4:	460c      	mov	r4, r1
 80012f6:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <PID_set_gain+0x44>)
 80012f8:	e882 0018 	stmia.w	r2, {r3, r4}
	kI = kI_set;
 80012fc:	68b8      	ldr	r0, [r7, #8]
 80012fe:	f7ff f893 	bl	8000428 <__aeabi_f2d>
 8001302:	4603      	mov	r3, r0
 8001304:	460c      	mov	r4, r1
 8001306:	4a08      	ldr	r2, [pc, #32]	; (8001328 <PID_set_gain+0x48>)
 8001308:	e882 0018 	stmia.w	r2, {r3, r4}
	kD = kD_set;
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff f88b 	bl	8000428 <__aeabi_f2d>
 8001312:	4603      	mov	r3, r0
 8001314:	460c      	mov	r4, r1
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <PID_set_gain+0x4c>)
 8001318:	e882 0018 	stmia.w	r2, {r3, r4}
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	bd90      	pop	{r4, r7, pc}
 8001324:	20000708 	.word	0x20000708
 8001328:	20000728 	.word	0x20000728
 800132c:	20000718 	.word	0x20000718

08001330 <PID_set_clamp>:


void PID_set_clamp(double kI_clamp_MIN_set, double kI_clamp_MAX_set, double output_MIN_set, double output_MAX_set)
{
 8001330:	b490      	push	{r4, r7}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800133a:	e9c7 2300 	strd	r2, r3, [r7]
	kI_clamp_MIN = kI_clamp_MIN_set;
 800133e:	4a0c      	ldr	r2, [pc, #48]	; (8001370 <PID_set_clamp+0x40>)
 8001340:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001344:	e882 0018 	stmia.w	r2, {r3, r4}
	kI_clamp_MAX = kI_clamp_MAX_set;
 8001348:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <PID_set_clamp+0x44>)
 800134a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800134e:	e882 0018 	stmia.w	r2, {r3, r4}

	output_MIN = output_MIN_set;
 8001352:	4a09      	ldr	r2, [pc, #36]	; (8001378 <PID_set_clamp+0x48>)
 8001354:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001358:	e882 0018 	stmia.w	r2, {r3, r4}
	output_MAX = output_MAX_set;
 800135c:	4a07      	ldr	r2, [pc, #28]	; (800137c <PID_set_clamp+0x4c>)
 800135e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001362:	e882 0018 	stmia.w	r2, {r3, r4}
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bc90      	pop	{r4, r7}
 800136e:	4770      	bx	lr
 8001370:	200006d8 	.word	0x200006d8
 8001374:	20000720 	.word	0x20000720
 8001378:	200006f8 	.word	0x200006f8
 800137c:	200006e8 	.word	0x200006e8

08001380 <PID_compute>:

double PID_compute(double set_point, double input, double time_interval_sec) {
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800138a:	e9c7 2300 	strd	r2, r3, [r7]

	// Calculate error from set_point and input
	error = set_point - input;
 800138e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001392:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001396:	f7fe fee7 	bl	8000168 <__aeabi_dsub>
 800139a:	4603      	mov	r3, r0
 800139c:	460c      	mov	r4, r1
 800139e:	4a5b      	ldr	r2, [pc, #364]	; (800150c <PID_compute+0x18c>)
 80013a0:	e882 0018 	stmia.w	r2, {r3, r4}


	// Calculate Integral part and clamp
	kI_error_sum += kI * error * time_interval_sec;
 80013a4:	4b5a      	ldr	r3, [pc, #360]	; (8001510 <PID_compute+0x190>)
 80013a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013aa:	4b58      	ldr	r3, [pc, #352]	; (800150c <PID_compute+0x18c>)
 80013ac:	cb18      	ldmia	r3, {r3, r4}
 80013ae:	461a      	mov	r2, r3
 80013b0:	4623      	mov	r3, r4
 80013b2:	f7ff f88d 	bl	80004d0 <__aeabi_dmul>
 80013b6:	4603      	mov	r3, r0
 80013b8:	460c      	mov	r4, r1
 80013ba:	4618      	mov	r0, r3
 80013bc:	4621      	mov	r1, r4
 80013be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013c2:	f7ff f885 	bl	80004d0 <__aeabi_dmul>
 80013c6:	4603      	mov	r3, r0
 80013c8:	460c      	mov	r4, r1
 80013ca:	4618      	mov	r0, r3
 80013cc:	4621      	mov	r1, r4
 80013ce:	4b51      	ldr	r3, [pc, #324]	; (8001514 <PID_compute+0x194>)
 80013d0:	cb18      	ldmia	r3, {r3, r4}
 80013d2:	461a      	mov	r2, r3
 80013d4:	4623      	mov	r3, r4
 80013d6:	f7fe fec9 	bl	800016c <__adddf3>
 80013da:	4603      	mov	r3, r0
 80013dc:	460c      	mov	r4, r1
 80013de:	4a4d      	ldr	r2, [pc, #308]	; (8001514 <PID_compute+0x194>)
 80013e0:	e882 0018 	stmia.w	r2, {r3, r4}

	if (kI_error_sum > kI_clamp_MAX){
 80013e4:	4b4b      	ldr	r3, [pc, #300]	; (8001514 <PID_compute+0x194>)
 80013e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ea:	4b4b      	ldr	r3, [pc, #300]	; (8001518 <PID_compute+0x198>)
 80013ec:	cb18      	ldmia	r3, {r3, r4}
 80013ee:	461a      	mov	r2, r3
 80013f0:	4623      	mov	r3, r4
 80013f2:	f7ff fafd 	bl	80009f0 <__aeabi_dcmpgt>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d005      	beq.n	8001408 <PID_compute+0x88>
		kI_error_sum = kI_clamp_MAX;
 80013fc:	4b46      	ldr	r3, [pc, #280]	; (8001518 <PID_compute+0x198>)
 80013fe:	cb18      	ldmia	r3, {r3, r4}
 8001400:	4a44      	ldr	r2, [pc, #272]	; (8001514 <PID_compute+0x194>)
 8001402:	e882 0018 	stmia.w	r2, {r3, r4}
 8001406:	e010      	b.n	800142a <PID_compute+0xaa>
	}
	else if (kI_error_sum < kI_clamp_MIN){
 8001408:	4b42      	ldr	r3, [pc, #264]	; (8001514 <PID_compute+0x194>)
 800140a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800140e:	4b43      	ldr	r3, [pc, #268]	; (800151c <PID_compute+0x19c>)
 8001410:	cb18      	ldmia	r3, {r3, r4}
 8001412:	461a      	mov	r2, r3
 8001414:	4623      	mov	r3, r4
 8001416:	f7ff facd 	bl	80009b4 <__aeabi_dcmplt>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d004      	beq.n	800142a <PID_compute+0xaa>
		kI_error_sum = kI_clamp_MIN;
 8001420:	4b3e      	ldr	r3, [pc, #248]	; (800151c <PID_compute+0x19c>)
 8001422:	cb18      	ldmia	r3, {r3, r4}
 8001424:	4a3b      	ldr	r2, [pc, #236]	; (8001514 <PID_compute+0x194>)
 8001426:	e882 0018 	stmia.w	r2, {r3, r4}
	}

	// Calculate Derivative part
	kD_error_der = kD * (error - last_error) / time_interval_sec;
 800142a:	4b38      	ldr	r3, [pc, #224]	; (800150c <PID_compute+0x18c>)
 800142c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001430:	4b3b      	ldr	r3, [pc, #236]	; (8001520 <PID_compute+0x1a0>)
 8001432:	cb18      	ldmia	r3, {r3, r4}
 8001434:	461a      	mov	r2, r3
 8001436:	4623      	mov	r3, r4
 8001438:	f7fe fe96 	bl	8000168 <__aeabi_dsub>
 800143c:	4603      	mov	r3, r0
 800143e:	460c      	mov	r4, r1
 8001440:	4618      	mov	r0, r3
 8001442:	4621      	mov	r1, r4
 8001444:	4b37      	ldr	r3, [pc, #220]	; (8001524 <PID_compute+0x1a4>)
 8001446:	cb18      	ldmia	r3, {r3, r4}
 8001448:	461a      	mov	r2, r3
 800144a:	4623      	mov	r3, r4
 800144c:	f7ff f840 	bl	80004d0 <__aeabi_dmul>
 8001450:	4603      	mov	r3, r0
 8001452:	460c      	mov	r4, r1
 8001454:	4618      	mov	r0, r3
 8001456:	4621      	mov	r1, r4
 8001458:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800145c:	f7ff f962 	bl	8000724 <__aeabi_ddiv>
 8001460:	4603      	mov	r3, r0
 8001462:	460c      	mov	r4, r1
 8001464:	4a30      	ldr	r2, [pc, #192]	; (8001528 <PID_compute+0x1a8>)
 8001466:	e882 0018 	stmia.w	r2, {r3, r4}


	// Calculate the sum and clamp the PID output
	output = kP * error + kI_error_sum + kD_error_der;
 800146a:	4b30      	ldr	r3, [pc, #192]	; (800152c <PID_compute+0x1ac>)
 800146c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001470:	4b26      	ldr	r3, [pc, #152]	; (800150c <PID_compute+0x18c>)
 8001472:	cb18      	ldmia	r3, {r3, r4}
 8001474:	461a      	mov	r2, r3
 8001476:	4623      	mov	r3, r4
 8001478:	f7ff f82a 	bl	80004d0 <__aeabi_dmul>
 800147c:	4603      	mov	r3, r0
 800147e:	460c      	mov	r4, r1
 8001480:	4618      	mov	r0, r3
 8001482:	4621      	mov	r1, r4
 8001484:	4b23      	ldr	r3, [pc, #140]	; (8001514 <PID_compute+0x194>)
 8001486:	cb18      	ldmia	r3, {r3, r4}
 8001488:	461a      	mov	r2, r3
 800148a:	4623      	mov	r3, r4
 800148c:	f7fe fe6e 	bl	800016c <__adddf3>
 8001490:	4603      	mov	r3, r0
 8001492:	460c      	mov	r4, r1
 8001494:	4618      	mov	r0, r3
 8001496:	4621      	mov	r1, r4
 8001498:	4b23      	ldr	r3, [pc, #140]	; (8001528 <PID_compute+0x1a8>)
 800149a:	cb18      	ldmia	r3, {r3, r4}
 800149c:	461a      	mov	r2, r3
 800149e:	4623      	mov	r3, r4
 80014a0:	f7fe fe64 	bl	800016c <__adddf3>
 80014a4:	4603      	mov	r3, r0
 80014a6:	460c      	mov	r4, r1
 80014a8:	4a21      	ldr	r2, [pc, #132]	; (8001530 <PID_compute+0x1b0>)
 80014aa:	e882 0018 	stmia.w	r2, {r3, r4}

	if (output > output_MAX) {
 80014ae:	4b20      	ldr	r3, [pc, #128]	; (8001530 <PID_compute+0x1b0>)
 80014b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014b4:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <PID_compute+0x1b4>)
 80014b6:	cb18      	ldmia	r3, {r3, r4}
 80014b8:	461a      	mov	r2, r3
 80014ba:	4623      	mov	r3, r4
 80014bc:	f7ff fa98 	bl	80009f0 <__aeabi_dcmpgt>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <PID_compute+0x152>
		output = output_MAX;
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <PID_compute+0x1b4>)
 80014c8:	cb18      	ldmia	r3, {r3, r4}
 80014ca:	4a19      	ldr	r2, [pc, #100]	; (8001530 <PID_compute+0x1b0>)
 80014cc:	e882 0018 	stmia.w	r2, {r3, r4}
 80014d0:	e010      	b.n	80014f4 <PID_compute+0x174>
	}
	else if (output < output_MIN) {
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <PID_compute+0x1b0>)
 80014d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <PID_compute+0x1b8>)
 80014da:	cb18      	ldmia	r3, {r3, r4}
 80014dc:	461a      	mov	r2, r3
 80014de:	4623      	mov	r3, r4
 80014e0:	f7ff fa68 	bl	80009b4 <__aeabi_dcmplt>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d004      	beq.n	80014f4 <PID_compute+0x174>
		output = output_MIN;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <PID_compute+0x1b8>)
 80014ec:	cb18      	ldmia	r3, {r3, r4}
 80014ee:	4a10      	ldr	r2, [pc, #64]	; (8001530 <PID_compute+0x1b0>)
 80014f0:	e882 0018 	stmia.w	r2, {r3, r4}
	}

	last_error = error;
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <PID_compute+0x18c>)
 80014f6:	cb18      	ldmia	r3, {r3, r4}
 80014f8:	4a09      	ldr	r2, [pc, #36]	; (8001520 <PID_compute+0x1a0>)
 80014fa:	e882 0018 	stmia.w	r2, {r3, r4}
//
//	sprintf(display_pid, "%.0f  ", kD_error_der);
//	lcd_goto_XY(3, 10);
//	lcd_send_string(display_pid);

	return output;
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <PID_compute+0x1b0>)
 8001500:	cb18      	ldmia	r3, {r3, r4}
}
 8001502:	4618      	mov	r0, r3
 8001504:	4621      	mov	r1, r4
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bd90      	pop	{r4, r7, pc}
 800150c:	20000730 	.word	0x20000730
 8001510:	20000728 	.word	0x20000728
 8001514:	20000710 	.word	0x20000710
 8001518:	20000720 	.word	0x20000720
 800151c:	200006d8 	.word	0x200006d8
 8001520:	200006e0 	.word	0x200006e0
 8001524:	20000718 	.word	0x20000718
 8001528:	20000700 	.word	0x20000700
 800152c:	20000708 	.word	0x20000708
 8001530:	200006f0 	.word	0x200006f0
 8001534:	200006e8 	.word	0x200006e8
 8001538:	200006f8 	.word	0x200006f8

0800153c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af02      	add	r7, sp, #8
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	f023 030f 	bic.w	r3, r3, #15
 800154c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	f043 030c 	orr.w	r3, r3, #12
 800155a:	b2db      	uxtb	r3, r3
 800155c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	b2db      	uxtb	r3, r3
 8001566:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001568:	7bbb      	ldrb	r3, [r7, #14]
 800156a:	f043 030c 	orr.w	r3, r3, #12
 800156e:	b2db      	uxtb	r3, r3
 8001570:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001572:	7bbb      	ldrb	r3, [r7, #14]
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	b2db      	uxtb	r3, r3
 800157a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800157c:	f107 0208 	add.w	r2, r7, #8
 8001580:	2364      	movs	r3, #100	; 0x64
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2304      	movs	r3, #4
 8001586:	214e      	movs	r1, #78	; 0x4e
 8001588:	4803      	ldr	r0, [pc, #12]	; (8001598 <lcd_send_cmd+0x5c>)
 800158a:	f001 fef5 	bl	8003378 <HAL_I2C_Master_Transmit>
}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000768 	.word	0x20000768

0800159c <lcd_send_data>:

void lcd_send_data (char data)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af02      	add	r7, sp, #8
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f023 030f 	bic.w	r3, r3, #15
 80015ac:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	f043 030d 	orr.w	r3, r3, #13
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	f043 0309 	orr.w	r3, r3, #9
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80015c8:	7bbb      	ldrb	r3, [r7, #14]
 80015ca:	f043 030d 	orr.w	r3, r3, #13
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80015d2:	7bbb      	ldrb	r3, [r7, #14]
 80015d4:	f043 0309 	orr.w	r3, r3, #9
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80015dc:	f107 0208 	add.w	r2, r7, #8
 80015e0:	2364      	movs	r3, #100	; 0x64
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2304      	movs	r3, #4
 80015e6:	214e      	movs	r1, #78	; 0x4e
 80015e8:	4803      	ldr	r0, [pc, #12]	; (80015f8 <lcd_send_data+0x5c>)
 80015ea:	f001 fec5 	bl	8003378 <HAL_I2C_Master_Transmit>
}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000768 	.word	0x20000768

080015fc <lcd_init>:

void lcd_init (void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8001600:	2033      	movs	r0, #51	; 0x33
 8001602:	f7ff ff9b 	bl	800153c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8001606:	2032      	movs	r0, #50	; 0x32
 8001608:	f7ff ff98 	bl	800153c <lcd_send_cmd>
	HAL_Delay(50);
 800160c:	2032      	movs	r0, #50	; 0x32
 800160e:	f000 fe59 	bl	80022c4 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8001612:	2028      	movs	r0, #40	; 0x28
 8001614:	f7ff ff92 	bl	800153c <lcd_send_cmd>
	HAL_Delay(50);
 8001618:	2032      	movs	r0, #50	; 0x32
 800161a:	f000 fe53 	bl	80022c4 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800161e:	2001      	movs	r0, #1
 8001620:	f7ff ff8c 	bl	800153c <lcd_send_cmd>
	HAL_Delay(50);
 8001624:	2032      	movs	r0, #50	; 0x32
 8001626:	f000 fe4d 	bl	80022c4 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800162a:	2006      	movs	r0, #6
 800162c:	f7ff ff86 	bl	800153c <lcd_send_cmd>
	HAL_Delay(50);
 8001630:	2032      	movs	r0, #50	; 0x32
 8001632:	f000 fe47 	bl	80022c4 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8001636:	200c      	movs	r0, #12
 8001638:	f7ff ff80 	bl	800153c <lcd_send_cmd>
	HAL_Delay(50);
 800163c:	2032      	movs	r0, #50	; 0x32
 800163e:	f000 fe41 	bl	80022c4 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8001642:	2002      	movs	r0, #2
 8001644:	f7ff ff7a 	bl	800153c <lcd_send_cmd>
	HAL_Delay(50);
 8001648:	2032      	movs	r0, #50	; 0x32
 800164a:	f000 fe3b 	bl	80022c4 <HAL_Delay>
	lcd_send_cmd (0x80);
 800164e:	2080      	movs	r0, #128	; 0x80
 8001650:	f7ff ff74 	bl	800153c <lcd_send_cmd>
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001660:	e006      	b.n	8001670 <lcd_send_string+0x18>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ff96 	bl	800159c <lcd_send_data>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f4      	bne.n	8001662 <lcd_send_string+0xa>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;

	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <lcd_goto_XY+0x54>)
 800168c:	f107 040c 	add.w	r4, r7, #12
 8001690:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001692:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if(row > 4) {
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b04      	cmp	r3, #4
 800169a:	dd01      	ble.n	80016a0 <lcd_goto_XY+0x20>
		row = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
	}

	pos_Addr = 0x80 | (row_offsets[row] + col);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	f107 0220 	add.w	r2, r7, #32
 80016a8:	4413      	add	r3, r2
 80016aa:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	4413      	add	r3, r2
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	77fb      	strb	r3, [r7, #31]
	lcd_send_cmd(pos_Addr);
 80016c2:	7ffb      	ldrb	r3, [r7, #31]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff39 	bl	800153c <lcd_send_cmd>
}
 80016ca:	bf00      	nop
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd90      	pop	{r4, r7, pc}
 80016d2:	bf00      	nop
 80016d4:	08007ee0 	.word	0x08007ee0

080016d8 <get_user_temp>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// HADC1 - potentiometer, user set target temperature
int get_user_temp() {
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0

	real_value = 0;
 80016de:	4a28      	ldr	r2, [pc, #160]	; (8001780 <get_user_temp+0xa8>)
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	f04f 0400 	mov.w	r4, #0
 80016e8:	e882 0018 	stmia.w	r2, {r3, r4}
	for (int i = 0; i < POT_SAMPLE_NUMBER; i++) {
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	e027      	b.n	8001742 <get_user_temp+0x6a>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 80016f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016f6:	4823      	ldr	r0, [pc, #140]	; (8001784 <get_user_temp+0xac>)
 80016f8:	f000 ff8c 	bl	8002614 <HAL_ADC_PollForConversion>
		value = HAL_ADC_GetValue(&hadc1);
 80016fc:	4821      	ldr	r0, [pc, #132]	; (8001784 <get_user_temp+0xac>)
 80016fe:	f001 f883 	bl	8002808 <HAL_ADC_GetValue>
 8001702:	4603      	mov	r3, r0
 8001704:	b29a      	uxth	r2, r3
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <get_user_temp+0xb0>)
 8001708:	801a      	strh	r2, [r3, #0]
		real_value += (double) value / POT_SAMPLE_NUMBER;
 800170a:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <get_user_temp+0xb0>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fe68 	bl	80003e4 <__aeabi_ui2d>
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	4b1c      	ldr	r3, [pc, #112]	; (800178c <get_user_temp+0xb4>)
 800171a:	f7ff f803 	bl	8000724 <__aeabi_ddiv>
 800171e:	4603      	mov	r3, r0
 8001720:	460c      	mov	r4, r1
 8001722:	4618      	mov	r0, r3
 8001724:	4621      	mov	r1, r4
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <get_user_temp+0xa8>)
 8001728:	cb18      	ldmia	r3, {r3, r4}
 800172a:	461a      	mov	r2, r3
 800172c:	4623      	mov	r3, r4
 800172e:	f7fe fd1d 	bl	800016c <__adddf3>
 8001732:	4603      	mov	r3, r0
 8001734:	460c      	mov	r4, r1
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <get_user_temp+0xa8>)
 8001738:	e882 0018 	stmia.w	r2, {r3, r4}
	for (int i = 0; i < POT_SAMPLE_NUMBER; i++) {
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3301      	adds	r3, #1
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b63      	cmp	r3, #99	; 0x63
 8001746:	ddd4      	ble.n	80016f2 <get_user_temp+0x1a>
	}

	return (int) ((real_value / 4096.0) * STATION_MAX_TEMP);
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <get_user_temp+0xa8>)
 800174a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <get_user_temp+0xb8>)
 8001754:	f7fe ffe6 	bl	8000724 <__aeabi_ddiv>
 8001758:	4603      	mov	r3, r0
 800175a:	460c      	mov	r4, r1
 800175c:	4618      	mov	r0, r3
 800175e:	4621      	mov	r1, r4
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <get_user_temp+0xbc>)
 8001766:	f7fe feb3 	bl	80004d0 <__aeabi_dmul>
 800176a:	4603      	mov	r3, r0
 800176c:	460c      	mov	r4, r1
 800176e:	4618      	mov	r0, r3
 8001770:	4621      	mov	r1, r4
 8001772:	f7ff f95d 	bl	8000a30 <__aeabi_d2iz>
 8001776:	4603      	mov	r3, r0
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bd90      	pop	{r4, r7, pc}
 8001780:	200007d0 	.word	0x200007d0
 8001784:	200007dc 	.word	0x200007dc
 8001788:	2000085a 	.word	0x2000085a
 800178c:	40590000 	.word	0x40590000
 8001790:	40b00000 	.word	0x40b00000
 8001794:	40790000 	.word	0x40790000

08001798 <get_heater_temp>:

//  HADC2 - heat sensor, current soldering hand temperature
int get_heater_temp() {
 8001798:	b5b0      	push	{r4, r5, r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0

	real_value = 0;
 800179e:	4a42      	ldr	r2, [pc, #264]	; (80018a8 <get_heater_temp+0x110>)
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	f04f 0400 	mov.w	r4, #0
 80017a8:	e882 0018 	stmia.w	r2, {r3, r4}
	for (int i = 0; i < SEN_SAMPLE_NUMBER; i++) {
 80017ac:	2300      	movs	r3, #0
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	e027      	b.n	8001802 <get_heater_temp+0x6a>
		HAL_ADC_PollForConversion(&hadc2, 1000);
 80017b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017b6:	483d      	ldr	r0, [pc, #244]	; (80018ac <get_heater_temp+0x114>)
 80017b8:	f000 ff2c 	bl	8002614 <HAL_ADC_PollForConversion>
		value = HAL_ADC_GetValue(&hadc2);
 80017bc:	483b      	ldr	r0, [pc, #236]	; (80018ac <get_heater_temp+0x114>)
 80017be:	f001 f823 	bl	8002808 <HAL_ADC_GetValue>
 80017c2:	4603      	mov	r3, r0
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <get_heater_temp+0x118>)
 80017c8:	801a      	strh	r2, [r3, #0]
		real_value += (double) value / SEN_SAMPLE_NUMBER;
 80017ca:	4b39      	ldr	r3, [pc, #228]	; (80018b0 <get_heater_temp+0x118>)
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fe08 	bl	80003e4 <__aeabi_ui2d>
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	4b36      	ldr	r3, [pc, #216]	; (80018b4 <get_heater_temp+0x11c>)
 80017da:	f7fe ffa3 	bl	8000724 <__aeabi_ddiv>
 80017de:	4603      	mov	r3, r0
 80017e0:	460c      	mov	r4, r1
 80017e2:	4618      	mov	r0, r3
 80017e4:	4621      	mov	r1, r4
 80017e6:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <get_heater_temp+0x110>)
 80017e8:	cb18      	ldmia	r3, {r3, r4}
 80017ea:	461a      	mov	r2, r3
 80017ec:	4623      	mov	r3, r4
 80017ee:	f7fe fcbd 	bl	800016c <__adddf3>
 80017f2:	4603      	mov	r3, r0
 80017f4:	460c      	mov	r4, r1
 80017f6:	4a2c      	ldr	r2, [pc, #176]	; (80018a8 <get_heater_temp+0x110>)
 80017f8:	e882 0018 	stmia.w	r2, {r3, r4}
	for (int i = 0; i < SEN_SAMPLE_NUMBER; i++) {
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3301      	adds	r3, #1
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001808:	dbd3      	blt.n	80017b2 <get_heater_temp+0x1a>
	}

	return 2.9525 * (1000.0 * (real_value / 4096.0)) / (1 - (real_value / 4096.0)) - 115.8382;
 800180a:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <get_heater_temp+0x110>)
 800180c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <get_heater_temp+0x120>)
 8001816:	f7fe ff85 	bl	8000724 <__aeabi_ddiv>
 800181a:	4603      	mov	r3, r0
 800181c:	460c      	mov	r4, r1
 800181e:	4618      	mov	r0, r3
 8001820:	4621      	mov	r1, r4
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	4b25      	ldr	r3, [pc, #148]	; (80018bc <get_heater_temp+0x124>)
 8001828:	f7fe fe52 	bl	80004d0 <__aeabi_dmul>
 800182c:	4603      	mov	r3, r0
 800182e:	460c      	mov	r4, r1
 8001830:	4618      	mov	r0, r3
 8001832:	4621      	mov	r1, r4
 8001834:	a318      	add	r3, pc, #96	; (adr r3, 8001898 <get_heater_temp+0x100>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe fe49 	bl	80004d0 <__aeabi_dmul>
 800183e:	4603      	mov	r3, r0
 8001840:	460c      	mov	r4, r1
 8001842:	4625      	mov	r5, r4
 8001844:	461c      	mov	r4, r3
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <get_heater_temp+0x110>)
 8001848:	e9d3 0100 	ldrd	r0, r1, [r3]
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <get_heater_temp+0x120>)
 8001852:	f7fe ff67 	bl	8000724 <__aeabi_ddiv>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	f04f 0000 	mov.w	r0, #0
 800185e:	4918      	ldr	r1, [pc, #96]	; (80018c0 <get_heater_temp+0x128>)
 8001860:	f7fe fc82 	bl	8000168 <__aeabi_dsub>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4620      	mov	r0, r4
 800186a:	4629      	mov	r1, r5
 800186c:	f7fe ff5a 	bl	8000724 <__aeabi_ddiv>
 8001870:	4603      	mov	r3, r0
 8001872:	460c      	mov	r4, r1
 8001874:	4618      	mov	r0, r3
 8001876:	4621      	mov	r1, r4
 8001878:	a309      	add	r3, pc, #36	; (adr r3, 80018a0 <get_heater_temp+0x108>)
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7fe fc73 	bl	8000168 <__aeabi_dsub>
 8001882:	4603      	mov	r3, r0
 8001884:	460c      	mov	r4, r1
 8001886:	4618      	mov	r0, r3
 8001888:	4621      	mov	r1, r4
 800188a:	f7ff f8d1 	bl	8000a30 <__aeabi_d2iz>
 800188e:	4603      	mov	r3, r0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bdb0      	pop	{r4, r5, r7, pc}
 8001898:	51eb851f 	.word	0x51eb851f
 800189c:	40079eb8 	.word	0x40079eb8
 80018a0:	119ce076 	.word	0x119ce076
 80018a4:	405cf5a5 	.word	0x405cf5a5
 80018a8:	200007d0 	.word	0x200007d0
 80018ac:	20000738 	.word	0x20000738
 80018b0:	2000085a 	.word	0x2000085a
 80018b4:	4085e000 	.word	0x4085e000
 80018b8:	40b00000 	.word	0x40b00000
 80018bc:	408f4000 	.word	0x408f4000
 80018c0:	3ff00000 	.word	0x3ff00000
 80018c4:	00000000 	.word	0x00000000

080018c8 <semi_auto_config_PID>:

// Switch PID gain
void semi_auto_config_PID(){
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af04      	add	r7, sp, #16
	if (set_temp > 320 && current_temp > 320) {
 80018ce:	4b24      	ldr	r3, [pc, #144]	; (8001960 <semi_auto_config_PID+0x98>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80018d6:	dd1d      	ble.n	8001914 <semi_auto_config_PID+0x4c>
 80018d8:	4b22      	ldr	r3, [pc, #136]	; (8001964 <semi_auto_config_PID+0x9c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80018e0:	dd18      	ble.n	8001914 <semi_auto_config_PID+0x4c>

		PID_set_gain(kP + 1, kI + 0.02, kD);
 80018e2:	4a21      	ldr	r2, [pc, #132]	; (8001968 <semi_auto_config_PID+0xa0>)
 80018e4:	4921      	ldr	r1, [pc, #132]	; (800196c <semi_auto_config_PID+0xa4>)
 80018e6:	4822      	ldr	r0, [pc, #136]	; (8001970 <semi_auto_config_PID+0xa8>)
 80018e8:	f7ff fcfa 	bl	80012e0 <PID_set_gain>
		PID_set_clamp(MIN_PWM, (70 * MAX_PWM) / 100, MIN_PWM, MAX_PWM);
 80018ec:	a418      	add	r4, pc, #96	; (adr r4, 8001950 <semi_auto_config_PID+0x88>)
 80018ee:	cc18      	ldmia	r4, {r3, r4}
 80018f0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	f04f 0400 	mov.w	r4, #0
 80018fc:	e88d 0018 	stmia.w	sp, {r3, r4}
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <semi_auto_config_PID+0xac>)
 8001906:	f04f 0000 	mov.w	r0, #0
 800190a:	f04f 0100 	mov.w	r1, #0
 800190e:	f7ff fd0f 	bl	8001330 <PID_set_clamp>
 8001912:	e017      	b.n	8001944 <semi_auto_config_PID+0x7c>
	}

	else {

		PID_set_gain(kP, kI, kD);
 8001914:	4a14      	ldr	r2, [pc, #80]	; (8001968 <semi_auto_config_PID+0xa0>)
 8001916:	4918      	ldr	r1, [pc, #96]	; (8001978 <semi_auto_config_PID+0xb0>)
 8001918:	4818      	ldr	r0, [pc, #96]	; (800197c <semi_auto_config_PID+0xb4>)
 800191a:	f7ff fce1 	bl	80012e0 <PID_set_gain>
		PID_set_clamp(MIN_PWM, (65 * MAX_PWM) / 100, MIN_PWM, MAX_PWM);
 800191e:	a40c      	add	r4, pc, #48	; (adr r4, 8001950 <semi_auto_config_PID+0x88>)
 8001920:	cc18      	ldmia	r4, {r3, r4}
 8001922:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	f04f 0400 	mov.w	r4, #0
 800192e:	e88d 0018 	stmia.w	sp, {r3, r4}
 8001932:	a309      	add	r3, pc, #36	; (adr r3, 8001958 <semi_auto_config_PID+0x90>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f04f 0000 	mov.w	r0, #0
 800193c:	f04f 0100 	mov.w	r1, #0
 8001940:	f7ff fcf6 	bl	8001330 <PID_set_clamp>
	}
}
 8001944:	bf00      	nop
 8001946:	3704      	adds	r7, #4
 8001948:	46bd      	mov	sp, r7
 800194a:	bd90      	pop	{r4, r7, pc}
 800194c:	f3af 8000 	nop.w
 8001950:	00000000 	.word	0x00000000
 8001954:	406fe000 	.word	0x406fe000
 8001958:	00000000 	.word	0x00000000
 800195c:	4064a000 	.word	0x4064a000
 8001960:	20000854 	.word	0x20000854
 8001964:	200007d8 	.word	0x200007d8
 8001968:	3e4ccccd 	.word	0x3e4ccccd
 800196c:	3ecccccd 	.word	0x3ecccccd
 8001970:	40c00000 	.word	0x40c00000
 8001974:	40664000 	.word	0x40664000
 8001978:	3ec28f5c 	.word	0x3ec28f5c
 800197c:	40a00000 	.word	0x40a00000

08001980 <set_PWM>:

void set_PWM(uint16_t pwm_in){
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
	htim2.Instance->CCR1 = pwm_in;
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <set_PWM+0x1c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	88fa      	ldrh	r2, [r7, #6]
 8001990:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	2000080c 	.word	0x2000080c

080019a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af04      	add	r7, sp, #16
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 80019a6:	f000 fc2b 	bl	8002200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019aa:	f000 f8e3 	bl	8001b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ae:	f000 fa4f 	bl	8001e50 <MX_GPIO_Init>
  MX_I2C1_Init();
 80019b2:	f000 f9ab 	bl	8001d0c <MX_I2C1_Init>
  MX_ADC1_Init();
 80019b6:	f000 f92d 	bl	8001c14 <MX_ADC1_Init>
  MX_TIM2_Init();
 80019ba:	f000 f9d5 	bl	8001d68 <MX_TIM2_Init>
  MX_ADC2_Init();
 80019be:	f000 f967 	bl	8001c90 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  // PID setup
  PID_init();
 80019c2:	f7ff fc63 	bl	800128c <PID_init>
  PID_set_gain(kP, kI, kD);
 80019c6:	4a5c      	ldr	r2, [pc, #368]	; (8001b38 <main+0x198>)
 80019c8:	495c      	ldr	r1, [pc, #368]	; (8001b3c <main+0x19c>)
 80019ca:	485d      	ldr	r0, [pc, #372]	; (8001b40 <main+0x1a0>)
 80019cc:	f7ff fc88 	bl	80012e0 <PID_set_gain>
  PID_set_clamp(MIN_PWM, (65 * MAX_PWM)/100, MIN_PWM, MAX_PWM);
 80019d0:	a453      	add	r4, pc, #332	; (adr r4, 8001b20 <main+0x180>)
 80019d2:	cc18      	ldmia	r4, {r3, r4}
 80019d4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	f04f 0400 	mov.w	r4, #0
 80019e0:	e88d 0018 	stmia.w	sp, {r3, r4}
 80019e4:	a350      	add	r3, pc, #320	; (adr r3, 8001b28 <main+0x188>)
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	f04f 0000 	mov.w	r0, #0
 80019ee:	f04f 0100 	mov.w	r1, #0
 80019f2:	f7ff fc9d 	bl	8001330 <PID_set_clamp>


  // Start ADC
  HAL_Delay(1000);
 80019f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019fa:	f000 fc63 	bl	80022c4 <HAL_Delay>

  HAL_ADCEx_Calibration_Start(&hadc1);
 80019fe:	4851      	ldr	r0, [pc, #324]	; (8001b44 <main+0x1a4>)
 8001a00:	f001 f892 	bl	8002b28 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 8001a04:	4850      	ldr	r0, [pc, #320]	; (8001b48 <main+0x1a8>)
 8001a06:	f001 f88f 	bl	8002b28 <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start(&hadc1);
 8001a0a:	484e      	ldr	r0, [pc, #312]	; (8001b44 <main+0x1a4>)
 8001a0c:	f000 fd54 	bl	80024b8 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8001a10:	484d      	ldr	r0, [pc, #308]	; (8001b48 <main+0x1a8>)
 8001a12:	f000 fd51 	bl	80024b8 <HAL_ADC_Start>


  // Start PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001a16:	2100      	movs	r1, #0
 8001a18:	484c      	ldr	r0, [pc, #304]	; (8001b4c <main+0x1ac>)
 8001a1a:	f002 fde9 	bl	80045f0 <HAL_TIM_PWM_Start>


  // Init LCD
  lcd_init();
 8001a1e:	f7ff fded 	bl	80015fc <lcd_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Get set_temp from HADC1 (potentiometer)
	  set_temp = get_user_temp();
 8001a22:	f7ff fe59 	bl	80016d8 <get_user_temp>
 8001a26:	4602      	mov	r2, r0
 8001a28:	4b49      	ldr	r3, [pc, #292]	; (8001b50 <main+0x1b0>)
 8001a2a:	601a      	str	r2, [r3, #0]
	  sprintf(display, "TG: %3d  ", set_temp);
 8001a2c:	4b48      	ldr	r3, [pc, #288]	; (8001b50 <main+0x1b0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4948      	ldr	r1, [pc, #288]	; (8001b54 <main+0x1b4>)
 8001a34:	4848      	ldr	r0, [pc, #288]	; (8001b58 <main+0x1b8>)
 8001a36:	f003 fb4d 	bl	80050d4 <sprintf>
	  lcd_goto_XY(0, 0);
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff fe1f 	bl	8001680 <lcd_goto_XY>
	  lcd_send_string(display);
 8001a42:	4845      	ldr	r0, [pc, #276]	; (8001b58 <main+0x1b8>)
 8001a44:	f7ff fe08 	bl	8001658 <lcd_send_string>


	  // Get current_temp from HADC2 (heat sensor)
	  current_temp = get_heater_temp();
 8001a48:	f7ff fea6 	bl	8001798 <get_heater_temp>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	4b43      	ldr	r3, [pc, #268]	; (8001b5c <main+0x1bc>)
 8001a50:	601a      	str	r2, [r3, #0]
	  sprintf(display, "CR: %3d |", current_temp);
 8001a52:	4b42      	ldr	r3, [pc, #264]	; (8001b5c <main+0x1bc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	4941      	ldr	r1, [pc, #260]	; (8001b60 <main+0x1c0>)
 8001a5a:	483f      	ldr	r0, [pc, #252]	; (8001b58 <main+0x1b8>)
 8001a5c:	f003 fb3a 	bl	80050d4 <sprintf>
	  lcd_goto_XY(1, 0);
 8001a60:	2100      	movs	r1, #0
 8001a62:	2001      	movs	r0, #1
 8001a64:	f7ff fe0c 	bl	8001680 <lcd_goto_XY>
	  lcd_send_string(display);
 8001a68:	483b      	ldr	r0, [pc, #236]	; (8001b58 <main+0x1b8>)
 8001a6a:	f7ff fdf5 	bl	8001658 <lcd_send_string>


	  // Only heat up when set temperature > STATION_MIN_TEMP
	  if (set_temp > STATION_MIN_TEMP) {
 8001a6e:	4b38      	ldr	r3, [pc, #224]	; (8001b50 <main+0x1b0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2bc8      	cmp	r3, #200	; 0xc8
 8001a74:	dd24      	ble.n	8001ac0 <main+0x120>
		  semi_auto_config_PID();
 8001a76:	f7ff ff27 	bl	80018c8 <semi_auto_config_PID>
		  pwm_pow = PID_compute(set_temp, current_temp, TIME_INTERVAL_SEC);
 8001a7a:	4b35      	ldr	r3, [pc, #212]	; (8001b50 <main+0x1b0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fcc0 	bl	8000404 <__aeabi_i2d>
 8001a84:	4605      	mov	r5, r0
 8001a86:	460e      	mov	r6, r1
 8001a88:	4b34      	ldr	r3, [pc, #208]	; (8001b5c <main+0x1bc>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fcb9 	bl	8000404 <__aeabi_i2d>
 8001a92:	460a      	mov	r2, r1
 8001a94:	4601      	mov	r1, r0
 8001a96:	a426      	add	r4, pc, #152	; (adr r4, 8001b30 <main+0x190>)
 8001a98:	cc18      	ldmia	r4, {r3, r4}
 8001a9a:	e88d 0018 	stmia.w	sp, {r3, r4}
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	460a      	mov	r2, r1
 8001aa2:	4628      	mov	r0, r5
 8001aa4:	4631      	mov	r1, r6
 8001aa6:	f7ff fc6b 	bl	8001380 <PID_compute>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	460c      	mov	r4, r1
 8001aae:	4618      	mov	r0, r3
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	f7fe ffe5 	bl	8000a80 <__aeabi_d2uiz>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <main+0x1c4>)
 8001abc:	801a      	strh	r2, [r3, #0]
 8001abe:	e002      	b.n	8001ac6 <main+0x126>
	  }

	  else {
		  pwm_pow = MIN_PWM; 	// turn off
 8001ac0:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <main+0x1c4>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	801a      	strh	r2, [r3, #0]
	  }


	  set_PWM(pwm_pow); 		// set the PWM
 8001ac6:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <main+0x1c4>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff ff58 	bl	8001980 <set_PWM>

	  sprintf(display, "%.0f%%  ", ((float)pwm_pow/MAX_PWM)*100);
 8001ad0:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <main+0x1c4>)
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff f8a9 	bl	8000c2c <__aeabi_ui2f>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4922      	ldr	r1, [pc, #136]	; (8001b68 <main+0x1c8>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff f9b0 	bl	8000e44 <__aeabi_fdiv>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4921      	ldr	r1, [pc, #132]	; (8001b6c <main+0x1cc>)
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff f8f7 	bl	8000cdc <__aeabi_fmul>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fc99 	bl	8000428 <__aeabi_f2d>
 8001af6:	4603      	mov	r3, r0
 8001af8:	460c      	mov	r4, r1
 8001afa:	461a      	mov	r2, r3
 8001afc:	4623      	mov	r3, r4
 8001afe:	491c      	ldr	r1, [pc, #112]	; (8001b70 <main+0x1d0>)
 8001b00:	4815      	ldr	r0, [pc, #84]	; (8001b58 <main+0x1b8>)
 8001b02:	f003 fae7 	bl	80050d4 <sprintf>
	  lcd_goto_XY(1, 12);
 8001b06:	210c      	movs	r1, #12
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f7ff fdb9 	bl	8001680 <lcd_goto_XY>
	  lcd_send_string(display);
 8001b0e:	4812      	ldr	r0, [pc, #72]	; (8001b58 <main+0x1b8>)
 8001b10:	f7ff fda2 	bl	8001658 <lcd_send_string>

	  HAL_Delay(100);
 8001b14:	2064      	movs	r0, #100	; 0x64
 8001b16:	f000 fbd5 	bl	80022c4 <HAL_Delay>
	  set_temp = get_user_temp();
 8001b1a:	e782      	b.n	8001a22 <main+0x82>
 8001b1c:	f3af 8000 	nop.w
 8001b20:	00000000 	.word	0x00000000
 8001b24:	406fe000 	.word	0x406fe000
 8001b28:	00000000 	.word	0x00000000
 8001b2c:	4064a000 	.word	0x4064a000
 8001b30:	9999999a 	.word	0x9999999a
 8001b34:	3fb99999 	.word	0x3fb99999
 8001b38:	3e4ccccd 	.word	0x3e4ccccd
 8001b3c:	3ec28f5c 	.word	0x3ec28f5c
 8001b40:	40a00000 	.word	0x40a00000
 8001b44:	200007dc 	.word	0x200007dc
 8001b48:	20000738 	.word	0x20000738
 8001b4c:	2000080c 	.word	0x2000080c
 8001b50:	20000854 	.word	0x20000854
 8001b54:	08007ef0 	.word	0x08007ef0
 8001b58:	200007bc 	.word	0x200007bc
 8001b5c:	200007d8 	.word	0x200007d8
 8001b60:	08007efc 	.word	0x08007efc
 8001b64:	20000858 	.word	0x20000858
 8001b68:	437f0000 	.word	0x437f0000
 8001b6c:	42c80000 	.word	0x42c80000
 8001b70:	08007f08 	.word	0x08007f08

08001b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b094      	sub	sp, #80	; 0x50
 8001b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b7e:	2228      	movs	r2, #40	; 0x28
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 fa9e 	bl	80050c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bac:	2310      	movs	r3, #16
 8001bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f001 fee3 	bl	8003984 <HAL_RCC_OscConfig>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001bc4:	f000 f99c 	bl	8001f00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc8:	230f      	movs	r3, #15
 8001bca:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	2100      	movs	r1, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f002 f94e 	bl	8003e84 <HAL_RCC_ClockConfig>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001bee:	f000 f987 	bl	8001f00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 fadd 	bl	80041bc <HAL_RCCEx_PeriphCLKConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c08:	f000 f97a 	bl	8001f00 <Error_Handler>
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	3750      	adds	r7, #80	; 0x50
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c24:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <MX_ADC1_Init+0x74>)
 8001c26:	4a19      	ldr	r2, [pc, #100]	; (8001c8c <MX_ADC1_Init+0x78>)
 8001c28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <MX_ADC1_Init+0x74>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c30:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <MX_ADC1_Init+0x74>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c36:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <MX_ADC1_Init+0x74>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <MX_ADC1_Init+0x74>)
 8001c3e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c44:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <MX_ADC1_Init+0x74>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <MX_ADC1_Init+0x74>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c50:	480d      	ldr	r0, [pc, #52]	; (8001c88 <MX_ADC1_Init+0x74>)
 8001c52:	f000 fb59 	bl	8002308 <HAL_ADC_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001c5c:	f000 f950 	bl	8001f00 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c60:	2301      	movs	r3, #1
 8001c62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c64:	2301      	movs	r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <MX_ADC1_Init+0x74>)
 8001c72:	f000 fdd5 	bl	8002820 <HAL_ADC_ConfigChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001c7c:	f000 f940 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	200007dc 	.word	0x200007dc
 8001c8c:	40012400 	.word	0x40012400

08001c90 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <MX_ADC2_Init+0x74>)
 8001ca2:	4a19      	ldr	r2, [pc, #100]	; (8001d08 <MX_ADC2_Init+0x78>)
 8001ca4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <MX_ADC2_Init+0x74>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <MX_ADC2_Init+0x74>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <MX_ADC2_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <MX_ADC2_Init+0x74>)
 8001cba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001cbe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <MX_ADC2_Init+0x74>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <MX_ADC2_Init+0x74>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001ccc:	480d      	ldr	r0, [pc, #52]	; (8001d04 <MX_ADC2_Init+0x74>)
 8001cce:	f000 fb1b 	bl	8002308 <HAL_ADC_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001cd8:	f000 f912 	bl	8001f00 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	4619      	mov	r1, r3
 8001cec:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_ADC2_Init+0x74>)
 8001cee:	f000 fd97 	bl	8002820 <HAL_ADC_ConfigChannel>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001cf8:	f000 f902 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000738 	.word	0x20000738
 8001d08:	40012800 	.word	0x40012800

08001d0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d12:	4a13      	ldr	r2, [pc, #76]	; (8001d60 <MX_I2C1_Init+0x54>)
 8001d14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d18:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <MX_I2C1_Init+0x58>)
 8001d1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d30:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d48:	4804      	ldr	r0, [pc, #16]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d4a:	f001 f9dd 	bl	8003108 <HAL_I2C_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d54:	f000 f8d4 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000768 	.word	0x20000768
 8001d60:	40005400 	.word	0x40005400
 8001d64:	000186a0 	.word	0x000186a0

08001d68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08e      	sub	sp, #56	; 0x38
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7c:	f107 0320 	add.w	r3, r7, #32
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
 8001d94:	615a      	str	r2, [r3, #20]
 8001d96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d98:	4b2c      	ldr	r3, [pc, #176]	; (8001e4c <MX_TIM2_Init+0xe4>)
 8001d9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001da0:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <MX_TIM2_Init+0xe4>)
 8001da2:	223f      	movs	r2, #63	; 0x3f
 8001da4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da6:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <MX_TIM2_Init+0xe4>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <MX_TIM2_Init+0xe4>)
 8001dae:	22ff      	movs	r2, #255	; 0xff
 8001db0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db2:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <MX_TIM2_Init+0xe4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db8:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <MX_TIM2_Init+0xe4>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dbe:	4823      	ldr	r0, [pc, #140]	; (8001e4c <MX_TIM2_Init+0xe4>)
 8001dc0:	f002 fb6e 	bl	80044a0 <HAL_TIM_Base_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001dca:	f000 f899 	bl	8001f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dd8:	4619      	mov	r1, r3
 8001dda:	481c      	ldr	r0, [pc, #112]	; (8001e4c <MX_TIM2_Init+0xe4>)
 8001ddc:	f002 fd68 	bl	80048b0 <HAL_TIM_ConfigClockSource>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001de6:	f000 f88b 	bl	8001f00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001dea:	4818      	ldr	r0, [pc, #96]	; (8001e4c <MX_TIM2_Init+0xe4>)
 8001dec:	f002 fba7 	bl	800453e <HAL_TIM_PWM_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001df6:	f000 f883 	bl	8001f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e02:	f107 0320 	add.w	r3, r7, #32
 8001e06:	4619      	mov	r1, r3
 8001e08:	4810      	ldr	r0, [pc, #64]	; (8001e4c <MX_TIM2_Init+0xe4>)
 8001e0a:	f003 f8ad 	bl	8004f68 <HAL_TIMEx_MasterConfigSynchronization>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001e14:	f000 f874 	bl	8001f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e18:	2360      	movs	r3, #96	; 0x60
 8001e1a:	607b      	str	r3, [r7, #4]
  //sConfigOC.Pulse = 125;
  sConfigOC.Pulse = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4807      	ldr	r0, [pc, #28]	; (8001e4c <MX_TIM2_Init+0xe4>)
 8001e30:	f002 fc80 	bl	8004734 <HAL_TIM_PWM_ConfigChannel>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001e3a:	f000 f861 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e3e:	4803      	ldr	r0, [pc, #12]	; (8001e4c <MX_TIM2_Init+0xe4>)
 8001e40:	f000 f954 	bl	80020ec <HAL_TIM_MspPostInit>

}
 8001e44:	bf00      	nop
 8001e46:	3738      	adds	r7, #56	; 0x38
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	2000080c 	.word	0x2000080c

08001e50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e56:	f107 0310 	add.w	r3, r7, #16
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e64:	4a24      	ldr	r2, [pc, #144]	; (8001ef8 <MX_GPIO_Init+0xa8>)
 8001e66:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <MX_GPIO_Init+0xa8>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f043 0310 	orr.w	r3, r3, #16
 8001e6e:	6193      	str	r3, [r2, #24]
 8001e70:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <MX_GPIO_Init+0xa8>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e7c:	4a1e      	ldr	r2, [pc, #120]	; (8001ef8 <MX_GPIO_Init+0xa8>)
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <MX_GPIO_Init+0xa8>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f043 0320 	orr.w	r3, r3, #32
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <MX_GPIO_Init+0xa8>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0320 	and.w	r3, r3, #32
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e94:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <MX_GPIO_Init+0xa8>)
 8001e96:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <MX_GPIO_Init+0xa8>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f043 0304 	orr.w	r3, r3, #4
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <MX_GPIO_Init+0xa8>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eac:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <MX_GPIO_Init+0xa8>)
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <MX_GPIO_Init+0xa8>)
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	f043 0308 	orr.w	r3, r3, #8
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <MX_GPIO_Init+0xa8>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eca:	480c      	ldr	r0, [pc, #48]	; (8001efc <MX_GPIO_Init+0xac>)
 8001ecc:	f001 f904 	bl	80030d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee2:	f107 0310 	add.w	r3, r7, #16
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4804      	ldr	r0, [pc, #16]	; (8001efc <MX_GPIO_Init+0xac>)
 8001eea:	f000 ff9b 	bl	8002e24 <HAL_GPIO_Init>

}
 8001eee:	bf00      	nop
 8001ef0:	3720      	adds	r7, #32
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40011000 	.word	0x40011000

08001f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f04:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <Error_Handler+0x6>

08001f08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f0e:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f10:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6193      	str	r3, [r2, #24]
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	4a0f      	ldr	r2, [pc, #60]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f30:	61d3      	str	r3, [r2, #28]
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_MspInit+0x5c>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_MspInit+0x60>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <HAL_MspInit+0x60>)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40010000 	.word	0x40010000

08001f6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0318 	add.w	r3, r7, #24
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a28      	ldr	r2, [pc, #160]	; (8002028 <HAL_ADC_MspInit+0xbc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d122      	bne.n	8001fd2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f8c:	4a27      	ldr	r2, [pc, #156]	; (800202c <HAL_ADC_MspInit+0xc0>)
 8001f8e:	4b27      	ldr	r3, [pc, #156]	; (800202c <HAL_ADC_MspInit+0xc0>)
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f96:	6193      	str	r3, [r2, #24]
 8001f98:	4b24      	ldr	r3, [pc, #144]	; (800202c <HAL_ADC_MspInit+0xc0>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa4:	4a21      	ldr	r2, [pc, #132]	; (800202c <HAL_ADC_MspInit+0xc0>)
 8001fa6:	4b21      	ldr	r3, [pc, #132]	; (800202c <HAL_ADC_MspInit+0xc0>)
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f043 0304 	orr.w	r3, r3, #4
 8001fae:	6193      	str	r3, [r2, #24]
 8001fb0:	4b1e      	ldr	r3, [pc, #120]	; (800202c <HAL_ADC_MspInit+0xc0>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	f107 0318 	add.w	r3, r7, #24
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4819      	ldr	r0, [pc, #100]	; (8002030 <HAL_ADC_MspInit+0xc4>)
 8001fcc:	f000 ff2a 	bl	8002e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001fd0:	e026      	b.n	8002020 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a17      	ldr	r2, [pc, #92]	; (8002034 <HAL_ADC_MspInit+0xc8>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d121      	bne.n	8002020 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001fdc:	4a13      	ldr	r2, [pc, #76]	; (800202c <HAL_ADC_MspInit+0xc0>)
 8001fde:	4b13      	ldr	r3, [pc, #76]	; (800202c <HAL_ADC_MspInit+0xc0>)
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fe6:	6193      	str	r3, [r2, #24]
 8001fe8:	4b10      	ldr	r3, [pc, #64]	; (800202c <HAL_ADC_MspInit+0xc0>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <HAL_ADC_MspInit+0xc0>)
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_ADC_MspInit+0xc0>)
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	6193      	str	r3, [r2, #24]
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_ADC_MspInit+0xc0>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800200c:	2304      	movs	r3, #4
 800200e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002010:	2303      	movs	r3, #3
 8002012:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002014:	f107 0318 	add.w	r3, r7, #24
 8002018:	4619      	mov	r1, r3
 800201a:	4805      	ldr	r0, [pc, #20]	; (8002030 <HAL_ADC_MspInit+0xc4>)
 800201c:	f000 ff02 	bl	8002e24 <HAL_GPIO_Init>
}
 8002020:	bf00      	nop
 8002022:	3728      	adds	r7, #40	; 0x28
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40012400 	.word	0x40012400
 800202c:	40021000 	.word	0x40021000
 8002030:	40010800 	.word	0x40010800
 8002034:	40012800 	.word	0x40012800

08002038 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <HAL_I2C_MspInit+0x70>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d123      	bne.n	80020a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002058:	4a14      	ldr	r2, [pc, #80]	; (80020ac <HAL_I2C_MspInit+0x74>)
 800205a:	4b14      	ldr	r3, [pc, #80]	; (80020ac <HAL_I2C_MspInit+0x74>)
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	f043 0308 	orr.w	r3, r3, #8
 8002062:	6193      	str	r3, [r2, #24]
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <HAL_I2C_MspInit+0x74>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002070:	23c0      	movs	r3, #192	; 0xc0
 8002072:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002074:	2312      	movs	r3, #18
 8002076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002078:	2303      	movs	r3, #3
 800207a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207c:	f107 0310 	add.w	r3, r7, #16
 8002080:	4619      	mov	r1, r3
 8002082:	480b      	ldr	r0, [pc, #44]	; (80020b0 <HAL_I2C_MspInit+0x78>)
 8002084:	f000 fece 	bl	8002e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002088:	4a08      	ldr	r2, [pc, #32]	; (80020ac <HAL_I2C_MspInit+0x74>)
 800208a:	4b08      	ldr	r3, [pc, #32]	; (80020ac <HAL_I2C_MspInit+0x74>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002092:	61d3      	str	r3, [r2, #28]
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <HAL_I2C_MspInit+0x74>)
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020a0:	bf00      	nop
 80020a2:	3720      	adds	r7, #32
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40005400 	.word	0x40005400
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40010c00 	.word	0x40010c00

080020b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c4:	d10b      	bne.n	80020de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020c6:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <HAL_TIM_Base_MspInit+0x34>)
 80020c8:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <HAL_TIM_Base_MspInit+0x34>)
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	61d3      	str	r3, [r2, #28]
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_TIM_Base_MspInit+0x34>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	40021000 	.word	0x40021000

080020ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800210a:	d117      	bne.n	800213c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210c:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <HAL_TIM_MspPostInit+0x58>)
 800210e:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <HAL_TIM_MspPostInit+0x58>)
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f043 0304 	orr.w	r3, r3, #4
 8002116:	6193      	str	r3, [r2, #24]
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_TIM_MspPostInit+0x58>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002124:	2301      	movs	r3, #1
 8002126:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2302      	movs	r3, #2
 800212e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	4619      	mov	r1, r3
 8002136:	4804      	ldr	r0, [pc, #16]	; (8002148 <HAL_TIM_MspPostInit+0x5c>)
 8002138:	f000 fe74 	bl	8002e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800213c:	bf00      	nop
 800213e:	3720      	adds	r7, #32
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000
 8002148:	40010800 	.word	0x40010800

0800214c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002150:	e7fe      	b.n	8002150 <NMI_Handler+0x4>

08002152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002156:	e7fe      	b.n	8002156 <HardFault_Handler+0x4>

08002158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800215c:	e7fe      	b.n	800215c <MemManage_Handler+0x4>

0800215e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002162:	e7fe      	b.n	8002162 <BusFault_Handler+0x4>

08002164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002168:	e7fe      	b.n	8002168 <UsageFault_Handler+0x4>

0800216a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr

08002176 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002192:	f000 f87b 	bl	800228c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <_sbrk+0x50>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d102      	bne.n	80021b2 <_sbrk+0x16>
		heap_end = &end;
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <_sbrk+0x50>)
 80021ae:	4a10      	ldr	r2, [pc, #64]	; (80021f0 <_sbrk+0x54>)
 80021b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <_sbrk+0x50>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <_sbrk+0x50>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4413      	add	r3, r2
 80021c0:	466a      	mov	r2, sp
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d907      	bls.n	80021d6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80021c6:	f002 ff53 	bl	8005070 <__errno>
 80021ca:	4602      	mov	r2, r0
 80021cc:	230c      	movs	r3, #12
 80021ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80021d0:	f04f 33ff 	mov.w	r3, #4294967295
 80021d4:	e006      	b.n	80021e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <_sbrk+0x50>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	4a03      	ldr	r2, [pc, #12]	; (80021ec <_sbrk+0x50>)
 80021e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80021e2:	68fb      	ldr	r3, [r7, #12]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	2000069c 	.word	0x2000069c
 80021f0:	20000870 	.word	0x20000870

080021f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002204:	4a08      	ldr	r2, [pc, #32]	; (8002228 <HAL_Init+0x28>)
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_Init+0x28>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f043 0310 	orr.w	r3, r3, #16
 800220e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002210:	2003      	movs	r0, #3
 8002212:	f000 fdd3 	bl	8002dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002216:	2000      	movs	r0, #0
 8002218:	f000 f808 	bl	800222c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800221c:	f7ff fe74 	bl	8001f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40022000 	.word	0x40022000

0800222c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_InitTick+0x54>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_InitTick+0x58>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4619      	mov	r1, r3
 800223e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002242:	fbb3 f3f1 	udiv	r3, r3, r1
 8002246:	fbb2 f3f3 	udiv	r3, r2, r3
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fddd 	bl	8002e0a <HAL_SYSTICK_Config>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e00e      	b.n	8002278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b0f      	cmp	r3, #15
 800225e:	d80a      	bhi.n	8002276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002260:	2200      	movs	r2, #0
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	f04f 30ff 	mov.w	r0, #4294967295
 8002268:	f000 fdb3 	bl	8002dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800226c:	4a06      	ldr	r2, [pc, #24]	; (8002288 <HAL_InitTick+0x5c>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	e000      	b.n	8002278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000000 	.word	0x20000000
 8002284:	20000008 	.word	0x20000008
 8002288:	20000004 	.word	0x20000004

0800228c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_IncTick+0x1c>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_IncTick+0x20>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4413      	add	r3, r2
 800229c:	4a03      	ldr	r2, [pc, #12]	; (80022ac <HAL_IncTick+0x20>)
 800229e:	6013      	str	r3, [r2, #0]
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	20000008 	.word	0x20000008
 80022ac:	2000085c 	.word	0x2000085c

080022b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return uwTick;
 80022b4:	4b02      	ldr	r3, [pc, #8]	; (80022c0 <HAL_GetTick+0x10>)
 80022b6:	681b      	ldr	r3, [r3, #0]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	2000085c 	.word	0x2000085c

080022c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022cc:	f7ff fff0 	bl	80022b0 <HAL_GetTick>
 80022d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d005      	beq.n	80022ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_Delay+0x40>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4413      	add	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ea:	bf00      	nop
 80022ec:	f7ff ffe0 	bl	80022b0 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1ad2      	subs	r2, r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d3f7      	bcc.n	80022ec <HAL_Delay+0x28>
  {
  }
}
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000008 	.word	0x20000008

08002308 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e0be      	b.n	80024a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	2b00      	cmp	r3, #0
 8002336:	d109      	bne.n	800234c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff fe10 	bl	8001f6c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 fbb1 	bl	8002ab4 <ADC_ConversionStop_Disable>
 8002352:	4603      	mov	r3, r0
 8002354:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 8099 	bne.w	8002496 <HAL_ADC_Init+0x18e>
 8002364:	7dfb      	ldrb	r3, [r7, #23]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f040 8095 	bne.w	8002496 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002374:	f023 0302 	bic.w	r3, r3, #2
 8002378:	f043 0202 	orr.w	r2, r3, #2
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002388:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	7b1b      	ldrb	r3, [r3, #12]
 800238e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002390:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	4313      	orrs	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a0:	d003      	beq.n	80023aa <HAL_ADC_Init+0xa2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d102      	bne.n	80023b0 <HAL_ADC_Init+0xa8>
 80023aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ae:	e000      	b.n	80023b2 <HAL_ADC_Init+0xaa>
 80023b0:	2300      	movs	r3, #0
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	7d1b      	ldrb	r3, [r3, #20]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d119      	bne.n	80023f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	7b1b      	ldrb	r3, [r3, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d109      	bne.n	80023dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	3b01      	subs	r3, #1
 80023ce:	035a      	lsls	r2, r3, #13
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	e00b      	b.n	80023f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	f043 0220 	orr.w	r2, r3, #32
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	f043 0201 	orr.w	r2, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	6852      	ldr	r2, [r2, #4]
 80023fe:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	430a      	orrs	r2, r1
 8002406:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6899      	ldr	r1, [r3, #8]
 8002412:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <HAL_ADC_Init+0x1a8>)
 8002414:	400b      	ands	r3, r1
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	430b      	orrs	r3, r1
 800241a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002424:	d003      	beq.n	800242e <HAL_ADC_Init+0x126>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d104      	bne.n	8002438 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	3b01      	subs	r3, #1
 8002434:	051b      	lsls	r3, r3, #20
 8002436:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002442:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	430a      	orrs	r2, r1
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <HAL_ADC_Init+0x1ac>)
 8002454:	4013      	ands	r3, r2
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	4293      	cmp	r3, r2
 800245a:	d10b      	bne.n	8002474 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	f023 0303 	bic.w	r3, r3, #3
 800246a:	f043 0201 	orr.w	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002472:	e018      	b.n	80024a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	f023 0312 	bic.w	r3, r3, #18
 800247c:	f043 0210 	orr.w	r2, r3, #16
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	f043 0201 	orr.w	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002494:	e007      	b.n	80024a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	f043 0210 	orr.w	r2, r3, #16
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	ffe1f7fd 	.word	0xffe1f7fd
 80024b4:	ff1f0efe 	.word	0xff1f0efe

080024b8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_Start+0x1a>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e098      	b.n	8002604 <HAL_ADC_Start+0x14c>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 fa98 	bl	8002a10 <ADC_Enable>
 80024e0:	4603      	mov	r3, r0
 80024e2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f040 8087 	bne.w	80025fa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a41      	ldr	r2, [pc, #260]	; (800260c <HAL_ADC_Start+0x154>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d105      	bne.n	8002516 <HAL_ADC_Start+0x5e>
 800250a:	4b41      	ldr	r3, [pc, #260]	; (8002610 <HAL_ADC_Start+0x158>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d115      	bne.n	8002542 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252c:	2b00      	cmp	r3, #0
 800252e:	d026      	beq.n	800257e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002538:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002540:	e01d      	b.n	800257e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a2f      	ldr	r2, [pc, #188]	; (8002610 <HAL_ADC_Start+0x158>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d004      	beq.n	8002562 <HAL_ADC_Start+0xaa>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a2b      	ldr	r2, [pc, #172]	; (800260c <HAL_ADC_Start+0x154>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d10d      	bne.n	800257e <HAL_ADC_Start+0xc6>
 8002562:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <HAL_ADC_Start+0x158>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256a:	2b00      	cmp	r3, #0
 800256c:	d007      	beq.n	800257e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002572:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002576:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d006      	beq.n	8002598 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	f023 0206 	bic.w	r2, r3, #6
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	62da      	str	r2, [r3, #44]	; 0x2c
 8002596:	e002      	b.n	800259e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f06f 0202 	mvn.w	r2, #2
 80025ae:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80025ba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80025be:	d113      	bne.n	80025e8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025c4:	4a11      	ldr	r2, [pc, #68]	; (800260c <HAL_ADC_Start+0x154>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d105      	bne.n	80025d6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80025ca:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_ADC_Start+0x158>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d108      	bne.n	80025e8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	6892      	ldr	r2, [r2, #8]
 80025e0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	e00c      	b.n	8002602 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	6892      	ldr	r2, [r2, #8]
 80025f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	e003      	b.n	8002602 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002602:	7bfb      	ldrb	r3, [r7, #15]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40012800 	.word	0x40012800
 8002610:	40012400 	.word	0x40012400

08002614 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800262a:	f7ff fe41 	bl	80022b0 <HAL_GetTick>
 800262e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00b      	beq.n	8002656 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002642:	f043 0220 	orr.w	r2, r3, #32
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e0c8      	b.n	80027e8 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002660:	2b00      	cmp	r3, #0
 8002662:	d12a      	bne.n	80026ba <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800266e:	2b00      	cmp	r3, #0
 8002670:	d123      	bne.n	80026ba <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002672:	e01a      	b.n	80026aa <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267a:	d016      	beq.n	80026aa <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <HAL_ADC_PollForConversion+0x7e>
 8002682:	f7ff fe15 	bl	80022b0 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	1ad2      	subs	r2, r2, r3
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d90b      	bls.n	80026aa <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	f043 0204 	orr.w	r2, r3, #4
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e09e      	b.n	80027e8 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0dd      	beq.n	8002674 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026b8:	e06c      	b.n	8002794 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80026ba:	4b4d      	ldr	r3, [pc, #308]	; (80027f0 <HAL_ADC_PollForConversion+0x1dc>)
 80026bc:	681c      	ldr	r4, [r3, #0]
 80026be:	2002      	movs	r0, #2
 80026c0:	f001 fe32 	bl	8004328 <HAL_RCCEx_GetPeriphCLKFreq>
 80026c4:	4603      	mov	r3, r0
 80026c6:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6919      	ldr	r1, [r3, #16]
 80026d0:	4b48      	ldr	r3, [pc, #288]	; (80027f4 <HAL_ADC_PollForConversion+0x1e0>)
 80026d2:	400b      	ands	r3, r1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d118      	bne.n	800270a <HAL_ADC_PollForConversion+0xf6>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68d9      	ldr	r1, [r3, #12]
 80026de:	4b46      	ldr	r3, [pc, #280]	; (80027f8 <HAL_ADC_PollForConversion+0x1e4>)
 80026e0:	400b      	ands	r3, r1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d111      	bne.n	800270a <HAL_ADC_PollForConversion+0xf6>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6919      	ldr	r1, [r3, #16]
 80026ec:	4b43      	ldr	r3, [pc, #268]	; (80027fc <HAL_ADC_PollForConversion+0x1e8>)
 80026ee:	400b      	ands	r3, r1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d108      	bne.n	8002706 <HAL_ADC_PollForConversion+0xf2>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68d9      	ldr	r1, [r3, #12]
 80026fa:	4b41      	ldr	r3, [pc, #260]	; (8002800 <HAL_ADC_PollForConversion+0x1ec>)
 80026fc:	400b      	ands	r3, r1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_ADC_PollForConversion+0xf2>
 8002702:	2314      	movs	r3, #20
 8002704:	e020      	b.n	8002748 <HAL_ADC_PollForConversion+0x134>
 8002706:	2329      	movs	r3, #41	; 0x29
 8002708:	e01e      	b.n	8002748 <HAL_ADC_PollForConversion+0x134>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6919      	ldr	r1, [r3, #16]
 8002710:	4b3a      	ldr	r3, [pc, #232]	; (80027fc <HAL_ADC_PollForConversion+0x1e8>)
 8002712:	400b      	ands	r3, r1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d106      	bne.n	8002726 <HAL_ADC_PollForConversion+0x112>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68d9      	ldr	r1, [r3, #12]
 800271e:	4b38      	ldr	r3, [pc, #224]	; (8002800 <HAL_ADC_PollForConversion+0x1ec>)
 8002720:	400b      	ands	r3, r1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00d      	beq.n	8002742 <HAL_ADC_PollForConversion+0x12e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6919      	ldr	r1, [r3, #16]
 800272c:	4b35      	ldr	r3, [pc, #212]	; (8002804 <HAL_ADC_PollForConversion+0x1f0>)
 800272e:	400b      	ands	r3, r1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d108      	bne.n	8002746 <HAL_ADC_PollForConversion+0x132>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68d9      	ldr	r1, [r3, #12]
 800273a:	4b32      	ldr	r3, [pc, #200]	; (8002804 <HAL_ADC_PollForConversion+0x1f0>)
 800273c:	400b      	ands	r3, r1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_ADC_PollForConversion+0x132>
 8002742:	2354      	movs	r3, #84	; 0x54
 8002744:	e000      	b.n	8002748 <HAL_ADC_PollForConversion+0x134>
 8002746:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002748:	fb03 f302 	mul.w	r3, r3, r2
 800274c:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800274e:	e01d      	b.n	800278c <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002756:	d016      	beq.n	8002786 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <HAL_ADC_PollForConversion+0x15a>
 800275e:	f7ff fda7 	bl	80022b0 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	1ad2      	subs	r2, r2, r3
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d90b      	bls.n	8002786 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	f043 0204 	orr.w	r2, r3, #4
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e030      	b.n	80027e8 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	3301      	adds	r3, #1
 800278a:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	429a      	cmp	r2, r3
 8002792:	d3dd      	bcc.n	8002750 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0212 	mvn.w	r2, #18
 800279c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80027b4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027b8:	d115      	bne.n	80027e6 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d111      	bne.n	80027e6 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d105      	bne.n	80027e6 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027de:	f043 0201 	orr.w	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	371c      	adds	r7, #28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd90      	pop	{r4, r7, pc}
 80027f0:	20000000 	.word	0x20000000
 80027f4:	24924924 	.word	0x24924924
 80027f8:	00924924 	.word	0x00924924
 80027fc:	12492492 	.word	0x12492492
 8002800:	00492492 	.word	0x00492492
 8002804:	00249249 	.word	0x00249249

08002808 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002820:	b490      	push	{r4, r7}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x20>
 800283c:	2302      	movs	r3, #2
 800283e:	e0dc      	b.n	80029fa <HAL_ADC_ConfigChannel+0x1da>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b06      	cmp	r3, #6
 800284e:	d81c      	bhi.n	800288a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6819      	ldr	r1, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	3b05      	subs	r3, #5
 8002866:	221f      	movs	r2, #31
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	4018      	ands	r0, r3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681c      	ldr	r4, [r3, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	3b05      	subs	r3, #5
 8002880:	fa04 f303 	lsl.w	r3, r4, r3
 8002884:	4303      	orrs	r3, r0
 8002886:	634b      	str	r3, [r1, #52]	; 0x34
 8002888:	e03c      	b.n	8002904 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b0c      	cmp	r3, #12
 8002890:	d81c      	bhi.n	80028cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6819      	ldr	r1, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	3b23      	subs	r3, #35	; 0x23
 80028a8:	221f      	movs	r2, #31
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	4018      	ands	r0, r3
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681c      	ldr	r4, [r3, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	3b23      	subs	r3, #35	; 0x23
 80028c2:	fa04 f303 	lsl.w	r3, r4, r3
 80028c6:	4303      	orrs	r3, r0
 80028c8:	630b      	str	r3, [r1, #48]	; 0x30
 80028ca:	e01b      	b.n	8002904 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6819      	ldr	r1, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	3b41      	subs	r3, #65	; 0x41
 80028e2:	221f      	movs	r2, #31
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	4018      	ands	r0, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681c      	ldr	r4, [r3, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	3b41      	subs	r3, #65	; 0x41
 80028fc:	fa04 f303 	lsl.w	r3, r4, r3
 8002900:	4303      	orrs	r3, r0
 8002902:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b09      	cmp	r3, #9
 800290a:	d91c      	bls.n	8002946 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6819      	ldr	r1, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68d8      	ldr	r0, [r3, #12]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	3b1e      	subs	r3, #30
 8002922:	2207      	movs	r2, #7
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	4018      	ands	r0, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689c      	ldr	r4, [r3, #8]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	3b1e      	subs	r3, #30
 800293c:	fa04 f303 	lsl.w	r3, r4, r3
 8002940:	4303      	orrs	r3, r0
 8002942:	60cb      	str	r3, [r1, #12]
 8002944:	e019      	b.n	800297a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6819      	ldr	r1, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6918      	ldr	r0, [r3, #16]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4613      	mov	r3, r2
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	4413      	add	r3, r2
 800295a:	2207      	movs	r2, #7
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	4018      	ands	r0, r3
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	689c      	ldr	r4, [r3, #8]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	fa04 f303 	lsl.w	r3, r4, r3
 8002976:	4303      	orrs	r3, r0
 8002978:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b10      	cmp	r3, #16
 8002980:	d003      	beq.n	800298a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002986:	2b11      	cmp	r3, #17
 8002988:	d132      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <HAL_ADC_ConfigChannel+0x1e4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d125      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d126      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6812      	ldr	r2, [r2, #0]
 80029aa:	6892      	ldr	r2, [r2, #8]
 80029ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80029b0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b10      	cmp	r3, #16
 80029b8:	d11a      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029ba:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <HAL_ADC_ConfigChannel+0x1e8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a13      	ldr	r2, [pc, #76]	; (8002a0c <HAL_ADC_ConfigChannel+0x1ec>)
 80029c0:	fba2 2303 	umull	r2, r3, r2, r3
 80029c4:	0c9a      	lsrs	r2, r3, #18
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029d0:	e002      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f9      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x1b2>
 80029de:	e007      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	f043 0220 	orr.w	r2, r3, #32
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc90      	pop	{r4, r7}
 8002a02:	4770      	bx	lr
 8002a04:	40012400 	.word	0x40012400
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	431bde83 	.word	0x431bde83

08002a10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d039      	beq.n	8002aa2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	6892      	ldr	r2, [r2, #8]
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <ADC_Enable+0x9c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1b      	ldr	r2, [pc, #108]	; (8002ab0 <ADC_Enable+0xa0>)
 8002a44:	fba2 2303 	umull	r2, r3, r2, r3
 8002a48:	0c9b      	lsrs	r3, r3, #18
 8002a4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a4c:	e002      	b.n	8002a54 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	3b01      	subs	r3, #1
 8002a52:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f9      	bne.n	8002a4e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a5a:	f7ff fc29 	bl	80022b0 <HAL_GetTick>
 8002a5e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a60:	e018      	b.n	8002a94 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a62:	f7ff fc25 	bl	80022b0 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d911      	bls.n	8002a94 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	f043 0210 	orr.w	r2, r3, #16
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	f043 0201 	orr.w	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e007      	b.n	8002aa4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d1df      	bne.n	8002a62 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	431bde83 	.word	0x431bde83

08002ab4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d127      	bne.n	8002b1e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6812      	ldr	r2, [r2, #0]
 8002ad6:	6892      	ldr	r2, [r2, #8]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ade:	f7ff fbe7 	bl	80022b0 <HAL_GetTick>
 8002ae2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ae4:	e014      	b.n	8002b10 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ae6:	f7ff fbe3 	bl	80022b0 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d90d      	bls.n	8002b10 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	f043 0210 	orr.w	r2, r3, #16
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	f043 0201 	orr.w	r2, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e007      	b.n	8002b20 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d0e3      	beq.n	8002ae6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_ADCEx_Calibration_Start+0x1e>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e086      	b.n	8002c54 <HAL_ADCEx_Calibration_Start+0x12c>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff ffb0 	bl	8002ab4 <ADC_ConversionStop_Disable>
 8002b54:	4603      	mov	r3, r0
 8002b56:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d175      	bne.n	8002c4a <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b66:	f023 0302 	bic.w	r3, r3, #2
 8002b6a:	f043 0202 	orr.w	r2, r3, #2
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002b72:	4b3a      	ldr	r3, [pc, #232]	; (8002c5c <HAL_ADCEx_Calibration_Start+0x134>)
 8002b74:	681c      	ldr	r4, [r3, #0]
 8002b76:	2002      	movs	r0, #2
 8002b78:	f001 fbd6 	bl	8004328 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002b82:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002b84:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002b86:	e002      	b.n	8002b8e <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1f9      	bne.n	8002b88 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff ff3b 	bl	8002a10 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	6892      	ldr	r2, [r2, #8]
 8002ba4:	f042 0208 	orr.w	r2, r2, #8
 8002ba8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002baa:	f7ff fb81 	bl	80022b0 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002bb0:	e014      	b.n	8002bdc <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002bb2:	f7ff fb7d 	bl	80022b0 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b0a      	cmp	r3, #10
 8002bbe:	d90d      	bls.n	8002bdc <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	f023 0312 	bic.w	r3, r3, #18
 8002bc8:	f043 0210 	orr.w	r2, r3, #16
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e03b      	b.n	8002c54 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1e3      	bne.n	8002bb2 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	6892      	ldr	r2, [r2, #8]
 8002bf4:	f042 0204 	orr.w	r2, r2, #4
 8002bf8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002bfa:	f7ff fb59 	bl	80022b0 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002c00:	e014      	b.n	8002c2c <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002c02:	f7ff fb55 	bl	80022b0 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b0a      	cmp	r3, #10
 8002c0e:	d90d      	bls.n	8002c2c <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	f023 0312 	bic.w	r3, r3, #18
 8002c18:	f043 0210 	orr.w	r2, r3, #16
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e013      	b.n	8002c54 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1e3      	bne.n	8002c02 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	f023 0303 	bic.w	r3, r3, #3
 8002c42:	f043 0201 	orr.w	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd90      	pop	{r4, r7, pc}
 8002c5c:	20000000 	.word	0x20000000

08002c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c92:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	60d3      	str	r3, [r2, #12]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cac:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	0a1b      	lsrs	r3, r3, #8
 8002cb2:	f003 0307 	and.w	r3, r3, #7
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	6039      	str	r1, [r7, #0]
 8002cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	db0a      	blt.n	8002cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd8:	490d      	ldr	r1, [pc, #52]	; (8002d10 <__NVIC_SetPriority+0x4c>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	0112      	lsls	r2, r2, #4
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cec:	e00a      	b.n	8002d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cee:	4909      	ldr	r1, [pc, #36]	; (8002d14 <__NVIC_SetPriority+0x50>)
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	3b04      	subs	r3, #4
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	0112      	lsls	r2, r2, #4
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	440b      	add	r3, r1
 8002d02:	761a      	strb	r2, [r3, #24]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000e100 	.word	0xe000e100
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	; 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f1c3 0307 	rsb	r3, r3, #7
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	bf28      	it	cs
 8002d36:	2304      	movcs	r3, #4
 8002d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	2b06      	cmp	r3, #6
 8002d40:	d902      	bls.n	8002d48 <NVIC_EncodePriority+0x30>
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3b03      	subs	r3, #3
 8002d46:	e000      	b.n	8002d4a <NVIC_EncodePriority+0x32>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	1e5a      	subs	r2, r3, #1
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	401a      	ands	r2, r3
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d5e:	2101      	movs	r1, #1
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	1e59      	subs	r1, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d6c:	4313      	orrs	r3, r2
         );
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3724      	adds	r7, #36	; 0x24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr

08002d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d88:	d301      	bcc.n	8002d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e00f      	b.n	8002dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <SysTick_Config+0x40>)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d96:	210f      	movs	r1, #15
 8002d98:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9c:	f7ff ff92 	bl	8002cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <SysTick_Config+0x40>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002da6:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <SysTick_Config+0x40>)
 8002da8:	2207      	movs	r2, #7
 8002daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	e000e010 	.word	0xe000e010

08002dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff ff4b 	bl	8002c60 <__NVIC_SetPriorityGrouping>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b086      	sub	sp, #24
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	4603      	mov	r3, r0
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de4:	f7ff ff60 	bl	8002ca8 <__NVIC_GetPriorityGrouping>
 8002de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	6978      	ldr	r0, [r7, #20]
 8002df0:	f7ff ff92 	bl	8002d18 <NVIC_EncodePriority>
 8002df4:	4602      	mov	r2, r0
 8002df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff61 	bl	8002cc4 <__NVIC_SetPriority>
}
 8002e02:	bf00      	nop
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff ffb0 	bl	8002d78 <SysTick_Config>
 8002e18:	4603      	mov	r3, r0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b08b      	sub	sp, #44	; 0x2c
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e32:	2300      	movs	r3, #0
 8002e34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e36:	e127      	b.n	8003088 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e38:	2201      	movs	r2, #1
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	f040 8116 	bne.w	8003082 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b12      	cmp	r3, #18
 8002e5c:	d034      	beq.n	8002ec8 <HAL_GPIO_Init+0xa4>
 8002e5e:	2b12      	cmp	r3, #18
 8002e60:	d80d      	bhi.n	8002e7e <HAL_GPIO_Init+0x5a>
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d02b      	beq.n	8002ebe <HAL_GPIO_Init+0x9a>
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d804      	bhi.n	8002e74 <HAL_GPIO_Init+0x50>
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d031      	beq.n	8002ed2 <HAL_GPIO_Init+0xae>
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d01c      	beq.n	8002eac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e72:	e048      	b.n	8002f06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d043      	beq.n	8002f00 <HAL_GPIO_Init+0xdc>
 8002e78:	2b11      	cmp	r3, #17
 8002e7a:	d01b      	beq.n	8002eb4 <HAL_GPIO_Init+0x90>
          break;
 8002e7c:	e043      	b.n	8002f06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e7e:	4a89      	ldr	r2, [pc, #548]	; (80030a4 <HAL_GPIO_Init+0x280>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d026      	beq.n	8002ed2 <HAL_GPIO_Init+0xae>
 8002e84:	4a87      	ldr	r2, [pc, #540]	; (80030a4 <HAL_GPIO_Init+0x280>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d806      	bhi.n	8002e98 <HAL_GPIO_Init+0x74>
 8002e8a:	4a87      	ldr	r2, [pc, #540]	; (80030a8 <HAL_GPIO_Init+0x284>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d020      	beq.n	8002ed2 <HAL_GPIO_Init+0xae>
 8002e90:	4a86      	ldr	r2, [pc, #536]	; (80030ac <HAL_GPIO_Init+0x288>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d01d      	beq.n	8002ed2 <HAL_GPIO_Init+0xae>
          break;
 8002e96:	e036      	b.n	8002f06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e98:	4a85      	ldr	r2, [pc, #532]	; (80030b0 <HAL_GPIO_Init+0x28c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d019      	beq.n	8002ed2 <HAL_GPIO_Init+0xae>
 8002e9e:	4a85      	ldr	r2, [pc, #532]	; (80030b4 <HAL_GPIO_Init+0x290>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d016      	beq.n	8002ed2 <HAL_GPIO_Init+0xae>
 8002ea4:	4a84      	ldr	r2, [pc, #528]	; (80030b8 <HAL_GPIO_Init+0x294>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <HAL_GPIO_Init+0xae>
          break;
 8002eaa:	e02c      	b.n	8002f06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	623b      	str	r3, [r7, #32]
          break;
 8002eb2:	e028      	b.n	8002f06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	623b      	str	r3, [r7, #32]
          break;
 8002ebc:	e023      	b.n	8002f06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	3308      	adds	r3, #8
 8002ec4:	623b      	str	r3, [r7, #32]
          break;
 8002ec6:	e01e      	b.n	8002f06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	330c      	adds	r3, #12
 8002ece:	623b      	str	r3, [r7, #32]
          break;
 8002ed0:	e019      	b.n	8002f06 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d102      	bne.n	8002ee0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002eda:	2304      	movs	r3, #4
 8002edc:	623b      	str	r3, [r7, #32]
          break;
 8002ede:	e012      	b.n	8002f06 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d105      	bne.n	8002ef4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ee8:	2308      	movs	r3, #8
 8002eea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	611a      	str	r2, [r3, #16]
          break;
 8002ef2:	e008      	b.n	8002f06 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ef4:	2308      	movs	r3, #8
 8002ef6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	615a      	str	r2, [r3, #20]
          break;
 8002efe:	e002      	b.n	8002f06 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f00:	2300      	movs	r3, #0
 8002f02:	623b      	str	r3, [r7, #32]
          break;
 8002f04:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	2bff      	cmp	r3, #255	; 0xff
 8002f0a:	d801      	bhi.n	8002f10 <HAL_GPIO_Init+0xec>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	e001      	b.n	8002f14 <HAL_GPIO_Init+0xf0>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3304      	adds	r3, #4
 8002f14:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	2bff      	cmp	r3, #255	; 0xff
 8002f1a:	d802      	bhi.n	8002f22 <HAL_GPIO_Init+0xfe>
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	e002      	b.n	8002f28 <HAL_GPIO_Init+0x104>
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	3b08      	subs	r3, #8
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	210f      	movs	r1, #15
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	fa01 f303 	lsl.w	r3, r1, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	401a      	ands	r2, r3
 8002f3a:	6a39      	ldr	r1, [r7, #32]
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f42:	431a      	orrs	r2, r3
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8096 	beq.w	8003082 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f56:	4a59      	ldr	r2, [pc, #356]	; (80030bc <HAL_GPIO_Init+0x298>)
 8002f58:	4b58      	ldr	r3, [pc, #352]	; (80030bc <HAL_GPIO_Init+0x298>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	6193      	str	r3, [r2, #24]
 8002f62:	4b56      	ldr	r3, [pc, #344]	; (80030bc <HAL_GPIO_Init+0x298>)
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f6e:	4a54      	ldr	r2, [pc, #336]	; (80030c0 <HAL_GPIO_Init+0x29c>)
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	089b      	lsrs	r3, r3, #2
 8002f74:	3302      	adds	r3, #2
 8002f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f7a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	220f      	movs	r2, #15
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a4b      	ldr	r2, [pc, #300]	; (80030c4 <HAL_GPIO_Init+0x2a0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d013      	beq.n	8002fc2 <HAL_GPIO_Init+0x19e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a4a      	ldr	r2, [pc, #296]	; (80030c8 <HAL_GPIO_Init+0x2a4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00d      	beq.n	8002fbe <HAL_GPIO_Init+0x19a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a49      	ldr	r2, [pc, #292]	; (80030cc <HAL_GPIO_Init+0x2a8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d007      	beq.n	8002fba <HAL_GPIO_Init+0x196>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a48      	ldr	r2, [pc, #288]	; (80030d0 <HAL_GPIO_Init+0x2ac>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d101      	bne.n	8002fb6 <HAL_GPIO_Init+0x192>
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e006      	b.n	8002fc4 <HAL_GPIO_Init+0x1a0>
 8002fb6:	2304      	movs	r3, #4
 8002fb8:	e004      	b.n	8002fc4 <HAL_GPIO_Init+0x1a0>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e002      	b.n	8002fc4 <HAL_GPIO_Init+0x1a0>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <HAL_GPIO_Init+0x1a0>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc6:	f002 0203 	and.w	r2, r2, #3
 8002fca:	0092      	lsls	r2, r2, #2
 8002fcc:	4093      	lsls	r3, r2
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fd4:	493a      	ldr	r1, [pc, #232]	; (80030c0 <HAL_GPIO_Init+0x29c>)
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	089b      	lsrs	r3, r3, #2
 8002fda:	3302      	adds	r3, #2
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d006      	beq.n	8002ffc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fee:	4939      	ldr	r1, [pc, #228]	; (80030d4 <HAL_GPIO_Init+0x2b0>)
 8002ff0:	4b38      	ldr	r3, [pc, #224]	; (80030d4 <HAL_GPIO_Init+0x2b0>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
 8002ffa:	e006      	b.n	800300a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ffc:	4935      	ldr	r1, [pc, #212]	; (80030d4 <HAL_GPIO_Init+0x2b0>)
 8002ffe:	4b35      	ldr	r3, [pc, #212]	; (80030d4 <HAL_GPIO_Init+0x2b0>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	43db      	mvns	r3, r3
 8003006:	4013      	ands	r3, r2
 8003008:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d006      	beq.n	8003024 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003016:	492f      	ldr	r1, [pc, #188]	; (80030d4 <HAL_GPIO_Init+0x2b0>)
 8003018:	4b2e      	ldr	r3, [pc, #184]	; (80030d4 <HAL_GPIO_Init+0x2b0>)
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
 8003022:	e006      	b.n	8003032 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003024:	492b      	ldr	r1, [pc, #172]	; (80030d4 <HAL_GPIO_Init+0x2b0>)
 8003026:	4b2b      	ldr	r3, [pc, #172]	; (80030d4 <HAL_GPIO_Init+0x2b0>)
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	43db      	mvns	r3, r3
 800302e:	4013      	ands	r3, r2
 8003030:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d006      	beq.n	800304c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800303e:	4925      	ldr	r1, [pc, #148]	; (80030d4 <HAL_GPIO_Init+0x2b0>)
 8003040:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <HAL_GPIO_Init+0x2b0>)
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	608b      	str	r3, [r1, #8]
 800304a:	e006      	b.n	800305a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800304c:	4921      	ldr	r1, [pc, #132]	; (80030d4 <HAL_GPIO_Init+0x2b0>)
 800304e:	4b21      	ldr	r3, [pc, #132]	; (80030d4 <HAL_GPIO_Init+0x2b0>)
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	43db      	mvns	r3, r3
 8003056:	4013      	ands	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d006      	beq.n	8003074 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003066:	491b      	ldr	r1, [pc, #108]	; (80030d4 <HAL_GPIO_Init+0x2b0>)
 8003068:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <HAL_GPIO_Init+0x2b0>)
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	60cb      	str	r3, [r1, #12]
 8003072:	e006      	b.n	8003082 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003074:	4917      	ldr	r1, [pc, #92]	; (80030d4 <HAL_GPIO_Init+0x2b0>)
 8003076:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <HAL_GPIO_Init+0x2b0>)
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	43db      	mvns	r3, r3
 800307e:	4013      	ands	r3, r2
 8003080:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	3301      	adds	r3, #1
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	fa22 f303 	lsr.w	r3, r2, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	f47f aed0 	bne.w	8002e38 <HAL_GPIO_Init+0x14>
  }
}
 8003098:	bf00      	nop
 800309a:	372c      	adds	r7, #44	; 0x2c
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	10210000 	.word	0x10210000
 80030a8:	10110000 	.word	0x10110000
 80030ac:	10120000 	.word	0x10120000
 80030b0:	10310000 	.word	0x10310000
 80030b4:	10320000 	.word	0x10320000
 80030b8:	10220000 	.word	0x10220000
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40010000 	.word	0x40010000
 80030c4:	40010800 	.word	0x40010800
 80030c8:	40010c00 	.word	0x40010c00
 80030cc:	40011000 	.word	0x40011000
 80030d0:	40011400 	.word	0x40011400
 80030d4:	40010400 	.word	0x40010400

080030d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	807b      	strh	r3, [r7, #2]
 80030e4:	4613      	mov	r3, r2
 80030e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030e8:	787b      	ldrb	r3, [r7, #1]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ee:	887a      	ldrh	r2, [r7, #2]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030f4:	e003      	b.n	80030fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030f6:	887b      	ldrh	r3, [r7, #2]
 80030f8:	041a      	lsls	r2, r3, #16
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	611a      	str	r2, [r3, #16]
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e11f      	b.n	800335a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fe ff82 	bl	8002038 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2224      	movs	r2, #36	; 0x24
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	6812      	ldr	r2, [r2, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800315a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	6812      	ldr	r2, [r2, #0]
 8003166:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800316a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800316c:	f000 ffe0 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 8003170:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4a7b      	ldr	r2, [pc, #492]	; (8003364 <HAL_I2C_Init+0x25c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d807      	bhi.n	800318c <HAL_I2C_Init+0x84>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4a7a      	ldr	r2, [pc, #488]	; (8003368 <HAL_I2C_Init+0x260>)
 8003180:	4293      	cmp	r3, r2
 8003182:	bf94      	ite	ls
 8003184:	2301      	movls	r3, #1
 8003186:	2300      	movhi	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	e006      	b.n	800319a <HAL_I2C_Init+0x92>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4a77      	ldr	r2, [pc, #476]	; (800336c <HAL_I2C_Init+0x264>)
 8003190:	4293      	cmp	r3, r2
 8003192:	bf94      	ite	ls
 8003194:	2301      	movls	r3, #1
 8003196:	2300      	movhi	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e0db      	b.n	800335a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4a72      	ldr	r2, [pc, #456]	; (8003370 <HAL_I2C_Init+0x268>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	0c9b      	lsrs	r3, r3, #18
 80031ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	6852      	ldr	r2, [r2, #4]
 80031b8:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4863      	ldr	r0, [pc, #396]	; (8003364 <HAL_I2C_Init+0x25c>)
 80031d6:	4283      	cmp	r3, r0
 80031d8:	d802      	bhi.n	80031e0 <HAL_I2C_Init+0xd8>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	3301      	adds	r3, #1
 80031de:	e009      	b.n	80031f4 <HAL_I2C_Init+0xec>
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80031e6:	fb00 f303 	mul.w	r3, r0, r3
 80031ea:	4862      	ldr	r0, [pc, #392]	; (8003374 <HAL_I2C_Init+0x26c>)
 80031ec:	fba0 0303 	umull	r0, r3, r0, r3
 80031f0:	099b      	lsrs	r3, r3, #6
 80031f2:	3301      	adds	r3, #1
 80031f4:	430b      	orrs	r3, r1
 80031f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6818      	ldr	r0, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003206:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4955      	ldr	r1, [pc, #340]	; (8003364 <HAL_I2C_Init+0x25c>)
 8003210:	428b      	cmp	r3, r1
 8003212:	d80d      	bhi.n	8003230 <HAL_I2C_Init+0x128>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1e59      	subs	r1, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003222:	3301      	adds	r3, #1
 8003224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003228:	2b04      	cmp	r3, #4
 800322a:	bf38      	it	cc
 800322c:	2304      	movcc	r3, #4
 800322e:	e04f      	b.n	80032d0 <HAL_I2C_Init+0x1c8>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d111      	bne.n	800325c <HAL_I2C_Init+0x154>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1e5c      	subs	r4, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	440b      	add	r3, r1
 8003246:	fbb4 f3f3 	udiv	r3, r4, r3
 800324a:	3301      	adds	r3, #1
 800324c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	e012      	b.n	8003282 <HAL_I2C_Init+0x17a>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1e5c      	subs	r4, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6859      	ldr	r1, [r3, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	0099      	lsls	r1, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003272:	3301      	adds	r3, #1
 8003274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf0c      	ite	eq
 800327c:	2301      	moveq	r3, #1
 800327e:	2300      	movne	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Init+0x182>
 8003286:	2301      	movs	r3, #1
 8003288:	e022      	b.n	80032d0 <HAL_I2C_Init+0x1c8>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10e      	bne.n	80032b0 <HAL_I2C_Init+0x1a8>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1e5c      	subs	r4, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	440b      	add	r3, r1
 80032a0:	fbb4 f3f3 	udiv	r3, r4, r3
 80032a4:	3301      	adds	r3, #1
 80032a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ae:	e00f      	b.n	80032d0 <HAL_I2C_Init+0x1c8>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1e5c      	subs	r4, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6859      	ldr	r1, [r3, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	0099      	lsls	r1, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	fbb4 f3f3 	udiv	r3, r4, r3
 80032c6:	3301      	adds	r3, #1
 80032c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032d0:	4313      	orrs	r3, r2
 80032d2:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	69d0      	ldr	r0, [r2, #28]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6a12      	ldr	r2, [r2, #32]
 80032ea:	4302      	orrs	r2, r0
 80032ec:	430a      	orrs	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	6908      	ldr	r0, [r1, #16]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	68c9      	ldr	r1, [r1, #12]
 800330a:	4301      	orrs	r1, r0
 800330c:	430b      	orrs	r3, r1
 800330e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	68d2      	ldr	r2, [r2, #12]
 800331a:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6950      	ldr	r0, [r2, #20]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6992      	ldr	r2, [r2, #24]
 8003326:	4302      	orrs	r2, r0
 8003328:	430a      	orrs	r2, r1
 800332a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2220      	movs	r2, #32
 8003346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	bd90      	pop	{r4, r7, pc}
 8003362:	bf00      	nop
 8003364:	000186a0 	.word	0x000186a0
 8003368:	001e847f 	.word	0x001e847f
 800336c:	003d08ff 	.word	0x003d08ff
 8003370:	431bde83 	.word	0x431bde83
 8003374:	10624dd3 	.word	0x10624dd3

08003378 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af02      	add	r7, sp, #8
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	607a      	str	r2, [r7, #4]
 8003382:	461a      	mov	r2, r3
 8003384:	460b      	mov	r3, r1
 8003386:	817b      	strh	r3, [r7, #10]
 8003388:	4613      	mov	r3, r2
 800338a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800338c:	f7fe ff90 	bl	80022b0 <HAL_GetTick>
 8003390:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b20      	cmp	r3, #32
 800339c:	f040 80e0 	bne.w	8003560 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	2319      	movs	r3, #25
 80033a6:	2201      	movs	r2, #1
 80033a8:	4970      	ldr	r1, [pc, #448]	; (800356c <HAL_I2C_Master_Transmit+0x1f4>)
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f964 	bl	8003678 <I2C_WaitOnFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033b6:	2302      	movs	r3, #2
 80033b8:	e0d3      	b.n	8003562 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_I2C_Master_Transmit+0x50>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e0cc      	b.n	8003562 <HAL_I2C_Master_Transmit+0x1ea>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d007      	beq.n	80033ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	6812      	ldr	r2, [r2, #0]
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	f042 0201 	orr.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	6812      	ldr	r2, [r2, #0]
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2221      	movs	r2, #33	; 0x21
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2210      	movs	r2, #16
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	893a      	ldrh	r2, [r7, #8]
 800341e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4a50      	ldr	r2, [pc, #320]	; (8003570 <HAL_I2C_Master_Transmit+0x1f8>)
 800342e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003430:	8979      	ldrh	r1, [r7, #10]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	6a3a      	ldr	r2, [r7, #32]
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f89c 	bl	8003574 <I2C_MasterRequestWrite>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e08d      	b.n	8003562 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800345c:	e066      	b.n	800352c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	6a39      	ldr	r1, [r7, #32]
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f9de 	bl	8003824 <I2C_WaitOnTXEFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00d      	beq.n	800348a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	2b04      	cmp	r3, #4
 8003474:	d107      	bne.n	8003486 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003484:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e06b      	b.n	8003562 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003492:	7812      	ldrb	r2, [r2, #0]
 8003494:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d11b      	bne.n	8003500 <HAL_I2C_Master_Transmit+0x188>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d017      	beq.n	8003500 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034d8:	7812      	ldrb	r2, [r2, #0]
 80034da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	6a39      	ldr	r1, [r7, #32]
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 f9ce 	bl	80038a6 <I2C_WaitOnBTFFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00d      	beq.n	800352c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	2b04      	cmp	r3, #4
 8003516:	d107      	bne.n	8003528 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	6812      	ldr	r2, [r2, #0]
 8003522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003526:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e01a      	b.n	8003562 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003530:	2b00      	cmp	r3, #0
 8003532:	d194      	bne.n	800345e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	e000      	b.n	8003562 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003560:	2302      	movs	r3, #2
  }
}
 8003562:	4618      	mov	r0, r3
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	00100002 	.word	0x00100002
 8003570:	ffff0000 	.word	0xffff0000

08003574 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af02      	add	r7, sp, #8
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	607a      	str	r2, [r7, #4]
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	460b      	mov	r3, r1
 8003582:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b08      	cmp	r3, #8
 800358e:	d006      	beq.n	800359e <I2C_MasterRequestWrite+0x2a>
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d003      	beq.n	800359e <I2C_MasterRequestWrite+0x2a>
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800359c:	d108      	bne.n	80035b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	6812      	ldr	r2, [r2, #0]
 80035a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	e00b      	b.n	80035c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	2b12      	cmp	r3, #18
 80035b6:	d107      	bne.n	80035c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 f84f 	bl	8003678 <I2C_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00d      	beq.n	80035fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ee:	d103      	bne.n	80035f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e034      	b.n	8003666 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003604:	d107      	bne.n	8003616 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	897a      	ldrh	r2, [r7, #10]
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003612:	611a      	str	r2, [r3, #16]
 8003614:	e01b      	b.n	800364e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	897a      	ldrh	r2, [r7, #10]
 800361c:	11d2      	asrs	r2, r2, #7
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	f002 0206 	and.w	r2, r2, #6
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	f062 020f 	orn	r2, r2, #15
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	490f      	ldr	r1, [pc, #60]	; (8003670 <I2C_MasterRequestWrite+0xfc>)
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 f876 	bl	8003726 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e010      	b.n	8003666 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	897a      	ldrh	r2, [r7, #10]
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	4908      	ldr	r1, [pc, #32]	; (8003674 <I2C_MasterRequestWrite+0x100>)
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f866 	bl	8003726 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e000      	b.n	8003666 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	00010008 	.word	0x00010008
 8003674:	00010002 	.word	0x00010002

08003678 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	4613      	mov	r3, r2
 8003686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003688:	e025      	b.n	80036d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003690:	d021      	beq.n	80036d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003692:	f7fe fe0d 	bl	80022b0 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	1ad2      	subs	r2, r2, r3
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d802      	bhi.n	80036a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d116      	bne.n	80036d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f043 0220 	orr.w	r2, r3, #32
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e023      	b.n	800371e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	0c1b      	lsrs	r3, r3, #16
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d10d      	bne.n	80036fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	43da      	mvns	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4013      	ands	r3, r2
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	bf0c      	ite	eq
 80036f2:	2301      	moveq	r3, #1
 80036f4:	2300      	movne	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	461a      	mov	r2, r3
 80036fa:	e00c      	b.n	8003716 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	43da      	mvns	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4013      	ands	r3, r2
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	bf0c      	ite	eq
 800370e:	2301      	moveq	r3, #1
 8003710:	2300      	movne	r3, #0
 8003712:	b2db      	uxtb	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	429a      	cmp	r2, r3
 800371a:	d0b6      	beq.n	800368a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003734:	e051      	b.n	80037da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003744:	d123      	bne.n	800378e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003754:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800375e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f043 0204 	orr.w	r2, r3, #4
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e046      	b.n	800381c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003794:	d021      	beq.n	80037da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003796:	f7fe fd8b 	bl	80022b0 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	1ad2      	subs	r2, r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d802      	bhi.n	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d116      	bne.n	80037da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f043 0220 	orr.w	r2, r3, #32
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e020      	b.n	800381c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	0c1b      	lsrs	r3, r3, #16
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d10c      	bne.n	80037fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	43da      	mvns	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4013      	ands	r3, r2
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bf14      	ite	ne
 80037f6:	2301      	movne	r3, #1
 80037f8:	2300      	moveq	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	e00b      	b.n	8003816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	43da      	mvns	r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	4013      	ands	r3, r2
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	bf14      	ite	ne
 8003810:	2301      	movne	r3, #1
 8003812:	2300      	moveq	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d18d      	bne.n	8003736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003830:	e02d      	b.n	800388e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 f878 	bl	8003928 <I2C_IsAcknowledgeFailed>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e02d      	b.n	800389e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d021      	beq.n	800388e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384a:	f7fe fd31 	bl	80022b0 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	1ad2      	subs	r2, r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	429a      	cmp	r2, r3
 8003858:	d802      	bhi.n	8003860 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d116      	bne.n	800388e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f043 0220 	orr.w	r2, r3, #32
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e007      	b.n	800389e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003898:	2b80      	cmp	r3, #128	; 0x80
 800389a:	d1ca      	bne.n	8003832 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038b2:	e02d      	b.n	8003910 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f837 	bl	8003928 <I2C_IsAcknowledgeFailed>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e02d      	b.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ca:	d021      	beq.n	8003910 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038cc:	f7fe fcf0 	bl	80022b0 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	1ad2      	subs	r2, r2, r3
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d802      	bhi.n	80038e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d116      	bne.n	8003910 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	f043 0220 	orr.w	r2, r3, #32
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e007      	b.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b04      	cmp	r3, #4
 800391c:	d1ca      	bne.n	80038b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393e:	d11b      	bne.n	8003978 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003948:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	f043 0204 	orr.w	r2, r3, #4
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr

08003984 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e26c      	b.n	8003e70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 8087 	beq.w	8003ab2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039a4:	4b92      	ldr	r3, [pc, #584]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 030c 	and.w	r3, r3, #12
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d00c      	beq.n	80039ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039b0:	4b8f      	ldr	r3, [pc, #572]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 030c 	and.w	r3, r3, #12
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d112      	bne.n	80039e2 <HAL_RCC_OscConfig+0x5e>
 80039bc:	4b8c      	ldr	r3, [pc, #560]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c8:	d10b      	bne.n	80039e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ca:	4b89      	ldr	r3, [pc, #548]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d06c      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x12c>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d168      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e246      	b.n	8003e70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ea:	d106      	bne.n	80039fa <HAL_RCC_OscConfig+0x76>
 80039ec:	4a80      	ldr	r2, [pc, #512]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 80039ee:	4b80      	ldr	r3, [pc, #512]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	e02e      	b.n	8003a58 <HAL_RCC_OscConfig+0xd4>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10c      	bne.n	8003a1c <HAL_RCC_OscConfig+0x98>
 8003a02:	4a7b      	ldr	r2, [pc, #492]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	4b7a      	ldr	r3, [pc, #488]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	4a78      	ldr	r2, [pc, #480]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003a10:	4b77      	ldr	r3, [pc, #476]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	e01d      	b.n	8003a58 <HAL_RCC_OscConfig+0xd4>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a24:	d10c      	bne.n	8003a40 <HAL_RCC_OscConfig+0xbc>
 8003a26:	4a72      	ldr	r2, [pc, #456]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003a28:	4b71      	ldr	r3, [pc, #452]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	4a6f      	ldr	r2, [pc, #444]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003a34:	4b6e      	ldr	r3, [pc, #440]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	e00b      	b.n	8003a58 <HAL_RCC_OscConfig+0xd4>
 8003a40:	4a6b      	ldr	r2, [pc, #428]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003a42:	4b6b      	ldr	r3, [pc, #428]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	4a68      	ldr	r2, [pc, #416]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003a4e:	4b68      	ldr	r3, [pc, #416]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d013      	beq.n	8003a88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a60:	f7fe fc26 	bl	80022b0 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a68:	f7fe fc22 	bl	80022b0 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	; 0x64
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e1fa      	b.n	8003e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	4b5d      	ldr	r3, [pc, #372]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0xe4>
 8003a86:	e014      	b.n	8003ab2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a88:	f7fe fc12 	bl	80022b0 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a90:	f7fe fc0e 	bl	80022b0 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b64      	cmp	r3, #100	; 0x64
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e1e6      	b.n	8003e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aa2:	4b53      	ldr	r3, [pc, #332]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0x10c>
 8003aae:	e000      	b.n	8003ab2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d063      	beq.n	8003b86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003abe:	4b4c      	ldr	r3, [pc, #304]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00b      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003aca:	4b49      	ldr	r3, [pc, #292]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d11c      	bne.n	8003b10 <HAL_RCC_OscConfig+0x18c>
 8003ad6:	4b46      	ldr	r3, [pc, #280]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d116      	bne.n	8003b10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ae2:	4b43      	ldr	r3, [pc, #268]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d005      	beq.n	8003afa <HAL_RCC_OscConfig+0x176>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d001      	beq.n	8003afa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e1ba      	b.n	8003e70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afa:	493d      	ldr	r1, [pc, #244]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003afc:	4b3c      	ldr	r3, [pc, #240]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b0e:	e03a      	b.n	8003b86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d020      	beq.n	8003b5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b18:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <HAL_RCC_OscConfig+0x270>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1e:	f7fe fbc7 	bl	80022b0 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b26:	f7fe fbc3 	bl	80022b0 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e19b      	b.n	8003e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b38:	4b2d      	ldr	r3, [pc, #180]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f0      	beq.n	8003b26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b44:	492a      	ldr	r1, [pc, #168]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003b46:	4b2a      	ldr	r3, [pc, #168]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4313      	orrs	r3, r2
 8003b56:	600b      	str	r3, [r1, #0]
 8003b58:	e015      	b.n	8003b86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b5a:	4b26      	ldr	r3, [pc, #152]	; (8003bf4 <HAL_RCC_OscConfig+0x270>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b60:	f7fe fba6 	bl	80022b0 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b68:	f7fe fba2 	bl	80022b0 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e17a      	b.n	8003e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7a:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d03a      	beq.n	8003c08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d019      	beq.n	8003bce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b9a:	4b17      	ldr	r3, [pc, #92]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba0:	f7fe fb86 	bl	80022b0 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba8:	f7fe fb82 	bl	80022b0 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e15a      	b.n	8003e70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bba:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <HAL_RCC_OscConfig+0x26c>)
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bc6:	2001      	movs	r0, #1
 8003bc8:	f000 fada 	bl	8004180 <RCC_Delay>
 8003bcc:	e01c      	b.n	8003c08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bce:	4b0a      	ldr	r3, [pc, #40]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd4:	f7fe fb6c 	bl	80022b0 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bda:	e00f      	b.n	8003bfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bdc:	f7fe fb68 	bl	80022b0 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d908      	bls.n	8003bfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e140      	b.n	8003e70 <HAL_RCC_OscConfig+0x4ec>
 8003bee:	bf00      	nop
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	42420000 	.word	0x42420000
 8003bf8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bfc:	4b9e      	ldr	r3, [pc, #632]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e9      	bne.n	8003bdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80a6 	beq.w	8003d62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c16:	2300      	movs	r3, #0
 8003c18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c1a:	4b97      	ldr	r3, [pc, #604]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10d      	bne.n	8003c42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c26:	4a94      	ldr	r2, [pc, #592]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003c28:	4b93      	ldr	r3, [pc, #588]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c30:	61d3      	str	r3, [r2, #28]
 8003c32:	4b91      	ldr	r3, [pc, #580]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3a:	60bb      	str	r3, [r7, #8]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c42:	4b8e      	ldr	r3, [pc, #568]	; (8003e7c <HAL_RCC_OscConfig+0x4f8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d118      	bne.n	8003c80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c4e:	4a8b      	ldr	r2, [pc, #556]	; (8003e7c <HAL_RCC_OscConfig+0x4f8>)
 8003c50:	4b8a      	ldr	r3, [pc, #552]	; (8003e7c <HAL_RCC_OscConfig+0x4f8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c5a:	f7fe fb29 	bl	80022b0 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c62:	f7fe fb25 	bl	80022b0 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b64      	cmp	r3, #100	; 0x64
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e0fd      	b.n	8003e70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c74:	4b81      	ldr	r3, [pc, #516]	; (8003e7c <HAL_RCC_OscConfig+0x4f8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0f0      	beq.n	8003c62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d106      	bne.n	8003c96 <HAL_RCC_OscConfig+0x312>
 8003c88:	4a7b      	ldr	r2, [pc, #492]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003c8a:	4b7b      	ldr	r3, [pc, #492]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	6213      	str	r3, [r2, #32]
 8003c94:	e02d      	b.n	8003cf2 <HAL_RCC_OscConfig+0x36e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10c      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x334>
 8003c9e:	4a76      	ldr	r2, [pc, #472]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003ca0:	4b75      	ldr	r3, [pc, #468]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	6213      	str	r3, [r2, #32]
 8003caa:	4a73      	ldr	r2, [pc, #460]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003cac:	4b72      	ldr	r3, [pc, #456]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	f023 0304 	bic.w	r3, r3, #4
 8003cb4:	6213      	str	r3, [r2, #32]
 8003cb6:	e01c      	b.n	8003cf2 <HAL_RCC_OscConfig+0x36e>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	2b05      	cmp	r3, #5
 8003cbe:	d10c      	bne.n	8003cda <HAL_RCC_OscConfig+0x356>
 8003cc0:	4a6d      	ldr	r2, [pc, #436]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003cc2:	4b6d      	ldr	r3, [pc, #436]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f043 0304 	orr.w	r3, r3, #4
 8003cca:	6213      	str	r3, [r2, #32]
 8003ccc:	4a6a      	ldr	r2, [pc, #424]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003cce:	4b6a      	ldr	r3, [pc, #424]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f043 0301 	orr.w	r3, r3, #1
 8003cd6:	6213      	str	r3, [r2, #32]
 8003cd8:	e00b      	b.n	8003cf2 <HAL_RCC_OscConfig+0x36e>
 8003cda:	4a67      	ldr	r2, [pc, #412]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003cdc:	4b66      	ldr	r3, [pc, #408]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f023 0301 	bic.w	r3, r3, #1
 8003ce4:	6213      	str	r3, [r2, #32]
 8003ce6:	4a64      	ldr	r2, [pc, #400]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003ce8:	4b63      	ldr	r3, [pc, #396]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	f023 0304 	bic.w	r3, r3, #4
 8003cf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d015      	beq.n	8003d26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cfa:	f7fe fad9 	bl	80022b0 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d00:	e00a      	b.n	8003d18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d02:	f7fe fad5 	bl	80022b0 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e0ab      	b.n	8003e70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d18:	4b57      	ldr	r3, [pc, #348]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0ee      	beq.n	8003d02 <HAL_RCC_OscConfig+0x37e>
 8003d24:	e014      	b.n	8003d50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d26:	f7fe fac3 	bl	80022b0 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2c:	e00a      	b.n	8003d44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d2e:	f7fe fabf 	bl	80022b0 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e095      	b.n	8003e70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d44:	4b4c      	ldr	r3, [pc, #304]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1ee      	bne.n	8003d2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d105      	bne.n	8003d62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d56:	4a48      	ldr	r2, [pc, #288]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003d58:	4b47      	ldr	r3, [pc, #284]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 8081 	beq.w	8003e6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d6c:	4b42      	ldr	r3, [pc, #264]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 030c 	and.w	r3, r3, #12
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d061      	beq.n	8003e3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d146      	bne.n	8003e0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d80:	4b3f      	ldr	r3, [pc, #252]	; (8003e80 <HAL_RCC_OscConfig+0x4fc>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d86:	f7fe fa93 	bl	80022b0 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d8e:	f7fe fa8f 	bl	80022b0 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e067      	b.n	8003e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003da0:	4b35      	ldr	r3, [pc, #212]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1f0      	bne.n	8003d8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db4:	d108      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003db6:	4930      	ldr	r1, [pc, #192]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003db8:	4b2f      	ldr	r3, [pc, #188]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dc8:	482b      	ldr	r0, [pc, #172]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003dca:	4b2b      	ldr	r3, [pc, #172]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a19      	ldr	r1, [r3, #32]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de0:	4b27      	ldr	r3, [pc, #156]	; (8003e80 <HAL_RCC_OscConfig+0x4fc>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de6:	f7fe fa63 	bl	80022b0 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dee:	f7fe fa5f 	bl	80022b0 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e037      	b.n	8003e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e00:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0f0      	beq.n	8003dee <HAL_RCC_OscConfig+0x46a>
 8003e0c:	e02f      	b.n	8003e6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e0e:	4b1c      	ldr	r3, [pc, #112]	; (8003e80 <HAL_RCC_OscConfig+0x4fc>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e14:	f7fe fa4c 	bl	80022b0 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1c:	f7fe fa48 	bl	80022b0 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e020      	b.n	8003e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e2e:	4b12      	ldr	r3, [pc, #72]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0x498>
 8003e3a:	e018      	b.n	8003e6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e013      	b.n	8003e70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e48:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <HAL_RCC_OscConfig+0x4f4>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d106      	bne.n	8003e6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d001      	beq.n	8003e6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40007000 	.word	0x40007000
 8003e80:	42420060 	.word	0x42420060

08003e84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0d0      	b.n	800403a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e98:	4b6a      	ldr	r3, [pc, #424]	; (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0207 	and.w	r2, r3, #7
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d210      	bcs.n	8003ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea6:	4967      	ldr	r1, [pc, #412]	; (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea8:	4b66      	ldr	r3, [pc, #408]	; (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 0207 	bic.w	r2, r3, #7
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb6:	4b63      	ldr	r3, [pc, #396]	; (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0207 	and.w	r2, r3, #7
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0b8      	b.n	800403a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d020      	beq.n	8003f16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee0:	4a59      	ldr	r2, [pc, #356]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee2:	4b59      	ldr	r3, [pc, #356]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003eea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ef8:	4a53      	ldr	r2, [pc, #332]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003efa:	4b53      	ldr	r3, [pc, #332]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f04:	4950      	ldr	r1, [pc, #320]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003f06:	4b50      	ldr	r3, [pc, #320]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d040      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d107      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2a:	4b47      	ldr	r3, [pc, #284]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d115      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e07f      	b.n	800403a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d107      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f42:	4b41      	ldr	r3, [pc, #260]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e073      	b.n	800403a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f52:	4b3d      	ldr	r3, [pc, #244]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e06b      	b.n	800403a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f62:	4939      	ldr	r1, [pc, #228]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003f64:	4b38      	ldr	r3, [pc, #224]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f023 0203 	bic.w	r2, r3, #3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f74:	f7fe f99c 	bl	80022b0 <HAL_GetTick>
 8003f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f7c:	f7fe f998 	bl	80022b0 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e053      	b.n	800403a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f92:	4b2d      	ldr	r3, [pc, #180]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 020c 	and.w	r2, r3, #12
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d1eb      	bne.n	8003f7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b27      	ldr	r3, [pc, #156]	; (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0207 	and.w	r2, r3, #7
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d910      	bls.n	8003fd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4924      	ldr	r1, [pc, #144]	; (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb4:	4b23      	ldr	r3, [pc, #140]	; (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f023 0207 	bic.w	r2, r3, #7
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b20      	ldr	r3, [pc, #128]	; (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0207 	and.w	r2, r3, #7
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e032      	b.n	800403a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe0:	4919      	ldr	r1, [pc, #100]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe2:	4b19      	ldr	r3, [pc, #100]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d009      	beq.n	8004012 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ffe:	4912      	ldr	r1, [pc, #72]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8004000:	4b11      	ldr	r3, [pc, #68]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4313      	orrs	r3, r2
 8004010:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004012:	f000 f821 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 8004016:	4601      	mov	r1, r0
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	091b      	lsrs	r3, r3, #4
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	4a0a      	ldr	r2, [pc, #40]	; (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8004024:	5cd3      	ldrb	r3, [r2, r3]
 8004026:	fa21 f303 	lsr.w	r3, r1, r3
 800402a:	4a09      	ldr	r2, [pc, #36]	; (8004050 <HAL_RCC_ClockConfig+0x1cc>)
 800402c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800402e:	4b09      	ldr	r3, [pc, #36]	; (8004054 <HAL_RCC_ClockConfig+0x1d0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe f8fa 	bl	800222c <HAL_InitTick>

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40022000 	.word	0x40022000
 8004048:	40021000 	.word	0x40021000
 800404c:	08007f3c 	.word	0x08007f3c
 8004050:	20000000 	.word	0x20000000
 8004054:	20000004 	.word	0x20000004

08004058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004058:	b490      	push	{r4, r7}
 800405a:	b08a      	sub	sp, #40	; 0x28
 800405c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800405e:	4b2a      	ldr	r3, [pc, #168]	; (8004108 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004060:	1d3c      	adds	r4, r7, #4
 8004062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004064:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004068:	4b28      	ldr	r3, [pc, #160]	; (800410c <HAL_RCC_GetSysClockFreq+0xb4>)
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]
 8004072:	2300      	movs	r3, #0
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	2300      	movs	r3, #0
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004082:	4b23      	ldr	r3, [pc, #140]	; (8004110 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b04      	cmp	r3, #4
 8004090:	d002      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0x40>
 8004092:	2b08      	cmp	r3, #8
 8004094:	d003      	beq.n	800409e <HAL_RCC_GetSysClockFreq+0x46>
 8004096:	e02d      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004098:	4b1e      	ldr	r3, [pc, #120]	; (8004114 <HAL_RCC_GetSysClockFreq+0xbc>)
 800409a:	623b      	str	r3, [r7, #32]
      break;
 800409c:	e02d      	b.n	80040fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	0c9b      	lsrs	r3, r3, #18
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80040aa:	4413      	add	r3, r2
 80040ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80040b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d013      	beq.n	80040e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040bc:	4b14      	ldr	r3, [pc, #80]	; (8004110 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	0c5b      	lsrs	r3, r3, #17
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80040ca:	4413      	add	r3, r2
 80040cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80040d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	4a0f      	ldr	r2, [pc, #60]	; (8004114 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040d6:	fb02 f203 	mul.w	r2, r2, r3
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
 80040e2:	e004      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	4a0c      	ldr	r2, [pc, #48]	; (8004118 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040e8:	fb02 f303 	mul.w	r3, r2, r3
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	623b      	str	r3, [r7, #32]
      break;
 80040f2:	e002      	b.n	80040fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040f4:	4b07      	ldr	r3, [pc, #28]	; (8004114 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040f6:	623b      	str	r3, [r7, #32]
      break;
 80040f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040fa:	6a3b      	ldr	r3, [r7, #32]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3728      	adds	r7, #40	; 0x28
 8004100:	46bd      	mov	sp, r7
 8004102:	bc90      	pop	{r4, r7}
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	08007f14 	.word	0x08007f14
 800410c:	08007f24 	.word	0x08007f24
 8004110:	40021000 	.word	0x40021000
 8004114:	007a1200 	.word	0x007a1200
 8004118:	003d0900 	.word	0x003d0900

0800411c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004120:	4b02      	ldr	r3, [pc, #8]	; (800412c <HAL_RCC_GetHCLKFreq+0x10>)
 8004122:	681b      	ldr	r3, [r3, #0]
}
 8004124:	4618      	mov	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr
 800412c:	20000000 	.word	0x20000000

08004130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004134:	f7ff fff2 	bl	800411c <HAL_RCC_GetHCLKFreq>
 8004138:	4601      	mov	r1, r0
 800413a:	4b05      	ldr	r3, [pc, #20]	; (8004150 <HAL_RCC_GetPCLK1Freq+0x20>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	0a1b      	lsrs	r3, r3, #8
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	4a03      	ldr	r2, [pc, #12]	; (8004154 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004146:	5cd3      	ldrb	r3, [r2, r3]
 8004148:	fa21 f303 	lsr.w	r3, r1, r3
}
 800414c:	4618      	mov	r0, r3
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40021000 	.word	0x40021000
 8004154:	08007f4c 	.word	0x08007f4c

08004158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800415c:	f7ff ffde 	bl	800411c <HAL_RCC_GetHCLKFreq>
 8004160:	4601      	mov	r1, r0
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	0adb      	lsrs	r3, r3, #11
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4a03      	ldr	r2, [pc, #12]	; (800417c <HAL_RCC_GetPCLK2Freq+0x24>)
 800416e:	5cd3      	ldrb	r3, [r2, r3]
 8004170:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004174:	4618      	mov	r0, r3
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40021000 	.word	0x40021000
 800417c:	08007f4c 	.word	0x08007f4c

08004180 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004188:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <RCC_Delay+0x34>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <RCC_Delay+0x38>)
 800418e:	fba2 2303 	umull	r2, r3, r2, r3
 8004192:	0a5b      	lsrs	r3, r3, #9
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	fb02 f303 	mul.w	r3, r2, r3
 800419a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800419c:	bf00      	nop
  }
  while (Delay --);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1e5a      	subs	r2, r3, #1
 80041a2:	60fa      	str	r2, [r7, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1f9      	bne.n	800419c <RCC_Delay+0x1c>
}
 80041a8:	bf00      	nop
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20000000 	.word	0x20000000
 80041b8:	10624dd3 	.word	0x10624dd3

080041bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d07d      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80041d8:	2300      	movs	r3, #0
 80041da:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041dc:	4b4f      	ldr	r3, [pc, #316]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10d      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e8:	4a4c      	ldr	r2, [pc, #304]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ea:	4b4c      	ldr	r3, [pc, #304]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f2:	61d3      	str	r3, [r2, #28]
 80041f4:	4b49      	ldr	r3, [pc, #292]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004200:	2301      	movs	r3, #1
 8004202:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004204:	4b46      	ldr	r3, [pc, #280]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420c:	2b00      	cmp	r3, #0
 800420e:	d118      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004210:	4a43      	ldr	r2, [pc, #268]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004212:	4b43      	ldr	r3, [pc, #268]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800421c:	f7fe f848 	bl	80022b0 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004222:	e008      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004224:	f7fe f844 	bl	80022b0 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	; 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e06d      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004236:	4b3a      	ldr	r3, [pc, #232]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004242:	4b36      	ldr	r3, [pc, #216]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800424a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d02e      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	429a      	cmp	r2, r3
 800425e:	d027      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004260:	4b2e      	ldr	r3, [pc, #184]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004268:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800426a:	4b2e      	ldr	r3, [pc, #184]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800426c:	2201      	movs	r2, #1
 800426e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004270:	4b2c      	ldr	r3, [pc, #176]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004276:	4a29      	ldr	r2, [pc, #164]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d014      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004286:	f7fe f813 	bl	80022b0 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428c:	e00a      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800428e:	f7fe f80f 	bl	80022b0 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	f241 3288 	movw	r2, #5000	; 0x1388
 800429c:	4293      	cmp	r3, r2
 800429e:	d901      	bls.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e036      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a4:	4b1d      	ldr	r3, [pc, #116]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0ee      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042b0:	491a      	ldr	r1, [pc, #104]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b2:	4b1a      	ldr	r3, [pc, #104]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4313      	orrs	r3, r2
 80042c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042c2:	7dfb      	ldrb	r3, [r7, #23]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d105      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c8:	4a14      	ldr	r2, [pc, #80]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ca:	4b14      	ldr	r3, [pc, #80]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042e0:	490e      	ldr	r1, [pc, #56]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e2:	4b0e      	ldr	r3, [pc, #56]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0310 	and.w	r3, r3, #16
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d008      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042fe:	4907      	ldr	r1, [pc, #28]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4313      	orrs	r3, r2
 800430e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40021000 	.word	0x40021000
 8004320:	40007000 	.word	0x40007000
 8004324:	42420440 	.word	0x42420440

08004328 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004328:	b590      	push	{r4, r7, lr}
 800432a:	b08d      	sub	sp, #52	; 0x34
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004330:	4b55      	ldr	r3, [pc, #340]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004332:	f107 040c 	add.w	r4, r7, #12
 8004336:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004338:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800433c:	4b53      	ldr	r3, [pc, #332]	; (800448c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
 8004346:	2300      	movs	r3, #0
 8004348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800434a:	2300      	movs	r3, #0
 800434c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
 8004352:	2300      	movs	r3, #0
 8004354:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d07f      	beq.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800435c:	2b10      	cmp	r3, #16
 800435e:	d002      	beq.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004360:	2b01      	cmp	r3, #1
 8004362:	d048      	beq.n	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004364:	e08b      	b.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8004366:	4b4a      	ldr	r3, [pc, #296]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800436c:	4b48      	ldr	r3, [pc, #288]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d07f      	beq.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	0c9b      	lsrs	r3, r3, #18
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004384:	4413      	add	r3, r2
 8004386:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800438a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d018      	beq.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004396:	4b3e      	ldr	r3, [pc, #248]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	0c5b      	lsrs	r3, r3, #17
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80043a4:	4413      	add	r3, r2
 80043a6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00d      	beq.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80043b6:	4a37      	ldr	r2, [pc, #220]	; (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80043be:	6a3a      	ldr	r2, [r7, #32]
 80043c0:	fb02 f303 	mul.w	r3, r2, r3
 80043c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043c6:	e004      	b.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	4a33      	ldr	r2, [pc, #204]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80043cc:	fb02 f303 	mul.w	r3, r2, r3
 80043d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80043d2:	4b2f      	ldr	r3, [pc, #188]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043de:	d102      	bne.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80043e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80043e4:	e048      	b.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80043e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	4a2c      	ldr	r2, [pc, #176]	; (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80043ec:	fba2 2303 	umull	r2, r3, r2, r3
 80043f0:	085b      	lsrs	r3, r3, #1
 80043f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80043f4:	e040      	b.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80043f6:	4b26      	ldr	r3, [pc, #152]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004406:	d108      	bne.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004416:	62bb      	str	r3, [r7, #40]	; 0x28
 8004418:	e01f      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004424:	d109      	bne.n	800443a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8004426:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8004432:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004436:	62bb      	str	r3, [r7, #40]	; 0x28
 8004438:	e00f      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004440:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004444:	d11a      	bne.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004446:	4b12      	ldr	r3, [pc, #72]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d014      	beq.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8004452:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004456:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004458:	e010      	b.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800445a:	e00f      	b.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800445c:	f7ff fe7c 	bl	8004158 <HAL_RCC_GetPCLK2Freq>
 8004460:	4602      	mov	r2, r0
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	0b9b      	lsrs	r3, r3, #14
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	3301      	adds	r3, #1
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	fbb2 f3f3 	udiv	r3, r2, r3
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004476:	e002      	b.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004478:	bf00      	nop
 800447a:	e000      	b.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800447c:	bf00      	nop
    }
  }
  return (frequency);
 800447e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004480:	4618      	mov	r0, r3
 8004482:	3734      	adds	r7, #52	; 0x34
 8004484:	46bd      	mov	sp, r7
 8004486:	bd90      	pop	{r4, r7, pc}
 8004488:	08007f28 	.word	0x08007f28
 800448c:	08007f38 	.word	0x08007f38
 8004490:	40021000 	.word	0x40021000
 8004494:	007a1200 	.word	0x007a1200
 8004498:	003d0900 	.word	0x003d0900
 800449c:	aaaaaaab 	.word	0xaaaaaaab

080044a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e041      	b.n	8004536 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7fd fdf4 	bl	80020b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	4619      	mov	r1, r3
 80044de:	4610      	mov	r0, r2
 80044e0:	f000 fa9e 	bl	8004a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e041      	b.n	80045d4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d106      	bne.n	800456a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f839 	bl	80045dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3304      	adds	r3, #4
 800457a:	4619      	mov	r1, r3
 800457c:	4610      	mov	r0, r2
 800457e:	f000 fa4f 	bl	8004a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr
	...

080045f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d109      	bne.n	8004614 <HAL_TIM_PWM_Start+0x24>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b01      	cmp	r3, #1
 800460a:	bf14      	ite	ne
 800460c:	2301      	movne	r3, #1
 800460e:	2300      	moveq	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	e022      	b.n	800465a <HAL_TIM_PWM_Start+0x6a>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b04      	cmp	r3, #4
 8004618:	d109      	bne.n	800462e <HAL_TIM_PWM_Start+0x3e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b01      	cmp	r3, #1
 8004624:	bf14      	ite	ne
 8004626:	2301      	movne	r3, #1
 8004628:	2300      	moveq	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	e015      	b.n	800465a <HAL_TIM_PWM_Start+0x6a>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b08      	cmp	r3, #8
 8004632:	d109      	bne.n	8004648 <HAL_TIM_PWM_Start+0x58>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b01      	cmp	r3, #1
 800463e:	bf14      	ite	ne
 8004640:	2301      	movne	r3, #1
 8004642:	2300      	moveq	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	e008      	b.n	800465a <HAL_TIM_PWM_Start+0x6a>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b01      	cmp	r3, #1
 8004652:	bf14      	ite	ne
 8004654:	2301      	movne	r3, #1
 8004656:	2300      	moveq	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e05e      	b.n	8004720 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d104      	bne.n	8004672 <HAL_TIM_PWM_Start+0x82>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004670:	e013      	b.n	800469a <HAL_TIM_PWM_Start+0xaa>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b04      	cmp	r3, #4
 8004676:	d104      	bne.n	8004682 <HAL_TIM_PWM_Start+0x92>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004680:	e00b      	b.n	800469a <HAL_TIM_PWM_Start+0xaa>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d104      	bne.n	8004692 <HAL_TIM_PWM_Start+0xa2>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004690:	e003      	b.n	800469a <HAL_TIM_PWM_Start+0xaa>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2202      	movs	r2, #2
 8004696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2201      	movs	r2, #1
 80046a0:	6839      	ldr	r1, [r7, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fc3c 	bl	8004f20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a1e      	ldr	r2, [pc, #120]	; (8004728 <HAL_TIM_PWM_Start+0x138>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d107      	bne.n	80046c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80046bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a18      	ldr	r2, [pc, #96]	; (8004728 <HAL_TIM_PWM_Start+0x138>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00e      	beq.n	80046ea <HAL_TIM_PWM_Start+0xfa>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d4:	d009      	beq.n	80046ea <HAL_TIM_PWM_Start+0xfa>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a14      	ldr	r2, [pc, #80]	; (800472c <HAL_TIM_PWM_Start+0x13c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d004      	beq.n	80046ea <HAL_TIM_PWM_Start+0xfa>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a12      	ldr	r2, [pc, #72]	; (8004730 <HAL_TIM_PWM_Start+0x140>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d111      	bne.n	800470e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2b06      	cmp	r3, #6
 80046fa:	d010      	beq.n	800471e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470c:	e007      	b.n	800471e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	f042 0201 	orr.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40012c00 	.word	0x40012c00
 800472c:	40000400 	.word	0x40000400
 8004730:	40000800 	.word	0x40000800

08004734 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800474a:	2302      	movs	r3, #2
 800474c:	e0ac      	b.n	80048a8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b0c      	cmp	r3, #12
 800475a:	f200 809f 	bhi.w	800489c <HAL_TIM_PWM_ConfigChannel+0x168>
 800475e:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004764:	08004799 	.word	0x08004799
 8004768:	0800489d 	.word	0x0800489d
 800476c:	0800489d 	.word	0x0800489d
 8004770:	0800489d 	.word	0x0800489d
 8004774:	080047d9 	.word	0x080047d9
 8004778:	0800489d 	.word	0x0800489d
 800477c:	0800489d 	.word	0x0800489d
 8004780:	0800489d 	.word	0x0800489d
 8004784:	0800481b 	.word	0x0800481b
 8004788:	0800489d 	.word	0x0800489d
 800478c:	0800489d 	.word	0x0800489d
 8004790:	0800489d 	.word	0x0800489d
 8004794:	0800485b 	.word	0x0800485b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68b9      	ldr	r1, [r7, #8]
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 f9a0 	bl	8004ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	6992      	ldr	r2, [r2, #24]
 80047ae:	f042 0208 	orr.w	r2, r2, #8
 80047b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	6992      	ldr	r2, [r2, #24]
 80047be:	f022 0204 	bic.w	r2, r2, #4
 80047c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	6991      	ldr	r1, [r2, #24]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	6912      	ldr	r2, [r2, #16]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	619a      	str	r2, [r3, #24]
      break;
 80047d6:	e062      	b.n	800489e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68b9      	ldr	r1, [r7, #8]
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 f9e6 	bl	8004bb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	6812      	ldr	r2, [r2, #0]
 80047ec:	6992      	ldr	r2, [r2, #24]
 80047ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	6812      	ldr	r2, [r2, #0]
 80047fc:	6992      	ldr	r2, [r2, #24]
 80047fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	6991      	ldr	r1, [r2, #24]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	6912      	ldr	r2, [r2, #16]
 8004812:	0212      	lsls	r2, r2, #8
 8004814:	430a      	orrs	r2, r1
 8004816:	619a      	str	r2, [r3, #24]
      break;
 8004818:	e041      	b.n	800489e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68b9      	ldr	r1, [r7, #8]
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fa2f 	bl	8004c84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	69d2      	ldr	r2, [r2, #28]
 8004830:	f042 0208 	orr.w	r2, r2, #8
 8004834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	6812      	ldr	r2, [r2, #0]
 800483e:	69d2      	ldr	r2, [r2, #28]
 8004840:	f022 0204 	bic.w	r2, r2, #4
 8004844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	69d1      	ldr	r1, [r2, #28]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	6912      	ldr	r2, [r2, #16]
 8004854:	430a      	orrs	r2, r1
 8004856:	61da      	str	r2, [r3, #28]
      break;
 8004858:	e021      	b.n	800489e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fa79 	bl	8004d58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	69d2      	ldr	r2, [r2, #28]
 8004870:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	6812      	ldr	r2, [r2, #0]
 800487e:	69d2      	ldr	r2, [r2, #28]
 8004880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	6812      	ldr	r2, [r2, #0]
 800488e:	69d1      	ldr	r1, [r2, #28]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	6912      	ldr	r2, [r2, #16]
 8004894:	0212      	lsls	r2, r2, #8
 8004896:	430a      	orrs	r2, r1
 8004898:	61da      	str	r2, [r3, #28]
      break;
 800489a:	e000      	b.n	800489e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800489c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d101      	bne.n	80048c8 <HAL_TIM_ConfigClockSource+0x18>
 80048c4:	2302      	movs	r3, #2
 80048c6:	e0a6      	b.n	8004a16 <HAL_TIM_ConfigClockSource+0x166>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b40      	cmp	r3, #64	; 0x40
 80048fe:	d067      	beq.n	80049d0 <HAL_TIM_ConfigClockSource+0x120>
 8004900:	2b40      	cmp	r3, #64	; 0x40
 8004902:	d80b      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x6c>
 8004904:	2b10      	cmp	r3, #16
 8004906:	d073      	beq.n	80049f0 <HAL_TIM_ConfigClockSource+0x140>
 8004908:	2b10      	cmp	r3, #16
 800490a:	d802      	bhi.n	8004912 <HAL_TIM_ConfigClockSource+0x62>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d06f      	beq.n	80049f0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004910:	e078      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004912:	2b20      	cmp	r3, #32
 8004914:	d06c      	beq.n	80049f0 <HAL_TIM_ConfigClockSource+0x140>
 8004916:	2b30      	cmp	r3, #48	; 0x30
 8004918:	d06a      	beq.n	80049f0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800491a:	e073      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800491c:	2b70      	cmp	r3, #112	; 0x70
 800491e:	d00d      	beq.n	800493c <HAL_TIM_ConfigClockSource+0x8c>
 8004920:	2b70      	cmp	r3, #112	; 0x70
 8004922:	d804      	bhi.n	800492e <HAL_TIM_ConfigClockSource+0x7e>
 8004924:	2b50      	cmp	r3, #80	; 0x50
 8004926:	d033      	beq.n	8004990 <HAL_TIM_ConfigClockSource+0xe0>
 8004928:	2b60      	cmp	r3, #96	; 0x60
 800492a:	d041      	beq.n	80049b0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800492c:	e06a      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800492e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004932:	d066      	beq.n	8004a02 <HAL_TIM_ConfigClockSource+0x152>
 8004934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004938:	d017      	beq.n	800496a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800493a:	e063      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6818      	ldr	r0, [r3, #0]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	6899      	ldr	r1, [r3, #8]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f000 fac9 	bl	8004ee2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800495e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	609a      	str	r2, [r3, #8]
      break;
 8004968:	e04c      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6899      	ldr	r1, [r3, #8]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f000 fab2 	bl	8004ee2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6812      	ldr	r2, [r2, #0]
 8004986:	6892      	ldr	r2, [r2, #8]
 8004988:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800498c:	609a      	str	r2, [r3, #8]
      break;
 800498e:	e039      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6818      	ldr	r0, [r3, #0]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	6859      	ldr	r1, [r3, #4]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	461a      	mov	r2, r3
 800499e:	f000 fa29 	bl	8004df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2150      	movs	r1, #80	; 0x50
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fa80 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 80049ae:	e029      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6818      	ldr	r0, [r3, #0]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	6859      	ldr	r1, [r3, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	461a      	mov	r2, r3
 80049be:	f000 fa47 	bl	8004e50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2160      	movs	r1, #96	; 0x60
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fa70 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 80049ce:	e019      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	461a      	mov	r2, r3
 80049de:	f000 fa09 	bl	8004df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2140      	movs	r1, #64	; 0x40
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fa60 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 80049ee:	e009      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4619      	mov	r1, r3
 80049fa:	4610      	mov	r0, r2
 80049fc:	f000 fa57 	bl	8004eae <TIM_ITRx_SetConfig>
        break;
 8004a00:	e000      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a29      	ldr	r2, [pc, #164]	; (8004ad8 <TIM_Base_SetConfig+0xb8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00b      	beq.n	8004a50 <TIM_Base_SetConfig+0x30>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3e:	d007      	beq.n	8004a50 <TIM_Base_SetConfig+0x30>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a26      	ldr	r2, [pc, #152]	; (8004adc <TIM_Base_SetConfig+0xbc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_Base_SetConfig+0x30>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a25      	ldr	r2, [pc, #148]	; (8004ae0 <TIM_Base_SetConfig+0xc0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d108      	bne.n	8004a62 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <TIM_Base_SetConfig+0xb8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00b      	beq.n	8004a82 <TIM_Base_SetConfig+0x62>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a70:	d007      	beq.n	8004a82 <TIM_Base_SetConfig+0x62>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a19      	ldr	r2, [pc, #100]	; (8004adc <TIM_Base_SetConfig+0xbc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d003      	beq.n	8004a82 <TIM_Base_SetConfig+0x62>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a18      	ldr	r2, [pc, #96]	; (8004ae0 <TIM_Base_SetConfig+0xc0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d108      	bne.n	8004a94 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a07      	ldr	r2, [pc, #28]	; (8004ad8 <TIM_Base_SetConfig+0xb8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d103      	bne.n	8004ac8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	615a      	str	r2, [r3, #20]
}
 8004ace:	bf00      	nop
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc80      	pop	{r7}
 8004ad6:	4770      	bx	lr
 8004ad8:	40012c00 	.word	0x40012c00
 8004adc:	40000400 	.word	0x40000400
 8004ae0:	40000800 	.word	0x40000800

08004ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	f023 0201 	bic.w	r2, r3, #1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0303 	bic.w	r3, r3, #3
 8004b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f023 0302 	bic.w	r3, r3, #2
 8004b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a1c      	ldr	r2, [pc, #112]	; (8004bac <TIM_OC1_SetConfig+0xc8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d10c      	bne.n	8004b5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f023 0308 	bic.w	r3, r3, #8
 8004b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f023 0304 	bic.w	r3, r3, #4
 8004b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a13      	ldr	r2, [pc, #76]	; (8004bac <TIM_OC1_SetConfig+0xc8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d111      	bne.n	8004b86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	621a      	str	r2, [r3, #32]
}
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40012c00 	.word	0x40012c00

08004bb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	f023 0210 	bic.w	r2, r3, #16
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f023 0320 	bic.w	r3, r3, #32
 8004bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a1d      	ldr	r2, [pc, #116]	; (8004c80 <TIM_OC2_SetConfig+0xd0>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d10d      	bne.n	8004c2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a14      	ldr	r2, [pc, #80]	; (8004c80 <TIM_OC2_SetConfig+0xd0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d113      	bne.n	8004c5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	621a      	str	r2, [r3, #32]
}
 8004c76:	bf00      	nop
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr
 8004c80:	40012c00 	.word	0x40012c00

08004c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0303 	bic.w	r3, r3, #3
 8004cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	021b      	lsls	r3, r3, #8
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a1d      	ldr	r2, [pc, #116]	; (8004d54 <TIM_OC3_SetConfig+0xd0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d10d      	bne.n	8004cfe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a14      	ldr	r2, [pc, #80]	; (8004d54 <TIM_OC3_SetConfig+0xd0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d113      	bne.n	8004d2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	621a      	str	r2, [r3, #32]
}
 8004d48:	bf00      	nop
 8004d4a:	371c      	adds	r7, #28
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40012c00 	.word	0x40012c00

08004d58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	031b      	lsls	r3, r3, #12
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a0f      	ldr	r2, [pc, #60]	; (8004df0 <TIM_OC4_SetConfig+0x98>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d109      	bne.n	8004dcc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	019b      	lsls	r3, r3, #6
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	621a      	str	r2, [r3, #32]
}
 8004de6:	bf00      	nop
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr
 8004df0:	40012c00 	.word	0x40012c00

08004df4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	f023 0201 	bic.w	r2, r3, #1
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f023 030a 	bic.w	r3, r3, #10
 8004e30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	621a      	str	r2, [r3, #32]
}
 8004e46:	bf00      	nop
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr

08004e50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	f023 0210 	bic.w	r2, r3, #16
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	031b      	lsls	r3, r3, #12
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	621a      	str	r2, [r3, #32]
}
 8004ea4:	bf00      	nop
 8004ea6:	371c      	adds	r7, #28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr

08004eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f043 0307 	orr.w	r3, r3, #7
 8004ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	609a      	str	r2, [r3, #8]
}
 8004ed8:	bf00      	nop
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bc80      	pop	{r7}
 8004ee0:	4770      	bx	lr

08004ee2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b087      	sub	sp, #28
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	607a      	str	r2, [r7, #4]
 8004eee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004efc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	021a      	lsls	r2, r3, #8
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	609a      	str	r2, [r3, #8]
}
 8004f16:	bf00      	nop
 8004f18:	371c      	adds	r7, #28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr

08004f20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f003 031f 	and.w	r3, r3, #31
 8004f32:	2201      	movs	r2, #1
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a1a      	ldr	r2, [r3, #32]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	43db      	mvns	r3, r3
 8004f42:	401a      	ands	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a1a      	ldr	r2, [r3, #32]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f003 031f 	and.w	r3, r3, #31
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	fa01 f303 	lsl.w	r3, r1, r3
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	621a      	str	r2, [r3, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bc80      	pop	{r7}
 8004f66:	4770      	bx	lr

08004f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e046      	b.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a16      	ldr	r2, [pc, #88]	; (8005018 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00e      	beq.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fcc:	d009      	beq.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a12      	ldr	r2, [pc, #72]	; (800501c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d004      	beq.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a10      	ldr	r2, [pc, #64]	; (8005020 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d10c      	bne.n	8004ffc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fe8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr
 8005018:	40012c00 	.word	0x40012c00
 800501c:	40000400 	.word	0x40000400
 8005020:	40000800 	.word	0x40000800

08005024 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005024:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005026:	e003      	b.n	8005030 <LoopCopyDataInit>

08005028 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005028:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800502a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800502c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800502e:	3104      	adds	r1, #4

08005030 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005030:	480a      	ldr	r0, [pc, #40]	; (800505c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005032:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005034:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005036:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005038:	d3f6      	bcc.n	8005028 <CopyDataInit>
  ldr r2, =_sbss
 800503a:	4a0a      	ldr	r2, [pc, #40]	; (8005064 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800503c:	e002      	b.n	8005044 <LoopFillZerobss>

0800503e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800503e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005040:	f842 3b04 	str.w	r3, [r2], #4

08005044 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005044:	4b08      	ldr	r3, [pc, #32]	; (8005068 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005046:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005048:	d3f9      	bcc.n	800503e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800504a:	f7fd f8d3 	bl	80021f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800504e:	f000 f815 	bl	800507c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005052:	f7fc fca5 	bl	80019a0 <main>
  bx lr
 8005056:	4770      	bx	lr
  ldr r3, =_sidata
 8005058:	080081d0 	.word	0x080081d0
  ldr r0, =_sdata
 800505c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005060:	2000067c 	.word	0x2000067c
  ldr r2, =_sbss
 8005064:	20000680 	.word	0x20000680
  ldr r3, = _ebss
 8005068:	20000870 	.word	0x20000870

0800506c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800506c:	e7fe      	b.n	800506c <ADC1_2_IRQHandler>
	...

08005070 <__errno>:
 8005070:	4b01      	ldr	r3, [pc, #4]	; (8005078 <__errno+0x8>)
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	2000000c 	.word	0x2000000c

0800507c <__libc_init_array>:
 800507c:	b570      	push	{r4, r5, r6, lr}
 800507e:	2500      	movs	r5, #0
 8005080:	4e0c      	ldr	r6, [pc, #48]	; (80050b4 <__libc_init_array+0x38>)
 8005082:	4c0d      	ldr	r4, [pc, #52]	; (80050b8 <__libc_init_array+0x3c>)
 8005084:	1ba4      	subs	r4, r4, r6
 8005086:	10a4      	asrs	r4, r4, #2
 8005088:	42a5      	cmp	r5, r4
 800508a:	d109      	bne.n	80050a0 <__libc_init_array+0x24>
 800508c:	f002 ff1a 	bl	8007ec4 <_init>
 8005090:	2500      	movs	r5, #0
 8005092:	4e0a      	ldr	r6, [pc, #40]	; (80050bc <__libc_init_array+0x40>)
 8005094:	4c0a      	ldr	r4, [pc, #40]	; (80050c0 <__libc_init_array+0x44>)
 8005096:	1ba4      	subs	r4, r4, r6
 8005098:	10a4      	asrs	r4, r4, #2
 800509a:	42a5      	cmp	r5, r4
 800509c:	d105      	bne.n	80050aa <__libc_init_array+0x2e>
 800509e:	bd70      	pop	{r4, r5, r6, pc}
 80050a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050a4:	4798      	blx	r3
 80050a6:	3501      	adds	r5, #1
 80050a8:	e7ee      	b.n	8005088 <__libc_init_array+0xc>
 80050aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050ae:	4798      	blx	r3
 80050b0:	3501      	adds	r5, #1
 80050b2:	e7f2      	b.n	800509a <__libc_init_array+0x1e>
 80050b4:	080081c8 	.word	0x080081c8
 80050b8:	080081c8 	.word	0x080081c8
 80050bc:	080081c8 	.word	0x080081c8
 80050c0:	080081cc 	.word	0x080081cc

080050c4 <memset>:
 80050c4:	4603      	mov	r3, r0
 80050c6:	4402      	add	r2, r0
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d100      	bne.n	80050ce <memset+0xa>
 80050cc:	4770      	bx	lr
 80050ce:	f803 1b01 	strb.w	r1, [r3], #1
 80050d2:	e7f9      	b.n	80050c8 <memset+0x4>

080050d4 <sprintf>:
 80050d4:	b40e      	push	{r1, r2, r3}
 80050d6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80050da:	b500      	push	{lr}
 80050dc:	b09c      	sub	sp, #112	; 0x70
 80050de:	f8ad 1014 	strh.w	r1, [sp, #20]
 80050e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050e6:	9104      	str	r1, [sp, #16]
 80050e8:	9107      	str	r1, [sp, #28]
 80050ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80050ee:	ab1d      	add	r3, sp, #116	; 0x74
 80050f0:	9002      	str	r0, [sp, #8]
 80050f2:	9006      	str	r0, [sp, #24]
 80050f4:	4808      	ldr	r0, [pc, #32]	; (8005118 <sprintf+0x44>)
 80050f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80050fa:	f8ad 1016 	strh.w	r1, [sp, #22]
 80050fe:	6800      	ldr	r0, [r0, #0]
 8005100:	a902      	add	r1, sp, #8
 8005102:	9301      	str	r3, [sp, #4]
 8005104:	f000 f80a 	bl	800511c <_svfprintf_r>
 8005108:	2200      	movs	r2, #0
 800510a:	9b02      	ldr	r3, [sp, #8]
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	b01c      	add	sp, #112	; 0x70
 8005110:	f85d eb04 	ldr.w	lr, [sp], #4
 8005114:	b003      	add	sp, #12
 8005116:	4770      	bx	lr
 8005118:	2000000c 	.word	0x2000000c

0800511c <_svfprintf_r>:
 800511c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005120:	b0bf      	sub	sp, #252	; 0xfc
 8005122:	4689      	mov	r9, r1
 8005124:	4615      	mov	r5, r2
 8005126:	461f      	mov	r7, r3
 8005128:	4682      	mov	sl, r0
 800512a:	f001 fe29 	bl	8006d80 <_localeconv_r>
 800512e:	6803      	ldr	r3, [r0, #0]
 8005130:	4618      	mov	r0, r3
 8005132:	9311      	str	r3, [sp, #68]	; 0x44
 8005134:	f7fb f80c 	bl	8000150 <strlen>
 8005138:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800513c:	900a      	str	r0, [sp, #40]	; 0x28
 800513e:	061b      	lsls	r3, r3, #24
 8005140:	d518      	bpl.n	8005174 <_svfprintf_r+0x58>
 8005142:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005146:	b9ab      	cbnz	r3, 8005174 <_svfprintf_r+0x58>
 8005148:	2140      	movs	r1, #64	; 0x40
 800514a:	4650      	mov	r0, sl
 800514c:	f001 fe2e 	bl	8006dac <_malloc_r>
 8005150:	f8c9 0000 	str.w	r0, [r9]
 8005154:	f8c9 0010 	str.w	r0, [r9, #16]
 8005158:	b948      	cbnz	r0, 800516e <_svfprintf_r+0x52>
 800515a:	230c      	movs	r3, #12
 800515c:	f8ca 3000 	str.w	r3, [sl]
 8005160:	f04f 33ff 	mov.w	r3, #4294967295
 8005164:	930b      	str	r3, [sp, #44]	; 0x2c
 8005166:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005168:	b03f      	add	sp, #252	; 0xfc
 800516a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800516e:	2340      	movs	r3, #64	; 0x40
 8005170:	f8c9 3014 	str.w	r3, [r9, #20]
 8005174:	2300      	movs	r3, #0
 8005176:	ac2e      	add	r4, sp, #184	; 0xb8
 8005178:	9421      	str	r4, [sp, #132]	; 0x84
 800517a:	9323      	str	r3, [sp, #140]	; 0x8c
 800517c:	9322      	str	r3, [sp, #136]	; 0x88
 800517e:	9509      	str	r5, [sp, #36]	; 0x24
 8005180:	9307      	str	r3, [sp, #28]
 8005182:	930d      	str	r3, [sp, #52]	; 0x34
 8005184:	930e      	str	r3, [sp, #56]	; 0x38
 8005186:	9315      	str	r3, [sp, #84]	; 0x54
 8005188:	9314      	str	r3, [sp, #80]	; 0x50
 800518a:	930b      	str	r3, [sp, #44]	; 0x2c
 800518c:	9312      	str	r3, [sp, #72]	; 0x48
 800518e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005190:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005192:	462b      	mov	r3, r5
 8005194:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005198:	b112      	cbz	r2, 80051a0 <_svfprintf_r+0x84>
 800519a:	2a25      	cmp	r2, #37	; 0x25
 800519c:	f040 8083 	bne.w	80052a6 <_svfprintf_r+0x18a>
 80051a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a2:	1aee      	subs	r6, r5, r3
 80051a4:	d00d      	beq.n	80051c2 <_svfprintf_r+0xa6>
 80051a6:	e884 0048 	stmia.w	r4, {r3, r6}
 80051aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051ac:	4433      	add	r3, r6
 80051ae:	9323      	str	r3, [sp, #140]	; 0x8c
 80051b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051b2:	3301      	adds	r3, #1
 80051b4:	2b07      	cmp	r3, #7
 80051b6:	9322      	str	r3, [sp, #136]	; 0x88
 80051b8:	dc77      	bgt.n	80052aa <_svfprintf_r+0x18e>
 80051ba:	3408      	adds	r4, #8
 80051bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051be:	4433      	add	r3, r6
 80051c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80051c2:	782b      	ldrb	r3, [r5, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 8725 	beq.w	8006014 <_svfprintf_r+0xef8>
 80051ca:	2300      	movs	r3, #0
 80051cc:	1c69      	adds	r1, r5, #1
 80051ce:	461a      	mov	r2, r3
 80051d0:	f04f 3bff 	mov.w	fp, #4294967295
 80051d4:	461d      	mov	r5, r3
 80051d6:	200a      	movs	r0, #10
 80051d8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80051dc:	930c      	str	r3, [sp, #48]	; 0x30
 80051de:	1c4e      	adds	r6, r1, #1
 80051e0:	7809      	ldrb	r1, [r1, #0]
 80051e2:	9609      	str	r6, [sp, #36]	; 0x24
 80051e4:	9106      	str	r1, [sp, #24]
 80051e6:	9906      	ldr	r1, [sp, #24]
 80051e8:	3920      	subs	r1, #32
 80051ea:	2958      	cmp	r1, #88	; 0x58
 80051ec:	f200 8414 	bhi.w	8005a18 <_svfprintf_r+0x8fc>
 80051f0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80051f4:	041200a5 	.word	0x041200a5
 80051f8:	00aa0412 	.word	0x00aa0412
 80051fc:	04120412 	.word	0x04120412
 8005200:	04120412 	.word	0x04120412
 8005204:	04120412 	.word	0x04120412
 8005208:	006500ad 	.word	0x006500ad
 800520c:	00b50412 	.word	0x00b50412
 8005210:	041200b8 	.word	0x041200b8
 8005214:	00d800d5 	.word	0x00d800d5
 8005218:	00d800d8 	.word	0x00d800d8
 800521c:	00d800d8 	.word	0x00d800d8
 8005220:	00d800d8 	.word	0x00d800d8
 8005224:	00d800d8 	.word	0x00d800d8
 8005228:	04120412 	.word	0x04120412
 800522c:	04120412 	.word	0x04120412
 8005230:	04120412 	.word	0x04120412
 8005234:	04120412 	.word	0x04120412
 8005238:	04120412 	.word	0x04120412
 800523c:	0122010c 	.word	0x0122010c
 8005240:	01220412 	.word	0x01220412
 8005244:	04120412 	.word	0x04120412
 8005248:	04120412 	.word	0x04120412
 800524c:	041200eb 	.word	0x041200eb
 8005250:	033c0412 	.word	0x033c0412
 8005254:	04120412 	.word	0x04120412
 8005258:	04120412 	.word	0x04120412
 800525c:	03a40412 	.word	0x03a40412
 8005260:	04120412 	.word	0x04120412
 8005264:	04120085 	.word	0x04120085
 8005268:	04120412 	.word	0x04120412
 800526c:	04120412 	.word	0x04120412
 8005270:	04120412 	.word	0x04120412
 8005274:	04120412 	.word	0x04120412
 8005278:	00fe0412 	.word	0x00fe0412
 800527c:	0122006b 	.word	0x0122006b
 8005280:	01220122 	.word	0x01220122
 8005284:	006b00ee 	.word	0x006b00ee
 8005288:	04120412 	.word	0x04120412
 800528c:	041200f1 	.word	0x041200f1
 8005290:	033e031e 	.word	0x033e031e
 8005294:	00f80372 	.word	0x00f80372
 8005298:	03830412 	.word	0x03830412
 800529c:	03a60412 	.word	0x03a60412
 80052a0:	04120412 	.word	0x04120412
 80052a4:	03be      	.short	0x03be
 80052a6:	461d      	mov	r5, r3
 80052a8:	e773      	b.n	8005192 <_svfprintf_r+0x76>
 80052aa:	aa21      	add	r2, sp, #132	; 0x84
 80052ac:	4649      	mov	r1, r9
 80052ae:	4650      	mov	r0, sl
 80052b0:	f002 fa90 	bl	80077d4 <__ssprint_r>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	f040 868e 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 80052ba:	ac2e      	add	r4, sp, #184	; 0xb8
 80052bc:	e77e      	b.n	80051bc <_svfprintf_r+0xa0>
 80052be:	2301      	movs	r3, #1
 80052c0:	222b      	movs	r2, #43	; 0x2b
 80052c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052c4:	e78b      	b.n	80051de <_svfprintf_r+0xc2>
 80052c6:	460f      	mov	r7, r1
 80052c8:	e7fb      	b.n	80052c2 <_svfprintf_r+0x1a6>
 80052ca:	b10b      	cbz	r3, 80052d0 <_svfprintf_r+0x1b4>
 80052cc:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80052d0:	06ae      	lsls	r6, r5, #26
 80052d2:	f140 80a1 	bpl.w	8005418 <_svfprintf_r+0x2fc>
 80052d6:	3707      	adds	r7, #7
 80052d8:	f027 0707 	bic.w	r7, r7, #7
 80052dc:	f107 0308 	add.w	r3, r7, #8
 80052e0:	9308      	str	r3, [sp, #32]
 80052e2:	e9d7 6700 	ldrd	r6, r7, [r7]
 80052e6:	2e00      	cmp	r6, #0
 80052e8:	f177 0300 	sbcs.w	r3, r7, #0
 80052ec:	da05      	bge.n	80052fa <_svfprintf_r+0x1de>
 80052ee:	232d      	movs	r3, #45	; 0x2d
 80052f0:	4276      	negs	r6, r6
 80052f2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80052f6:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80052fa:	2301      	movs	r3, #1
 80052fc:	e2c7      	b.n	800588e <_svfprintf_r+0x772>
 80052fe:	b10b      	cbz	r3, 8005304 <_svfprintf_r+0x1e8>
 8005300:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005304:	4ba0      	ldr	r3, [pc, #640]	; (8005588 <_svfprintf_r+0x46c>)
 8005306:	9315      	str	r3, [sp, #84]	; 0x54
 8005308:	06ab      	lsls	r3, r5, #26
 800530a:	f140 8336 	bpl.w	800597a <_svfprintf_r+0x85e>
 800530e:	3707      	adds	r7, #7
 8005310:	f027 0707 	bic.w	r7, r7, #7
 8005314:	f107 0308 	add.w	r3, r7, #8
 8005318:	9308      	str	r3, [sp, #32]
 800531a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800531e:	07e8      	lsls	r0, r5, #31
 8005320:	d50b      	bpl.n	800533a <_svfprintf_r+0x21e>
 8005322:	ea56 0307 	orrs.w	r3, r6, r7
 8005326:	d008      	beq.n	800533a <_svfprintf_r+0x21e>
 8005328:	2330      	movs	r3, #48	; 0x30
 800532a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800532e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005332:	f045 0502 	orr.w	r5, r5, #2
 8005336:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 800533a:	2302      	movs	r3, #2
 800533c:	e2a4      	b.n	8005888 <_svfprintf_r+0x76c>
 800533e:	2a00      	cmp	r2, #0
 8005340:	d1bf      	bne.n	80052c2 <_svfprintf_r+0x1a6>
 8005342:	2301      	movs	r3, #1
 8005344:	2220      	movs	r2, #32
 8005346:	e7bc      	b.n	80052c2 <_svfprintf_r+0x1a6>
 8005348:	f045 0501 	orr.w	r5, r5, #1
 800534c:	e7b9      	b.n	80052c2 <_svfprintf_r+0x1a6>
 800534e:	683e      	ldr	r6, [r7, #0]
 8005350:	1d39      	adds	r1, r7, #4
 8005352:	2e00      	cmp	r6, #0
 8005354:	960c      	str	r6, [sp, #48]	; 0x30
 8005356:	dab6      	bge.n	80052c6 <_svfprintf_r+0x1aa>
 8005358:	460f      	mov	r7, r1
 800535a:	4276      	negs	r6, r6
 800535c:	960c      	str	r6, [sp, #48]	; 0x30
 800535e:	f045 0504 	orr.w	r5, r5, #4
 8005362:	e7ae      	b.n	80052c2 <_svfprintf_r+0x1a6>
 8005364:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005366:	1c4e      	adds	r6, r1, #1
 8005368:	7809      	ldrb	r1, [r1, #0]
 800536a:	292a      	cmp	r1, #42	; 0x2a
 800536c:	9106      	str	r1, [sp, #24]
 800536e:	d010      	beq.n	8005392 <_svfprintf_r+0x276>
 8005370:	f04f 0b00 	mov.w	fp, #0
 8005374:	9609      	str	r6, [sp, #36]	; 0x24
 8005376:	9906      	ldr	r1, [sp, #24]
 8005378:	3930      	subs	r1, #48	; 0x30
 800537a:	2909      	cmp	r1, #9
 800537c:	f63f af33 	bhi.w	80051e6 <_svfprintf_r+0xca>
 8005380:	fb00 1b0b 	mla	fp, r0, fp, r1
 8005384:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005386:	460e      	mov	r6, r1
 8005388:	f816 1b01 	ldrb.w	r1, [r6], #1
 800538c:	9106      	str	r1, [sp, #24]
 800538e:	9609      	str	r6, [sp, #36]	; 0x24
 8005390:	e7f1      	b.n	8005376 <_svfprintf_r+0x25a>
 8005392:	6839      	ldr	r1, [r7, #0]
 8005394:	9609      	str	r6, [sp, #36]	; 0x24
 8005396:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 800539a:	3704      	adds	r7, #4
 800539c:	e791      	b.n	80052c2 <_svfprintf_r+0x1a6>
 800539e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80053a2:	e78e      	b.n	80052c2 <_svfprintf_r+0x1a6>
 80053a4:	2100      	movs	r1, #0
 80053a6:	910c      	str	r1, [sp, #48]	; 0x30
 80053a8:	9906      	ldr	r1, [sp, #24]
 80053aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80053ac:	3930      	subs	r1, #48	; 0x30
 80053ae:	fb00 1106 	mla	r1, r0, r6, r1
 80053b2:	910c      	str	r1, [sp, #48]	; 0x30
 80053b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053b6:	460e      	mov	r6, r1
 80053b8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80053bc:	9106      	str	r1, [sp, #24]
 80053be:	9906      	ldr	r1, [sp, #24]
 80053c0:	9609      	str	r6, [sp, #36]	; 0x24
 80053c2:	3930      	subs	r1, #48	; 0x30
 80053c4:	2909      	cmp	r1, #9
 80053c6:	d9ef      	bls.n	80053a8 <_svfprintf_r+0x28c>
 80053c8:	e70d      	b.n	80051e6 <_svfprintf_r+0xca>
 80053ca:	f045 0508 	orr.w	r5, r5, #8
 80053ce:	e778      	b.n	80052c2 <_svfprintf_r+0x1a6>
 80053d0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80053d4:	e775      	b.n	80052c2 <_svfprintf_r+0x1a6>
 80053d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053d8:	7809      	ldrb	r1, [r1, #0]
 80053da:	296c      	cmp	r1, #108	; 0x6c
 80053dc:	d105      	bne.n	80053ea <_svfprintf_r+0x2ce>
 80053de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053e0:	3101      	adds	r1, #1
 80053e2:	9109      	str	r1, [sp, #36]	; 0x24
 80053e4:	f045 0520 	orr.w	r5, r5, #32
 80053e8:	e76b      	b.n	80052c2 <_svfprintf_r+0x1a6>
 80053ea:	f045 0510 	orr.w	r5, r5, #16
 80053ee:	e768      	b.n	80052c2 <_svfprintf_r+0x1a6>
 80053f0:	2600      	movs	r6, #0
 80053f2:	1d3b      	adds	r3, r7, #4
 80053f4:	9308      	str	r3, [sp, #32]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 80053fc:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8005400:	f04f 0b01 	mov.w	fp, #1
 8005404:	4637      	mov	r7, r6
 8005406:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 800540a:	e11c      	b.n	8005646 <_svfprintf_r+0x52a>
 800540c:	b10b      	cbz	r3, 8005412 <_svfprintf_r+0x2f6>
 800540e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005412:	f045 0510 	orr.w	r5, r5, #16
 8005416:	e75b      	b.n	80052d0 <_svfprintf_r+0x1b4>
 8005418:	f015 0f10 	tst.w	r5, #16
 800541c:	f107 0304 	add.w	r3, r7, #4
 8005420:	d003      	beq.n	800542a <_svfprintf_r+0x30e>
 8005422:	683e      	ldr	r6, [r7, #0]
 8005424:	9308      	str	r3, [sp, #32]
 8005426:	17f7      	asrs	r7, r6, #31
 8005428:	e75d      	b.n	80052e6 <_svfprintf_r+0x1ca>
 800542a:	683e      	ldr	r6, [r7, #0]
 800542c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005430:	9308      	str	r3, [sp, #32]
 8005432:	bf18      	it	ne
 8005434:	b236      	sxthne	r6, r6
 8005436:	e7f6      	b.n	8005426 <_svfprintf_r+0x30a>
 8005438:	b10b      	cbz	r3, 800543e <_svfprintf_r+0x322>
 800543a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800543e:	3707      	adds	r7, #7
 8005440:	f027 0707 	bic.w	r7, r7, #7
 8005444:	f107 0308 	add.w	r3, r7, #8
 8005448:	9308      	str	r3, [sp, #32]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	f04f 32ff 	mov.w	r2, #4294967295
 8005450:	930d      	str	r3, [sp, #52]	; 0x34
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005456:	930e      	str	r3, [sp, #56]	; 0x38
 8005458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800545a:	4638      	mov	r0, r7
 800545c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8005460:	4631      	mov	r1, r6
 8005462:	4b4a      	ldr	r3, [pc, #296]	; (800558c <_svfprintf_r+0x470>)
 8005464:	f7fb face 	bl	8000a04 <__aeabi_dcmpun>
 8005468:	2800      	cmp	r0, #0
 800546a:	f040 85dc 	bne.w	8006026 <_svfprintf_r+0xf0a>
 800546e:	f04f 32ff 	mov.w	r2, #4294967295
 8005472:	4b46      	ldr	r3, [pc, #280]	; (800558c <_svfprintf_r+0x470>)
 8005474:	4638      	mov	r0, r7
 8005476:	4631      	mov	r1, r6
 8005478:	f7fb faa6 	bl	80009c8 <__aeabi_dcmple>
 800547c:	2800      	cmp	r0, #0
 800547e:	f040 85d2 	bne.w	8006026 <_svfprintf_r+0xf0a>
 8005482:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005484:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005486:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005488:	990e      	ldr	r1, [sp, #56]	; 0x38
 800548a:	f7fb fa93 	bl	80009b4 <__aeabi_dcmplt>
 800548e:	b110      	cbz	r0, 8005496 <_svfprintf_r+0x37a>
 8005490:	232d      	movs	r3, #45	; 0x2d
 8005492:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8005496:	4b3e      	ldr	r3, [pc, #248]	; (8005590 <_svfprintf_r+0x474>)
 8005498:	4a3e      	ldr	r2, [pc, #248]	; (8005594 <_svfprintf_r+0x478>)
 800549a:	9906      	ldr	r1, [sp, #24]
 800549c:	f04f 0b03 	mov.w	fp, #3
 80054a0:	2947      	cmp	r1, #71	; 0x47
 80054a2:	bfcc      	ite	gt
 80054a4:	4690      	movgt	r8, r2
 80054a6:	4698      	movle	r8, r3
 80054a8:	2600      	movs	r6, #0
 80054aa:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80054ae:	4637      	mov	r7, r6
 80054b0:	e0c9      	b.n	8005646 <_svfprintf_r+0x52a>
 80054b2:	f1bb 3fff 	cmp.w	fp, #4294967295
 80054b6:	d026      	beq.n	8005506 <_svfprintf_r+0x3ea>
 80054b8:	9b06      	ldr	r3, [sp, #24]
 80054ba:	f023 0320 	bic.w	r3, r3, #32
 80054be:	2b47      	cmp	r3, #71	; 0x47
 80054c0:	d104      	bne.n	80054cc <_svfprintf_r+0x3b0>
 80054c2:	f1bb 0f00 	cmp.w	fp, #0
 80054c6:	bf08      	it	eq
 80054c8:	f04f 0b01 	moveq.w	fp, #1
 80054cc:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80054d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80054d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054d4:	1e1f      	subs	r7, r3, #0
 80054d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054d8:	bfa8      	it	ge
 80054da:	9710      	strge	r7, [sp, #64]	; 0x40
 80054dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80054de:	bfbd      	ittte	lt
 80054e0:	463b      	movlt	r3, r7
 80054e2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80054e6:	9310      	strlt	r3, [sp, #64]	; 0x40
 80054e8:	2300      	movge	r3, #0
 80054ea:	bfb8      	it	lt
 80054ec:	232d      	movlt	r3, #45	; 0x2d
 80054ee:	9316      	str	r3, [sp, #88]	; 0x58
 80054f0:	9b06      	ldr	r3, [sp, #24]
 80054f2:	f023 0720 	bic.w	r7, r3, #32
 80054f6:	2f46      	cmp	r7, #70	; 0x46
 80054f8:	d008      	beq.n	800550c <_svfprintf_r+0x3f0>
 80054fa:	2f45      	cmp	r7, #69	; 0x45
 80054fc:	d142      	bne.n	8005584 <_svfprintf_r+0x468>
 80054fe:	f10b 0601 	add.w	r6, fp, #1
 8005502:	2302      	movs	r3, #2
 8005504:	e004      	b.n	8005510 <_svfprintf_r+0x3f4>
 8005506:	f04f 0b06 	mov.w	fp, #6
 800550a:	e7df      	b.n	80054cc <_svfprintf_r+0x3b0>
 800550c:	465e      	mov	r6, fp
 800550e:	2303      	movs	r3, #3
 8005510:	aa1f      	add	r2, sp, #124	; 0x7c
 8005512:	9204      	str	r2, [sp, #16]
 8005514:	aa1c      	add	r2, sp, #112	; 0x70
 8005516:	9203      	str	r2, [sp, #12]
 8005518:	aa1b      	add	r2, sp, #108	; 0x6c
 800551a:	9202      	str	r2, [sp, #8]
 800551c:	e88d 0048 	stmia.w	sp, {r3, r6}
 8005520:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005522:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005524:	4650      	mov	r0, sl
 8005526:	f000 fe57 	bl	80061d8 <_dtoa_r>
 800552a:	2f47      	cmp	r7, #71	; 0x47
 800552c:	4680      	mov	r8, r0
 800552e:	d102      	bne.n	8005536 <_svfprintf_r+0x41a>
 8005530:	07e8      	lsls	r0, r5, #31
 8005532:	f140 8585 	bpl.w	8006040 <_svfprintf_r+0xf24>
 8005536:	eb08 0306 	add.w	r3, r8, r6
 800553a:	2f46      	cmp	r7, #70	; 0x46
 800553c:	9307      	str	r3, [sp, #28]
 800553e:	d111      	bne.n	8005564 <_svfprintf_r+0x448>
 8005540:	f898 3000 	ldrb.w	r3, [r8]
 8005544:	2b30      	cmp	r3, #48	; 0x30
 8005546:	d109      	bne.n	800555c <_svfprintf_r+0x440>
 8005548:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800554a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800554c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800554e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005550:	f7fb fa26 	bl	80009a0 <__aeabi_dcmpeq>
 8005554:	b910      	cbnz	r0, 800555c <_svfprintf_r+0x440>
 8005556:	f1c6 0601 	rsb	r6, r6, #1
 800555a:	961b      	str	r6, [sp, #108]	; 0x6c
 800555c:	9a07      	ldr	r2, [sp, #28]
 800555e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005560:	441a      	add	r2, r3
 8005562:	9207      	str	r2, [sp, #28]
 8005564:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005566:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005568:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800556a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800556c:	f7fb fa18 	bl	80009a0 <__aeabi_dcmpeq>
 8005570:	b990      	cbnz	r0, 8005598 <_svfprintf_r+0x47c>
 8005572:	2230      	movs	r2, #48	; 0x30
 8005574:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005576:	9907      	ldr	r1, [sp, #28]
 8005578:	4299      	cmp	r1, r3
 800557a:	d90f      	bls.n	800559c <_svfprintf_r+0x480>
 800557c:	1c59      	adds	r1, r3, #1
 800557e:	911f      	str	r1, [sp, #124]	; 0x7c
 8005580:	701a      	strb	r2, [r3, #0]
 8005582:	e7f7      	b.n	8005574 <_svfprintf_r+0x458>
 8005584:	465e      	mov	r6, fp
 8005586:	e7bc      	b.n	8005502 <_svfprintf_r+0x3e6>
 8005588:	08007f64 	.word	0x08007f64
 800558c:	7fefffff 	.word	0x7fefffff
 8005590:	08007f54 	.word	0x08007f54
 8005594:	08007f58 	.word	0x08007f58
 8005598:	9b07      	ldr	r3, [sp, #28]
 800559a:	931f      	str	r3, [sp, #124]	; 0x7c
 800559c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800559e:	2f47      	cmp	r7, #71	; 0x47
 80055a0:	eba3 0308 	sub.w	r3, r3, r8
 80055a4:	9307      	str	r3, [sp, #28]
 80055a6:	f040 8100 	bne.w	80057aa <_svfprintf_r+0x68e>
 80055aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055ac:	1cd9      	adds	r1, r3, #3
 80055ae:	db02      	blt.n	80055b6 <_svfprintf_r+0x49a>
 80055b0:	459b      	cmp	fp, r3
 80055b2:	f280 8126 	bge.w	8005802 <_svfprintf_r+0x6e6>
 80055b6:	9b06      	ldr	r3, [sp, #24]
 80055b8:	3b02      	subs	r3, #2
 80055ba:	9306      	str	r3, [sp, #24]
 80055bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80055be:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80055c2:	1e53      	subs	r3, r2, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	bfa8      	it	ge
 80055c8:	222b      	movge	r2, #43	; 0x2b
 80055ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80055cc:	bfbc      	itt	lt
 80055ce:	f1c2 0301 	rsblt	r3, r2, #1
 80055d2:	222d      	movlt	r2, #45	; 0x2d
 80055d4:	2b09      	cmp	r3, #9
 80055d6:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 80055da:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 80055de:	f340 8100 	ble.w	80057e2 <_svfprintf_r+0x6c6>
 80055e2:	260a      	movs	r6, #10
 80055e4:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 80055e8:	fb93 f0f6 	sdiv	r0, r3, r6
 80055ec:	fb06 3310 	mls	r3, r6, r0, r3
 80055f0:	2809      	cmp	r0, #9
 80055f2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80055f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80055fa:	f102 31ff 	add.w	r1, r2, #4294967295
 80055fe:	4603      	mov	r3, r0
 8005600:	f300 80e8 	bgt.w	80057d4 <_svfprintf_r+0x6b8>
 8005604:	3330      	adds	r3, #48	; 0x30
 8005606:	f801 3c01 	strb.w	r3, [r1, #-1]
 800560a:	3a02      	subs	r2, #2
 800560c:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8005610:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8005614:	4282      	cmp	r2, r0
 8005616:	4619      	mov	r1, r3
 8005618:	f0c0 80de 	bcc.w	80057d8 <_svfprintf_r+0x6bc>
 800561c:	9a07      	ldr	r2, [sp, #28]
 800561e:	ab1d      	add	r3, sp, #116	; 0x74
 8005620:	1acb      	subs	r3, r1, r3
 8005622:	2a01      	cmp	r2, #1
 8005624:	9314      	str	r3, [sp, #80]	; 0x50
 8005626:	eb03 0b02 	add.w	fp, r3, r2
 800562a:	dc02      	bgt.n	8005632 <_svfprintf_r+0x516>
 800562c:	f015 0701 	ands.w	r7, r5, #1
 8005630:	d002      	beq.n	8005638 <_svfprintf_r+0x51c>
 8005632:	2700      	movs	r7, #0
 8005634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005636:	449b      	add	fp, r3
 8005638:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800563a:	b113      	cbz	r3, 8005642 <_svfprintf_r+0x526>
 800563c:	232d      	movs	r3, #45	; 0x2d
 800563e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8005642:	2600      	movs	r6, #0
 8005644:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8005646:	455e      	cmp	r6, fp
 8005648:	4633      	mov	r3, r6
 800564a:	bfb8      	it	lt
 800564c:	465b      	movlt	r3, fp
 800564e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005650:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8005654:	b113      	cbz	r3, 800565c <_svfprintf_r+0x540>
 8005656:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005658:	3301      	adds	r3, #1
 800565a:	930f      	str	r3, [sp, #60]	; 0x3c
 800565c:	f015 0302 	ands.w	r3, r5, #2
 8005660:	9316      	str	r3, [sp, #88]	; 0x58
 8005662:	bf1e      	ittt	ne
 8005664:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 8005666:	3302      	addne	r3, #2
 8005668:	930f      	strne	r3, [sp, #60]	; 0x3c
 800566a:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800566e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005670:	d118      	bne.n	80056a4 <_svfprintf_r+0x588>
 8005672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005674:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005676:	1a9b      	subs	r3, r3, r2
 8005678:	2b00      	cmp	r3, #0
 800567a:	9310      	str	r3, [sp, #64]	; 0x40
 800567c:	dd12      	ble.n	80056a4 <_svfprintf_r+0x588>
 800567e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005680:	2b10      	cmp	r3, #16
 8005682:	4bab      	ldr	r3, [pc, #684]	; (8005930 <_svfprintf_r+0x814>)
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	f300 81d9 	bgt.w	8005a3c <_svfprintf_r+0x920>
 800568a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800568c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800568e:	6063      	str	r3, [r4, #4]
 8005690:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005692:	4413      	add	r3, r2
 8005694:	9323      	str	r3, [sp, #140]	; 0x8c
 8005696:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005698:	3301      	adds	r3, #1
 800569a:	2b07      	cmp	r3, #7
 800569c:	9322      	str	r3, [sp, #136]	; 0x88
 800569e:	f300 81e6 	bgt.w	8005a6e <_svfprintf_r+0x952>
 80056a2:	3408      	adds	r4, #8
 80056a4:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 80056a8:	b173      	cbz	r3, 80056c8 <_svfprintf_r+0x5ac>
 80056aa:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 80056ae:	6023      	str	r3, [r4, #0]
 80056b0:	2301      	movs	r3, #1
 80056b2:	6063      	str	r3, [r4, #4]
 80056b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056b6:	3301      	adds	r3, #1
 80056b8:	9323      	str	r3, [sp, #140]	; 0x8c
 80056ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056bc:	3301      	adds	r3, #1
 80056be:	2b07      	cmp	r3, #7
 80056c0:	9322      	str	r3, [sp, #136]	; 0x88
 80056c2:	f300 81de 	bgt.w	8005a82 <_svfprintf_r+0x966>
 80056c6:	3408      	adds	r4, #8
 80056c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80056ca:	b16b      	cbz	r3, 80056e8 <_svfprintf_r+0x5cc>
 80056cc:	ab1a      	add	r3, sp, #104	; 0x68
 80056ce:	6023      	str	r3, [r4, #0]
 80056d0:	2302      	movs	r3, #2
 80056d2:	6063      	str	r3, [r4, #4]
 80056d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056d6:	3302      	adds	r3, #2
 80056d8:	9323      	str	r3, [sp, #140]	; 0x8c
 80056da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056dc:	3301      	adds	r3, #1
 80056de:	2b07      	cmp	r3, #7
 80056e0:	9322      	str	r3, [sp, #136]	; 0x88
 80056e2:	f300 81d8 	bgt.w	8005a96 <_svfprintf_r+0x97a>
 80056e6:	3408      	adds	r4, #8
 80056e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056ea:	2b80      	cmp	r3, #128	; 0x80
 80056ec:	d118      	bne.n	8005720 <_svfprintf_r+0x604>
 80056ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	9310      	str	r3, [sp, #64]	; 0x40
 80056f8:	dd12      	ble.n	8005720 <_svfprintf_r+0x604>
 80056fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	4b8d      	ldr	r3, [pc, #564]	; (8005934 <_svfprintf_r+0x818>)
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	f300 81d2 	bgt.w	8005aaa <_svfprintf_r+0x98e>
 8005706:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005708:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800570a:	6063      	str	r3, [r4, #4]
 800570c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800570e:	4413      	add	r3, r2
 8005710:	9323      	str	r3, [sp, #140]	; 0x8c
 8005712:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005714:	3301      	adds	r3, #1
 8005716:	2b07      	cmp	r3, #7
 8005718:	9322      	str	r3, [sp, #136]	; 0x88
 800571a:	f300 81df 	bgt.w	8005adc <_svfprintf_r+0x9c0>
 800571e:	3408      	adds	r4, #8
 8005720:	eba6 060b 	sub.w	r6, r6, fp
 8005724:	2e00      	cmp	r6, #0
 8005726:	dd0f      	ble.n	8005748 <_svfprintf_r+0x62c>
 8005728:	4b82      	ldr	r3, [pc, #520]	; (8005934 <_svfprintf_r+0x818>)
 800572a:	2e10      	cmp	r6, #16
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	f300 81df 	bgt.w	8005af0 <_svfprintf_r+0x9d4>
 8005732:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005734:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8005736:	3301      	adds	r3, #1
 8005738:	6066      	str	r6, [r4, #4]
 800573a:	2b07      	cmp	r3, #7
 800573c:	4406      	add	r6, r0
 800573e:	9623      	str	r6, [sp, #140]	; 0x8c
 8005740:	9322      	str	r3, [sp, #136]	; 0x88
 8005742:	f300 81ec 	bgt.w	8005b1e <_svfprintf_r+0xa02>
 8005746:	3408      	adds	r4, #8
 8005748:	05eb      	lsls	r3, r5, #23
 800574a:	f100 81f2 	bmi.w	8005b32 <_svfprintf_r+0xa16>
 800574e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005750:	e884 0900 	stmia.w	r4, {r8, fp}
 8005754:	445b      	add	r3, fp
 8005756:	9323      	str	r3, [sp, #140]	; 0x8c
 8005758:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800575a:	3301      	adds	r3, #1
 800575c:	2b07      	cmp	r3, #7
 800575e:	9322      	str	r3, [sp, #136]	; 0x88
 8005760:	f340 8419 	ble.w	8005f96 <_svfprintf_r+0xe7a>
 8005764:	aa21      	add	r2, sp, #132	; 0x84
 8005766:	4649      	mov	r1, r9
 8005768:	4650      	mov	r0, sl
 800576a:	f002 f833 	bl	80077d4 <__ssprint_r>
 800576e:	2800      	cmp	r0, #0
 8005770:	f040 8431 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005774:	ac2e      	add	r4, sp, #184	; 0xb8
 8005776:	076b      	lsls	r3, r5, #29
 8005778:	f100 8410 	bmi.w	8005f9c <_svfprintf_r+0xe80>
 800577c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800577e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005780:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005782:	428a      	cmp	r2, r1
 8005784:	bfac      	ite	ge
 8005786:	189b      	addge	r3, r3, r2
 8005788:	185b      	addlt	r3, r3, r1
 800578a:	930b      	str	r3, [sp, #44]	; 0x2c
 800578c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800578e:	b13b      	cbz	r3, 80057a0 <_svfprintf_r+0x684>
 8005790:	aa21      	add	r2, sp, #132	; 0x84
 8005792:	4649      	mov	r1, r9
 8005794:	4650      	mov	r0, sl
 8005796:	f002 f81d 	bl	80077d4 <__ssprint_r>
 800579a:	2800      	cmp	r0, #0
 800579c:	f040 841b 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 80057a0:	2300      	movs	r3, #0
 80057a2:	9f08      	ldr	r7, [sp, #32]
 80057a4:	9322      	str	r3, [sp, #136]	; 0x88
 80057a6:	ac2e      	add	r4, sp, #184	; 0xb8
 80057a8:	e4f2      	b.n	8005190 <_svfprintf_r+0x74>
 80057aa:	9b06      	ldr	r3, [sp, #24]
 80057ac:	2b65      	cmp	r3, #101	; 0x65
 80057ae:	f77f af05 	ble.w	80055bc <_svfprintf_r+0x4a0>
 80057b2:	9b06      	ldr	r3, [sp, #24]
 80057b4:	2b66      	cmp	r3, #102	; 0x66
 80057b6:	d124      	bne.n	8005802 <_svfprintf_r+0x6e6>
 80057b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	dd19      	ble.n	80057f2 <_svfprintf_r+0x6d6>
 80057be:	f1bb 0f00 	cmp.w	fp, #0
 80057c2:	d101      	bne.n	80057c8 <_svfprintf_r+0x6ac>
 80057c4:	07ea      	lsls	r2, r5, #31
 80057c6:	d502      	bpl.n	80057ce <_svfprintf_r+0x6b2>
 80057c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057ca:	4413      	add	r3, r2
 80057cc:	445b      	add	r3, fp
 80057ce:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80057d0:	469b      	mov	fp, r3
 80057d2:	e731      	b.n	8005638 <_svfprintf_r+0x51c>
 80057d4:	460a      	mov	r2, r1
 80057d6:	e707      	b.n	80055e8 <_svfprintf_r+0x4cc>
 80057d8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80057dc:	f803 1b01 	strb.w	r1, [r3], #1
 80057e0:	e718      	b.n	8005614 <_svfprintf_r+0x4f8>
 80057e2:	2230      	movs	r2, #48	; 0x30
 80057e4:	4413      	add	r3, r2
 80057e6:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 80057ea:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 80057ee:	a91e      	add	r1, sp, #120	; 0x78
 80057f0:	e714      	b.n	800561c <_svfprintf_r+0x500>
 80057f2:	f1bb 0f00 	cmp.w	fp, #0
 80057f6:	d101      	bne.n	80057fc <_svfprintf_r+0x6e0>
 80057f8:	07eb      	lsls	r3, r5, #31
 80057fa:	d515      	bpl.n	8005828 <_svfprintf_r+0x70c>
 80057fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057fe:	3301      	adds	r3, #1
 8005800:	e7e4      	b.n	80057cc <_svfprintf_r+0x6b0>
 8005802:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005804:	9b07      	ldr	r3, [sp, #28]
 8005806:	429a      	cmp	r2, r3
 8005808:	db06      	blt.n	8005818 <_svfprintf_r+0x6fc>
 800580a:	07ef      	lsls	r7, r5, #31
 800580c:	d50e      	bpl.n	800582c <_svfprintf_r+0x710>
 800580e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005810:	4413      	add	r3, r2
 8005812:	2267      	movs	r2, #103	; 0x67
 8005814:	9206      	str	r2, [sp, #24]
 8005816:	e7da      	b.n	80057ce <_svfprintf_r+0x6b2>
 8005818:	9b07      	ldr	r3, [sp, #28]
 800581a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800581c:	2a00      	cmp	r2, #0
 800581e:	440b      	add	r3, r1
 8005820:	dcf7      	bgt.n	8005812 <_svfprintf_r+0x6f6>
 8005822:	f1c2 0201 	rsb	r2, r2, #1
 8005826:	e7f3      	b.n	8005810 <_svfprintf_r+0x6f4>
 8005828:	2301      	movs	r3, #1
 800582a:	e7d0      	b.n	80057ce <_svfprintf_r+0x6b2>
 800582c:	4613      	mov	r3, r2
 800582e:	e7f0      	b.n	8005812 <_svfprintf_r+0x6f6>
 8005830:	b10b      	cbz	r3, 8005836 <_svfprintf_r+0x71a>
 8005832:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005836:	f015 0f20 	tst.w	r5, #32
 800583a:	f107 0304 	add.w	r3, r7, #4
 800583e:	d008      	beq.n	8005852 <_svfprintf_r+0x736>
 8005840:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	17ce      	asrs	r6, r1, #31
 8005846:	4608      	mov	r0, r1
 8005848:	4631      	mov	r1, r6
 800584a:	e9c2 0100 	strd	r0, r1, [r2]
 800584e:	461f      	mov	r7, r3
 8005850:	e49e      	b.n	8005190 <_svfprintf_r+0x74>
 8005852:	06ee      	lsls	r6, r5, #27
 8005854:	d503      	bpl.n	800585e <_svfprintf_r+0x742>
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800585a:	6011      	str	r1, [r2, #0]
 800585c:	e7f7      	b.n	800584e <_svfprintf_r+0x732>
 800585e:	0668      	lsls	r0, r5, #25
 8005860:	d5f9      	bpl.n	8005856 <_svfprintf_r+0x73a>
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8005868:	8011      	strh	r1, [r2, #0]
 800586a:	e7f0      	b.n	800584e <_svfprintf_r+0x732>
 800586c:	f045 0510 	orr.w	r5, r5, #16
 8005870:	f015 0320 	ands.w	r3, r5, #32
 8005874:	d022      	beq.n	80058bc <_svfprintf_r+0x7a0>
 8005876:	3707      	adds	r7, #7
 8005878:	f027 0707 	bic.w	r7, r7, #7
 800587c:	f107 0308 	add.w	r3, r7, #8
 8005880:	9308      	str	r3, [sp, #32]
 8005882:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005886:	2300      	movs	r3, #0
 8005888:	2200      	movs	r2, #0
 800588a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800588e:	f1bb 3fff 	cmp.w	fp, #4294967295
 8005892:	f000 83db 	beq.w	800604c <_svfprintf_r+0xf30>
 8005896:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800589a:	920f      	str	r2, [sp, #60]	; 0x3c
 800589c:	ea56 0207 	orrs.w	r2, r6, r7
 80058a0:	f040 83d9 	bne.w	8006056 <_svfprintf_r+0xf3a>
 80058a4:	f1bb 0f00 	cmp.w	fp, #0
 80058a8:	f000 80aa 	beq.w	8005a00 <_svfprintf_r+0x8e4>
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d076      	beq.n	800599e <_svfprintf_r+0x882>
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	f000 8091 	beq.w	80059d8 <_svfprintf_r+0x8bc>
 80058b6:	2600      	movs	r6, #0
 80058b8:	2700      	movs	r7, #0
 80058ba:	e3d2      	b.n	8006062 <_svfprintf_r+0xf46>
 80058bc:	1d3a      	adds	r2, r7, #4
 80058be:	f015 0110 	ands.w	r1, r5, #16
 80058c2:	9208      	str	r2, [sp, #32]
 80058c4:	d002      	beq.n	80058cc <_svfprintf_r+0x7b0>
 80058c6:	683e      	ldr	r6, [r7, #0]
 80058c8:	2700      	movs	r7, #0
 80058ca:	e7dd      	b.n	8005888 <_svfprintf_r+0x76c>
 80058cc:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80058d0:	d0f9      	beq.n	80058c6 <_svfprintf_r+0x7aa>
 80058d2:	883e      	ldrh	r6, [r7, #0]
 80058d4:	2700      	movs	r7, #0
 80058d6:	e7d6      	b.n	8005886 <_svfprintf_r+0x76a>
 80058d8:	1d3b      	adds	r3, r7, #4
 80058da:	9308      	str	r3, [sp, #32]
 80058dc:	2330      	movs	r3, #48	; 0x30
 80058de:	2278      	movs	r2, #120	; 0x78
 80058e0:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80058e4:	4b14      	ldr	r3, [pc, #80]	; (8005938 <_svfprintf_r+0x81c>)
 80058e6:	683e      	ldr	r6, [r7, #0]
 80058e8:	9315      	str	r3, [sp, #84]	; 0x54
 80058ea:	2700      	movs	r7, #0
 80058ec:	f045 0502 	orr.w	r5, r5, #2
 80058f0:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 80058f4:	2302      	movs	r3, #2
 80058f6:	9206      	str	r2, [sp, #24]
 80058f8:	e7c6      	b.n	8005888 <_svfprintf_r+0x76c>
 80058fa:	2600      	movs	r6, #0
 80058fc:	1d3b      	adds	r3, r7, #4
 80058fe:	f1bb 3fff 	cmp.w	fp, #4294967295
 8005902:	9308      	str	r3, [sp, #32]
 8005904:	f8d7 8000 	ldr.w	r8, [r7]
 8005908:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800590c:	d00a      	beq.n	8005924 <_svfprintf_r+0x808>
 800590e:	465a      	mov	r2, fp
 8005910:	4631      	mov	r1, r6
 8005912:	4640      	mov	r0, r8
 8005914:	f001 fc56 	bl	80071c4 <memchr>
 8005918:	2800      	cmp	r0, #0
 800591a:	f000 808d 	beq.w	8005a38 <_svfprintf_r+0x91c>
 800591e:	eba0 0b08 	sub.w	fp, r0, r8
 8005922:	e5c4      	b.n	80054ae <_svfprintf_r+0x392>
 8005924:	4640      	mov	r0, r8
 8005926:	f7fa fc13 	bl	8000150 <strlen>
 800592a:	4683      	mov	fp, r0
 800592c:	e5bf      	b.n	80054ae <_svfprintf_r+0x392>
 800592e:	bf00      	nop
 8005930:	08007f88 	.word	0x08007f88
 8005934:	08007f98 	.word	0x08007f98
 8005938:	08007f75 	.word	0x08007f75
 800593c:	f045 0510 	orr.w	r5, r5, #16
 8005940:	06a9      	lsls	r1, r5, #26
 8005942:	d509      	bpl.n	8005958 <_svfprintf_r+0x83c>
 8005944:	3707      	adds	r7, #7
 8005946:	f027 0707 	bic.w	r7, r7, #7
 800594a:	f107 0308 	add.w	r3, r7, #8
 800594e:	9308      	str	r3, [sp, #32]
 8005950:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005954:	2301      	movs	r3, #1
 8005956:	e797      	b.n	8005888 <_svfprintf_r+0x76c>
 8005958:	1d3b      	adds	r3, r7, #4
 800595a:	f015 0f10 	tst.w	r5, #16
 800595e:	9308      	str	r3, [sp, #32]
 8005960:	d001      	beq.n	8005966 <_svfprintf_r+0x84a>
 8005962:	683e      	ldr	r6, [r7, #0]
 8005964:	e002      	b.n	800596c <_svfprintf_r+0x850>
 8005966:	066a      	lsls	r2, r5, #25
 8005968:	d5fb      	bpl.n	8005962 <_svfprintf_r+0x846>
 800596a:	883e      	ldrh	r6, [r7, #0]
 800596c:	2700      	movs	r7, #0
 800596e:	e7f1      	b.n	8005954 <_svfprintf_r+0x838>
 8005970:	b10b      	cbz	r3, 8005976 <_svfprintf_r+0x85a>
 8005972:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005976:	4ba3      	ldr	r3, [pc, #652]	; (8005c04 <_svfprintf_r+0xae8>)
 8005978:	e4c5      	b.n	8005306 <_svfprintf_r+0x1ea>
 800597a:	1d3b      	adds	r3, r7, #4
 800597c:	f015 0f10 	tst.w	r5, #16
 8005980:	9308      	str	r3, [sp, #32]
 8005982:	d001      	beq.n	8005988 <_svfprintf_r+0x86c>
 8005984:	683e      	ldr	r6, [r7, #0]
 8005986:	e002      	b.n	800598e <_svfprintf_r+0x872>
 8005988:	066e      	lsls	r6, r5, #25
 800598a:	d5fb      	bpl.n	8005984 <_svfprintf_r+0x868>
 800598c:	883e      	ldrh	r6, [r7, #0]
 800598e:	2700      	movs	r7, #0
 8005990:	e4c5      	b.n	800531e <_svfprintf_r+0x202>
 8005992:	4643      	mov	r3, r8
 8005994:	e366      	b.n	8006064 <_svfprintf_r+0xf48>
 8005996:	2f00      	cmp	r7, #0
 8005998:	bf08      	it	eq
 800599a:	2e0a      	cmpeq	r6, #10
 800599c:	d205      	bcs.n	80059aa <_svfprintf_r+0x88e>
 800599e:	3630      	adds	r6, #48	; 0x30
 80059a0:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 80059a4:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80059a8:	e377      	b.n	800609a <_svfprintf_r+0xf7e>
 80059aa:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80059ae:	4630      	mov	r0, r6
 80059b0:	4639      	mov	r1, r7
 80059b2:	220a      	movs	r2, #10
 80059b4:	2300      	movs	r3, #0
 80059b6:	f7fb fae1 	bl	8000f7c <__aeabi_uldivmod>
 80059ba:	3230      	adds	r2, #48	; 0x30
 80059bc:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80059c0:	2300      	movs	r3, #0
 80059c2:	4630      	mov	r0, r6
 80059c4:	4639      	mov	r1, r7
 80059c6:	220a      	movs	r2, #10
 80059c8:	f7fb fad8 	bl	8000f7c <__aeabi_uldivmod>
 80059cc:	4606      	mov	r6, r0
 80059ce:	460f      	mov	r7, r1
 80059d0:	ea56 0307 	orrs.w	r3, r6, r7
 80059d4:	d1eb      	bne.n	80059ae <_svfprintf_r+0x892>
 80059d6:	e360      	b.n	800609a <_svfprintf_r+0xf7e>
 80059d8:	2600      	movs	r6, #0
 80059da:	2700      	movs	r7, #0
 80059dc:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80059e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80059e2:	f006 030f 	and.w	r3, r6, #15
 80059e6:	5cd3      	ldrb	r3, [r2, r3]
 80059e8:	093a      	lsrs	r2, r7, #4
 80059ea:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80059ee:	0933      	lsrs	r3, r6, #4
 80059f0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80059f4:	461e      	mov	r6, r3
 80059f6:	4617      	mov	r7, r2
 80059f8:	ea56 0307 	orrs.w	r3, r6, r7
 80059fc:	d1f0      	bne.n	80059e0 <_svfprintf_r+0x8c4>
 80059fe:	e34c      	b.n	800609a <_svfprintf_r+0xf7e>
 8005a00:	b93b      	cbnz	r3, 8005a12 <_svfprintf_r+0x8f6>
 8005a02:	07ea      	lsls	r2, r5, #31
 8005a04:	d505      	bpl.n	8005a12 <_svfprintf_r+0x8f6>
 8005a06:	2330      	movs	r3, #48	; 0x30
 8005a08:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8005a0c:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8005a10:	e343      	b.n	800609a <_svfprintf_r+0xf7e>
 8005a12:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8005a16:	e340      	b.n	800609a <_svfprintf_r+0xf7e>
 8005a18:	b10b      	cbz	r3, 8005a1e <_svfprintf_r+0x902>
 8005a1a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005a1e:	9b06      	ldr	r3, [sp, #24]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 82f7 	beq.w	8006014 <_svfprintf_r+0xef8>
 8005a26:	2600      	movs	r6, #0
 8005a28:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005a2c:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8005a30:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8005a34:	9708      	str	r7, [sp, #32]
 8005a36:	e4e3      	b.n	8005400 <_svfprintf_r+0x2e4>
 8005a38:	4606      	mov	r6, r0
 8005a3a:	e538      	b.n	80054ae <_svfprintf_r+0x392>
 8005a3c:	2310      	movs	r3, #16
 8005a3e:	6063      	str	r3, [r4, #4]
 8005a40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a42:	3310      	adds	r3, #16
 8005a44:	9323      	str	r3, [sp, #140]	; 0x8c
 8005a46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a48:	3301      	adds	r3, #1
 8005a4a:	2b07      	cmp	r3, #7
 8005a4c:	9322      	str	r3, [sp, #136]	; 0x88
 8005a4e:	dc04      	bgt.n	8005a5a <_svfprintf_r+0x93e>
 8005a50:	3408      	adds	r4, #8
 8005a52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a54:	3b10      	subs	r3, #16
 8005a56:	9310      	str	r3, [sp, #64]	; 0x40
 8005a58:	e611      	b.n	800567e <_svfprintf_r+0x562>
 8005a5a:	aa21      	add	r2, sp, #132	; 0x84
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	4650      	mov	r0, sl
 8005a60:	f001 feb8 	bl	80077d4 <__ssprint_r>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	f040 82b6 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005a6a:	ac2e      	add	r4, sp, #184	; 0xb8
 8005a6c:	e7f1      	b.n	8005a52 <_svfprintf_r+0x936>
 8005a6e:	aa21      	add	r2, sp, #132	; 0x84
 8005a70:	4649      	mov	r1, r9
 8005a72:	4650      	mov	r0, sl
 8005a74:	f001 feae 	bl	80077d4 <__ssprint_r>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	f040 82ac 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005a7e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005a80:	e610      	b.n	80056a4 <_svfprintf_r+0x588>
 8005a82:	aa21      	add	r2, sp, #132	; 0x84
 8005a84:	4649      	mov	r1, r9
 8005a86:	4650      	mov	r0, sl
 8005a88:	f001 fea4 	bl	80077d4 <__ssprint_r>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	f040 82a2 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005a92:	ac2e      	add	r4, sp, #184	; 0xb8
 8005a94:	e618      	b.n	80056c8 <_svfprintf_r+0x5ac>
 8005a96:	aa21      	add	r2, sp, #132	; 0x84
 8005a98:	4649      	mov	r1, r9
 8005a9a:	4650      	mov	r0, sl
 8005a9c:	f001 fe9a 	bl	80077d4 <__ssprint_r>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	f040 8298 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005aa6:	ac2e      	add	r4, sp, #184	; 0xb8
 8005aa8:	e61e      	b.n	80056e8 <_svfprintf_r+0x5cc>
 8005aaa:	2310      	movs	r3, #16
 8005aac:	6063      	str	r3, [r4, #4]
 8005aae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ab0:	3310      	adds	r3, #16
 8005ab2:	9323      	str	r3, [sp, #140]	; 0x8c
 8005ab4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	2b07      	cmp	r3, #7
 8005aba:	9322      	str	r3, [sp, #136]	; 0x88
 8005abc:	dc04      	bgt.n	8005ac8 <_svfprintf_r+0x9ac>
 8005abe:	3408      	adds	r4, #8
 8005ac0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ac2:	3b10      	subs	r3, #16
 8005ac4:	9310      	str	r3, [sp, #64]	; 0x40
 8005ac6:	e618      	b.n	80056fa <_svfprintf_r+0x5de>
 8005ac8:	aa21      	add	r2, sp, #132	; 0x84
 8005aca:	4649      	mov	r1, r9
 8005acc:	4650      	mov	r0, sl
 8005ace:	f001 fe81 	bl	80077d4 <__ssprint_r>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	f040 827f 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005ad8:	ac2e      	add	r4, sp, #184	; 0xb8
 8005ada:	e7f1      	b.n	8005ac0 <_svfprintf_r+0x9a4>
 8005adc:	aa21      	add	r2, sp, #132	; 0x84
 8005ade:	4649      	mov	r1, r9
 8005ae0:	4650      	mov	r0, sl
 8005ae2:	f001 fe77 	bl	80077d4 <__ssprint_r>
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	f040 8275 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005aec:	ac2e      	add	r4, sp, #184	; 0xb8
 8005aee:	e617      	b.n	8005720 <_svfprintf_r+0x604>
 8005af0:	2310      	movs	r3, #16
 8005af2:	6063      	str	r3, [r4, #4]
 8005af4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005af6:	3310      	adds	r3, #16
 8005af8:	9323      	str	r3, [sp, #140]	; 0x8c
 8005afa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005afc:	3301      	adds	r3, #1
 8005afe:	2b07      	cmp	r3, #7
 8005b00:	9322      	str	r3, [sp, #136]	; 0x88
 8005b02:	dc02      	bgt.n	8005b0a <_svfprintf_r+0x9ee>
 8005b04:	3408      	adds	r4, #8
 8005b06:	3e10      	subs	r6, #16
 8005b08:	e60e      	b.n	8005728 <_svfprintf_r+0x60c>
 8005b0a:	aa21      	add	r2, sp, #132	; 0x84
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	4650      	mov	r0, sl
 8005b10:	f001 fe60 	bl	80077d4 <__ssprint_r>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	f040 825e 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005b1a:	ac2e      	add	r4, sp, #184	; 0xb8
 8005b1c:	e7f3      	b.n	8005b06 <_svfprintf_r+0x9ea>
 8005b1e:	aa21      	add	r2, sp, #132	; 0x84
 8005b20:	4649      	mov	r1, r9
 8005b22:	4650      	mov	r0, sl
 8005b24:	f001 fe56 	bl	80077d4 <__ssprint_r>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	f040 8254 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005b2e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005b30:	e60a      	b.n	8005748 <_svfprintf_r+0x62c>
 8005b32:	9b06      	ldr	r3, [sp, #24]
 8005b34:	2b65      	cmp	r3, #101	; 0x65
 8005b36:	f340 81a9 	ble.w	8005e8c <_svfprintf_r+0xd70>
 8005b3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b3e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005b40:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005b42:	f7fa ff2d 	bl	80009a0 <__aeabi_dcmpeq>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	d062      	beq.n	8005c10 <_svfprintf_r+0xaf4>
 8005b4a:	4b2f      	ldr	r3, [pc, #188]	; (8005c08 <_svfprintf_r+0xaec>)
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	2301      	movs	r3, #1
 8005b50:	6063      	str	r3, [r4, #4]
 8005b52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b54:	3301      	adds	r3, #1
 8005b56:	9323      	str	r3, [sp, #140]	; 0x8c
 8005b58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	2b07      	cmp	r3, #7
 8005b5e:	9322      	str	r3, [sp, #136]	; 0x88
 8005b60:	dc25      	bgt.n	8005bae <_svfprintf_r+0xa92>
 8005b62:	3408      	adds	r4, #8
 8005b64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b66:	9a07      	ldr	r2, [sp, #28]
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	db02      	blt.n	8005b72 <_svfprintf_r+0xa56>
 8005b6c:	07ee      	lsls	r6, r5, #31
 8005b6e:	f57f ae02 	bpl.w	8005776 <_svfprintf_r+0x65a>
 8005b72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b76:	6023      	str	r3, [r4, #0]
 8005b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b7a:	6063      	str	r3, [r4, #4]
 8005b7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b7e:	4413      	add	r3, r2
 8005b80:	9323      	str	r3, [sp, #140]	; 0x8c
 8005b82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b84:	3301      	adds	r3, #1
 8005b86:	2b07      	cmp	r3, #7
 8005b88:	9322      	str	r3, [sp, #136]	; 0x88
 8005b8a:	dc1a      	bgt.n	8005bc2 <_svfprintf_r+0xaa6>
 8005b8c:	3408      	adds	r4, #8
 8005b8e:	9b07      	ldr	r3, [sp, #28]
 8005b90:	1e5e      	subs	r6, r3, #1
 8005b92:	2e00      	cmp	r6, #0
 8005b94:	f77f adef 	ble.w	8005776 <_svfprintf_r+0x65a>
 8005b98:	f04f 0810 	mov.w	r8, #16
 8005b9c:	4f1b      	ldr	r7, [pc, #108]	; (8005c0c <_svfprintf_r+0xaf0>)
 8005b9e:	2e10      	cmp	r6, #16
 8005ba0:	6027      	str	r7, [r4, #0]
 8005ba2:	dc18      	bgt.n	8005bd6 <_svfprintf_r+0xaba>
 8005ba4:	6066      	str	r6, [r4, #4]
 8005ba6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ba8:	441e      	add	r6, r3
 8005baa:	9623      	str	r6, [sp, #140]	; 0x8c
 8005bac:	e5d4      	b.n	8005758 <_svfprintf_r+0x63c>
 8005bae:	aa21      	add	r2, sp, #132	; 0x84
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	4650      	mov	r0, sl
 8005bb4:	f001 fe0e 	bl	80077d4 <__ssprint_r>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	f040 820c 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005bbe:	ac2e      	add	r4, sp, #184	; 0xb8
 8005bc0:	e7d0      	b.n	8005b64 <_svfprintf_r+0xa48>
 8005bc2:	aa21      	add	r2, sp, #132	; 0x84
 8005bc4:	4649      	mov	r1, r9
 8005bc6:	4650      	mov	r0, sl
 8005bc8:	f001 fe04 	bl	80077d4 <__ssprint_r>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	f040 8202 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005bd2:	ac2e      	add	r4, sp, #184	; 0xb8
 8005bd4:	e7db      	b.n	8005b8e <_svfprintf_r+0xa72>
 8005bd6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bd8:	f8c4 8004 	str.w	r8, [r4, #4]
 8005bdc:	3310      	adds	r3, #16
 8005bde:	9323      	str	r3, [sp, #140]	; 0x8c
 8005be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005be2:	3301      	adds	r3, #1
 8005be4:	2b07      	cmp	r3, #7
 8005be6:	9322      	str	r3, [sp, #136]	; 0x88
 8005be8:	dc02      	bgt.n	8005bf0 <_svfprintf_r+0xad4>
 8005bea:	3408      	adds	r4, #8
 8005bec:	3e10      	subs	r6, #16
 8005bee:	e7d6      	b.n	8005b9e <_svfprintf_r+0xa82>
 8005bf0:	aa21      	add	r2, sp, #132	; 0x84
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	4650      	mov	r0, sl
 8005bf6:	f001 fded 	bl	80077d4 <__ssprint_r>
 8005bfa:	2800      	cmp	r0, #0
 8005bfc:	f040 81eb 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005c00:	ac2e      	add	r4, sp, #184	; 0xb8
 8005c02:	e7f3      	b.n	8005bec <_svfprintf_r+0xad0>
 8005c04:	08007f75 	.word	0x08007f75
 8005c08:	08007f86 	.word	0x08007f86
 8005c0c:	08007f98 	.word	0x08007f98
 8005c10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	dc7a      	bgt.n	8005d0c <_svfprintf_r+0xbf0>
 8005c16:	4b9b      	ldr	r3, [pc, #620]	; (8005e84 <_svfprintf_r+0xd68>)
 8005c18:	6023      	str	r3, [r4, #0]
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	6063      	str	r3, [r4, #4]
 8005c1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c20:	3301      	adds	r3, #1
 8005c22:	9323      	str	r3, [sp, #140]	; 0x8c
 8005c24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c26:	3301      	adds	r3, #1
 8005c28:	2b07      	cmp	r3, #7
 8005c2a:	9322      	str	r3, [sp, #136]	; 0x88
 8005c2c:	dc44      	bgt.n	8005cb8 <_svfprintf_r+0xb9c>
 8005c2e:	3408      	adds	r4, #8
 8005c30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c32:	b923      	cbnz	r3, 8005c3e <_svfprintf_r+0xb22>
 8005c34:	9b07      	ldr	r3, [sp, #28]
 8005c36:	b913      	cbnz	r3, 8005c3e <_svfprintf_r+0xb22>
 8005c38:	07e8      	lsls	r0, r5, #31
 8005c3a:	f57f ad9c 	bpl.w	8005776 <_svfprintf_r+0x65a>
 8005c3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c42:	6023      	str	r3, [r4, #0]
 8005c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c46:	6063      	str	r3, [r4, #4]
 8005c48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c4a:	4413      	add	r3, r2
 8005c4c:	9323      	str	r3, [sp, #140]	; 0x8c
 8005c4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c50:	3301      	adds	r3, #1
 8005c52:	2b07      	cmp	r3, #7
 8005c54:	9322      	str	r3, [sp, #136]	; 0x88
 8005c56:	dc39      	bgt.n	8005ccc <_svfprintf_r+0xbb0>
 8005c58:	f104 0308 	add.w	r3, r4, #8
 8005c5c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005c5e:	2e00      	cmp	r6, #0
 8005c60:	da19      	bge.n	8005c96 <_svfprintf_r+0xb7a>
 8005c62:	2410      	movs	r4, #16
 8005c64:	4f88      	ldr	r7, [pc, #544]	; (8005e88 <_svfprintf_r+0xd6c>)
 8005c66:	4276      	negs	r6, r6
 8005c68:	2e10      	cmp	r6, #16
 8005c6a:	601f      	str	r7, [r3, #0]
 8005c6c:	dc38      	bgt.n	8005ce0 <_svfprintf_r+0xbc4>
 8005c6e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005c70:	605e      	str	r6, [r3, #4]
 8005c72:	4416      	add	r6, r2
 8005c74:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005c76:	9623      	str	r6, [sp, #140]	; 0x8c
 8005c78:	3201      	adds	r2, #1
 8005c7a:	2a07      	cmp	r2, #7
 8005c7c:	f103 0308 	add.w	r3, r3, #8
 8005c80:	9222      	str	r2, [sp, #136]	; 0x88
 8005c82:	dd08      	ble.n	8005c96 <_svfprintf_r+0xb7a>
 8005c84:	aa21      	add	r2, sp, #132	; 0x84
 8005c86:	4649      	mov	r1, r9
 8005c88:	4650      	mov	r0, sl
 8005c8a:	f001 fda3 	bl	80077d4 <__ssprint_r>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	f040 81a1 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005c94:	ab2e      	add	r3, sp, #184	; 0xb8
 8005c96:	9a07      	ldr	r2, [sp, #28]
 8005c98:	9907      	ldr	r1, [sp, #28]
 8005c9a:	605a      	str	r2, [r3, #4]
 8005c9c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005c9e:	f8c3 8000 	str.w	r8, [r3]
 8005ca2:	440a      	add	r2, r1
 8005ca4:	9223      	str	r2, [sp, #140]	; 0x8c
 8005ca6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ca8:	3201      	adds	r2, #1
 8005caa:	2a07      	cmp	r2, #7
 8005cac:	9222      	str	r2, [sp, #136]	; 0x88
 8005cae:	f73f ad59 	bgt.w	8005764 <_svfprintf_r+0x648>
 8005cb2:	f103 0408 	add.w	r4, r3, #8
 8005cb6:	e55e      	b.n	8005776 <_svfprintf_r+0x65a>
 8005cb8:	aa21      	add	r2, sp, #132	; 0x84
 8005cba:	4649      	mov	r1, r9
 8005cbc:	4650      	mov	r0, sl
 8005cbe:	f001 fd89 	bl	80077d4 <__ssprint_r>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	f040 8187 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005cc8:	ac2e      	add	r4, sp, #184	; 0xb8
 8005cca:	e7b1      	b.n	8005c30 <_svfprintf_r+0xb14>
 8005ccc:	aa21      	add	r2, sp, #132	; 0x84
 8005cce:	4649      	mov	r1, r9
 8005cd0:	4650      	mov	r0, sl
 8005cd2:	f001 fd7f 	bl	80077d4 <__ssprint_r>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	f040 817d 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005cdc:	ab2e      	add	r3, sp, #184	; 0xb8
 8005cde:	e7bd      	b.n	8005c5c <_svfprintf_r+0xb40>
 8005ce0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005ce2:	605c      	str	r4, [r3, #4]
 8005ce4:	3210      	adds	r2, #16
 8005ce6:	9223      	str	r2, [sp, #140]	; 0x8c
 8005ce8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005cea:	3201      	adds	r2, #1
 8005cec:	2a07      	cmp	r2, #7
 8005cee:	9222      	str	r2, [sp, #136]	; 0x88
 8005cf0:	dc02      	bgt.n	8005cf8 <_svfprintf_r+0xbdc>
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	3e10      	subs	r6, #16
 8005cf6:	e7b7      	b.n	8005c68 <_svfprintf_r+0xb4c>
 8005cf8:	aa21      	add	r2, sp, #132	; 0x84
 8005cfa:	4649      	mov	r1, r9
 8005cfc:	4650      	mov	r0, sl
 8005cfe:	f001 fd69 	bl	80077d4 <__ssprint_r>
 8005d02:	2800      	cmp	r0, #0
 8005d04:	f040 8167 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005d08:	ab2e      	add	r3, sp, #184	; 0xb8
 8005d0a:	e7f3      	b.n	8005cf4 <_svfprintf_r+0xbd8>
 8005d0c:	9b07      	ldr	r3, [sp, #28]
 8005d0e:	42bb      	cmp	r3, r7
 8005d10:	bfa8      	it	ge
 8005d12:	463b      	movge	r3, r7
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	461e      	mov	r6, r3
 8005d18:	dd0b      	ble.n	8005d32 <_svfprintf_r+0xc16>
 8005d1a:	6063      	str	r3, [r4, #4]
 8005d1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d1e:	f8c4 8000 	str.w	r8, [r4]
 8005d22:	4433      	add	r3, r6
 8005d24:	9323      	str	r3, [sp, #140]	; 0x8c
 8005d26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d28:	3301      	adds	r3, #1
 8005d2a:	2b07      	cmp	r3, #7
 8005d2c:	9322      	str	r3, [sp, #136]	; 0x88
 8005d2e:	dc5f      	bgt.n	8005df0 <_svfprintf_r+0xcd4>
 8005d30:	3408      	adds	r4, #8
 8005d32:	2e00      	cmp	r6, #0
 8005d34:	bfb4      	ite	lt
 8005d36:	463e      	movlt	r6, r7
 8005d38:	1bbe      	subge	r6, r7, r6
 8005d3a:	2e00      	cmp	r6, #0
 8005d3c:	dd0f      	ble.n	8005d5e <_svfprintf_r+0xc42>
 8005d3e:	f8df b148 	ldr.w	fp, [pc, #328]	; 8005e88 <_svfprintf_r+0xd6c>
 8005d42:	2e10      	cmp	r6, #16
 8005d44:	f8c4 b000 	str.w	fp, [r4]
 8005d48:	dc5c      	bgt.n	8005e04 <_svfprintf_r+0xce8>
 8005d4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d4c:	6066      	str	r6, [r4, #4]
 8005d4e:	441e      	add	r6, r3
 8005d50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d52:	9623      	str	r6, [sp, #140]	; 0x8c
 8005d54:	3301      	adds	r3, #1
 8005d56:	2b07      	cmp	r3, #7
 8005d58:	9322      	str	r3, [sp, #136]	; 0x88
 8005d5a:	dc6a      	bgt.n	8005e32 <_svfprintf_r+0xd16>
 8005d5c:	3408      	adds	r4, #8
 8005d5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d60:	9a07      	ldr	r2, [sp, #28]
 8005d62:	4293      	cmp	r3, r2
 8005d64:	db01      	blt.n	8005d6a <_svfprintf_r+0xc4e>
 8005d66:	07e9      	lsls	r1, r5, #31
 8005d68:	d50d      	bpl.n	8005d86 <_svfprintf_r+0xc6a>
 8005d6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d6e:	6023      	str	r3, [r4, #0]
 8005d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d72:	6063      	str	r3, [r4, #4]
 8005d74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d76:	4413      	add	r3, r2
 8005d78:	9323      	str	r3, [sp, #140]	; 0x8c
 8005d7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	2b07      	cmp	r3, #7
 8005d80:	9322      	str	r3, [sp, #136]	; 0x88
 8005d82:	dc60      	bgt.n	8005e46 <_svfprintf_r+0xd2a>
 8005d84:	3408      	adds	r4, #8
 8005d86:	9b07      	ldr	r3, [sp, #28]
 8005d88:	9a07      	ldr	r2, [sp, #28]
 8005d8a:	1bde      	subs	r6, r3, r7
 8005d8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	429e      	cmp	r6, r3
 8005d92:	bfa8      	it	ge
 8005d94:	461e      	movge	r6, r3
 8005d96:	2e00      	cmp	r6, #0
 8005d98:	dd0b      	ble.n	8005db2 <_svfprintf_r+0xc96>
 8005d9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d9c:	4447      	add	r7, r8
 8005d9e:	4433      	add	r3, r6
 8005da0:	9323      	str	r3, [sp, #140]	; 0x8c
 8005da2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005da4:	6027      	str	r7, [r4, #0]
 8005da6:	3301      	adds	r3, #1
 8005da8:	2b07      	cmp	r3, #7
 8005daa:	6066      	str	r6, [r4, #4]
 8005dac:	9322      	str	r3, [sp, #136]	; 0x88
 8005dae:	dc54      	bgt.n	8005e5a <_svfprintf_r+0xd3e>
 8005db0:	3408      	adds	r4, #8
 8005db2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005db4:	9a07      	ldr	r2, [sp, #28]
 8005db6:	2e00      	cmp	r6, #0
 8005db8:	eba2 0303 	sub.w	r3, r2, r3
 8005dbc:	bfb4      	ite	lt
 8005dbe:	461e      	movlt	r6, r3
 8005dc0:	1b9e      	subge	r6, r3, r6
 8005dc2:	2e00      	cmp	r6, #0
 8005dc4:	f77f acd7 	ble.w	8005776 <_svfprintf_r+0x65a>
 8005dc8:	f04f 0810 	mov.w	r8, #16
 8005dcc:	4f2e      	ldr	r7, [pc, #184]	; (8005e88 <_svfprintf_r+0xd6c>)
 8005dce:	2e10      	cmp	r6, #16
 8005dd0:	6027      	str	r7, [r4, #0]
 8005dd2:	f77f aee7 	ble.w	8005ba4 <_svfprintf_r+0xa88>
 8005dd6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005dd8:	f8c4 8004 	str.w	r8, [r4, #4]
 8005ddc:	3310      	adds	r3, #16
 8005dde:	9323      	str	r3, [sp, #140]	; 0x8c
 8005de0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005de2:	3301      	adds	r3, #1
 8005de4:	2b07      	cmp	r3, #7
 8005de6:	9322      	str	r3, [sp, #136]	; 0x88
 8005de8:	dc41      	bgt.n	8005e6e <_svfprintf_r+0xd52>
 8005dea:	3408      	adds	r4, #8
 8005dec:	3e10      	subs	r6, #16
 8005dee:	e7ee      	b.n	8005dce <_svfprintf_r+0xcb2>
 8005df0:	aa21      	add	r2, sp, #132	; 0x84
 8005df2:	4649      	mov	r1, r9
 8005df4:	4650      	mov	r0, sl
 8005df6:	f001 fced 	bl	80077d4 <__ssprint_r>
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	f040 80eb 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005e00:	ac2e      	add	r4, sp, #184	; 0xb8
 8005e02:	e796      	b.n	8005d32 <_svfprintf_r+0xc16>
 8005e04:	2310      	movs	r3, #16
 8005e06:	6063      	str	r3, [r4, #4]
 8005e08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e0a:	3310      	adds	r3, #16
 8005e0c:	9323      	str	r3, [sp, #140]	; 0x8c
 8005e0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e10:	3301      	adds	r3, #1
 8005e12:	2b07      	cmp	r3, #7
 8005e14:	9322      	str	r3, [sp, #136]	; 0x88
 8005e16:	dc02      	bgt.n	8005e1e <_svfprintf_r+0xd02>
 8005e18:	3408      	adds	r4, #8
 8005e1a:	3e10      	subs	r6, #16
 8005e1c:	e791      	b.n	8005d42 <_svfprintf_r+0xc26>
 8005e1e:	aa21      	add	r2, sp, #132	; 0x84
 8005e20:	4649      	mov	r1, r9
 8005e22:	4650      	mov	r0, sl
 8005e24:	f001 fcd6 	bl	80077d4 <__ssprint_r>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	f040 80d4 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005e2e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005e30:	e7f3      	b.n	8005e1a <_svfprintf_r+0xcfe>
 8005e32:	aa21      	add	r2, sp, #132	; 0x84
 8005e34:	4649      	mov	r1, r9
 8005e36:	4650      	mov	r0, sl
 8005e38:	f001 fccc 	bl	80077d4 <__ssprint_r>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	f040 80ca 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005e42:	ac2e      	add	r4, sp, #184	; 0xb8
 8005e44:	e78b      	b.n	8005d5e <_svfprintf_r+0xc42>
 8005e46:	aa21      	add	r2, sp, #132	; 0x84
 8005e48:	4649      	mov	r1, r9
 8005e4a:	4650      	mov	r0, sl
 8005e4c:	f001 fcc2 	bl	80077d4 <__ssprint_r>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	f040 80c0 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005e56:	ac2e      	add	r4, sp, #184	; 0xb8
 8005e58:	e795      	b.n	8005d86 <_svfprintf_r+0xc6a>
 8005e5a:	aa21      	add	r2, sp, #132	; 0x84
 8005e5c:	4649      	mov	r1, r9
 8005e5e:	4650      	mov	r0, sl
 8005e60:	f001 fcb8 	bl	80077d4 <__ssprint_r>
 8005e64:	2800      	cmp	r0, #0
 8005e66:	f040 80b6 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005e6a:	ac2e      	add	r4, sp, #184	; 0xb8
 8005e6c:	e7a1      	b.n	8005db2 <_svfprintf_r+0xc96>
 8005e6e:	aa21      	add	r2, sp, #132	; 0x84
 8005e70:	4649      	mov	r1, r9
 8005e72:	4650      	mov	r0, sl
 8005e74:	f001 fcae 	bl	80077d4 <__ssprint_r>
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	f040 80ac 	bne.w	8005fd6 <_svfprintf_r+0xeba>
 8005e7e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005e80:	e7b4      	b.n	8005dec <_svfprintf_r+0xcd0>
 8005e82:	bf00      	nop
 8005e84:	08007f86 	.word	0x08007f86
 8005e88:	08007f98 	.word	0x08007f98
 8005e8c:	9b07      	ldr	r3, [sp, #28]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	dc01      	bgt.n	8005e96 <_svfprintf_r+0xd7a>
 8005e92:	07ea      	lsls	r2, r5, #31
 8005e94:	d576      	bpl.n	8005f84 <_svfprintf_r+0xe68>
 8005e96:	2301      	movs	r3, #1
 8005e98:	6063      	str	r3, [r4, #4]
 8005e9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e9c:	f8c4 8000 	str.w	r8, [r4]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	9323      	str	r3, [sp, #140]	; 0x8c
 8005ea4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	2b07      	cmp	r3, #7
 8005eaa:	9322      	str	r3, [sp, #136]	; 0x88
 8005eac:	dc36      	bgt.n	8005f1c <_svfprintf_r+0xe00>
 8005eae:	3408      	adds	r4, #8
 8005eb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005eb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005eb4:	6023      	str	r3, [r4, #0]
 8005eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eb8:	6063      	str	r3, [r4, #4]
 8005eba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ebc:	4413      	add	r3, r2
 8005ebe:	9323      	str	r3, [sp, #140]	; 0x8c
 8005ec0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	2b07      	cmp	r3, #7
 8005ec6:	9322      	str	r3, [sp, #136]	; 0x88
 8005ec8:	dc31      	bgt.n	8005f2e <_svfprintf_r+0xe12>
 8005eca:	3408      	adds	r4, #8
 8005ecc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ece:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ed0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005ed2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005ed4:	f7fa fd64 	bl	80009a0 <__aeabi_dcmpeq>
 8005ed8:	9b07      	ldr	r3, [sp, #28]
 8005eda:	1e5e      	subs	r6, r3, #1
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d12f      	bne.n	8005f40 <_svfprintf_r+0xe24>
 8005ee0:	f108 0301 	add.w	r3, r8, #1
 8005ee4:	e884 0048 	stmia.w	r4, {r3, r6}
 8005ee8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005eea:	9a07      	ldr	r2, [sp, #28]
 8005eec:	3b01      	subs	r3, #1
 8005eee:	4413      	add	r3, r2
 8005ef0:	9323      	str	r3, [sp, #140]	; 0x8c
 8005ef2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	2b07      	cmp	r3, #7
 8005ef8:	9322      	str	r3, [sp, #136]	; 0x88
 8005efa:	dd4a      	ble.n	8005f92 <_svfprintf_r+0xe76>
 8005efc:	aa21      	add	r2, sp, #132	; 0x84
 8005efe:	4649      	mov	r1, r9
 8005f00:	4650      	mov	r0, sl
 8005f02:	f001 fc67 	bl	80077d4 <__ssprint_r>
 8005f06:	2800      	cmp	r0, #0
 8005f08:	d165      	bne.n	8005fd6 <_svfprintf_r+0xeba>
 8005f0a:	ac2e      	add	r4, sp, #184	; 0xb8
 8005f0c:	ab1d      	add	r3, sp, #116	; 0x74
 8005f0e:	6023      	str	r3, [r4, #0]
 8005f10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005f14:	6063      	str	r3, [r4, #4]
 8005f16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f18:	4413      	add	r3, r2
 8005f1a:	e41c      	b.n	8005756 <_svfprintf_r+0x63a>
 8005f1c:	aa21      	add	r2, sp, #132	; 0x84
 8005f1e:	4649      	mov	r1, r9
 8005f20:	4650      	mov	r0, sl
 8005f22:	f001 fc57 	bl	80077d4 <__ssprint_r>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d155      	bne.n	8005fd6 <_svfprintf_r+0xeba>
 8005f2a:	ac2e      	add	r4, sp, #184	; 0xb8
 8005f2c:	e7c0      	b.n	8005eb0 <_svfprintf_r+0xd94>
 8005f2e:	aa21      	add	r2, sp, #132	; 0x84
 8005f30:	4649      	mov	r1, r9
 8005f32:	4650      	mov	r0, sl
 8005f34:	f001 fc4e 	bl	80077d4 <__ssprint_r>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d14c      	bne.n	8005fd6 <_svfprintf_r+0xeba>
 8005f3c:	ac2e      	add	r4, sp, #184	; 0xb8
 8005f3e:	e7c5      	b.n	8005ecc <_svfprintf_r+0xdb0>
 8005f40:	2e00      	cmp	r6, #0
 8005f42:	dde3      	ble.n	8005f0c <_svfprintf_r+0xdf0>
 8005f44:	f04f 0810 	mov.w	r8, #16
 8005f48:	4f58      	ldr	r7, [pc, #352]	; (80060ac <_svfprintf_r+0xf90>)
 8005f4a:	2e10      	cmp	r6, #16
 8005f4c:	6027      	str	r7, [r4, #0]
 8005f4e:	dc04      	bgt.n	8005f5a <_svfprintf_r+0xe3e>
 8005f50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f52:	6066      	str	r6, [r4, #4]
 8005f54:	441e      	add	r6, r3
 8005f56:	9623      	str	r6, [sp, #140]	; 0x8c
 8005f58:	e7cb      	b.n	8005ef2 <_svfprintf_r+0xdd6>
 8005f5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f5c:	f8c4 8004 	str.w	r8, [r4, #4]
 8005f60:	3310      	adds	r3, #16
 8005f62:	9323      	str	r3, [sp, #140]	; 0x8c
 8005f64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f66:	3301      	adds	r3, #1
 8005f68:	2b07      	cmp	r3, #7
 8005f6a:	9322      	str	r3, [sp, #136]	; 0x88
 8005f6c:	dc02      	bgt.n	8005f74 <_svfprintf_r+0xe58>
 8005f6e:	3408      	adds	r4, #8
 8005f70:	3e10      	subs	r6, #16
 8005f72:	e7ea      	b.n	8005f4a <_svfprintf_r+0xe2e>
 8005f74:	aa21      	add	r2, sp, #132	; 0x84
 8005f76:	4649      	mov	r1, r9
 8005f78:	4650      	mov	r0, sl
 8005f7a:	f001 fc2b 	bl	80077d4 <__ssprint_r>
 8005f7e:	bb50      	cbnz	r0, 8005fd6 <_svfprintf_r+0xeba>
 8005f80:	ac2e      	add	r4, sp, #184	; 0xb8
 8005f82:	e7f5      	b.n	8005f70 <_svfprintf_r+0xe54>
 8005f84:	2301      	movs	r3, #1
 8005f86:	6063      	str	r3, [r4, #4]
 8005f88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f8a:	f8c4 8000 	str.w	r8, [r4]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	e7ae      	b.n	8005ef0 <_svfprintf_r+0xdd4>
 8005f92:	3408      	adds	r4, #8
 8005f94:	e7ba      	b.n	8005f0c <_svfprintf_r+0xdf0>
 8005f96:	3408      	adds	r4, #8
 8005f98:	f7ff bbed 	b.w	8005776 <_svfprintf_r+0x65a>
 8005f9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005fa0:	1a9d      	subs	r5, r3, r2
 8005fa2:	2d00      	cmp	r5, #0
 8005fa4:	f77f abea 	ble.w	800577c <_svfprintf_r+0x660>
 8005fa8:	2610      	movs	r6, #16
 8005faa:	4b41      	ldr	r3, [pc, #260]	; (80060b0 <_svfprintf_r+0xf94>)
 8005fac:	2d10      	cmp	r5, #16
 8005fae:	6023      	str	r3, [r4, #0]
 8005fb0:	dc1b      	bgt.n	8005fea <_svfprintf_r+0xece>
 8005fb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005fb4:	6065      	str	r5, [r4, #4]
 8005fb6:	441d      	add	r5, r3
 8005fb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fba:	9523      	str	r5, [sp, #140]	; 0x8c
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	2b07      	cmp	r3, #7
 8005fc0:	9322      	str	r3, [sp, #136]	; 0x88
 8005fc2:	f77f abdb 	ble.w	800577c <_svfprintf_r+0x660>
 8005fc6:	aa21      	add	r2, sp, #132	; 0x84
 8005fc8:	4649      	mov	r1, r9
 8005fca:	4650      	mov	r0, sl
 8005fcc:	f001 fc02 	bl	80077d4 <__ssprint_r>
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	f43f abd3 	beq.w	800577c <_svfprintf_r+0x660>
 8005fd6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005fda:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fe0:	bf18      	it	ne
 8005fe2:	f04f 33ff 	movne.w	r3, #4294967295
 8005fe6:	f7ff b8bd 	b.w	8005164 <_svfprintf_r+0x48>
 8005fea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005fec:	6066      	str	r6, [r4, #4]
 8005fee:	3310      	adds	r3, #16
 8005ff0:	9323      	str	r3, [sp, #140]	; 0x8c
 8005ff2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	2b07      	cmp	r3, #7
 8005ff8:	9322      	str	r3, [sp, #136]	; 0x88
 8005ffa:	dc02      	bgt.n	8006002 <_svfprintf_r+0xee6>
 8005ffc:	3408      	adds	r4, #8
 8005ffe:	3d10      	subs	r5, #16
 8006000:	e7d3      	b.n	8005faa <_svfprintf_r+0xe8e>
 8006002:	aa21      	add	r2, sp, #132	; 0x84
 8006004:	4649      	mov	r1, r9
 8006006:	4650      	mov	r0, sl
 8006008:	f001 fbe4 	bl	80077d4 <__ssprint_r>
 800600c:	2800      	cmp	r0, #0
 800600e:	d1e2      	bne.n	8005fd6 <_svfprintf_r+0xeba>
 8006010:	ac2e      	add	r4, sp, #184	; 0xb8
 8006012:	e7f4      	b.n	8005ffe <_svfprintf_r+0xee2>
 8006014:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006016:	2b00      	cmp	r3, #0
 8006018:	d0dd      	beq.n	8005fd6 <_svfprintf_r+0xeba>
 800601a:	aa21      	add	r2, sp, #132	; 0x84
 800601c:	4649      	mov	r1, r9
 800601e:	4650      	mov	r0, sl
 8006020:	f001 fbd8 	bl	80077d4 <__ssprint_r>
 8006024:	e7d7      	b.n	8005fd6 <_svfprintf_r+0xeba>
 8006026:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006028:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800602a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800602c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800602e:	f7fa fce9 	bl	8000a04 <__aeabi_dcmpun>
 8006032:	2800      	cmp	r0, #0
 8006034:	f43f aa3d 	beq.w	80054b2 <_svfprintf_r+0x396>
 8006038:	4b1e      	ldr	r3, [pc, #120]	; (80060b4 <_svfprintf_r+0xf98>)
 800603a:	4a1f      	ldr	r2, [pc, #124]	; (80060b8 <_svfprintf_r+0xf9c>)
 800603c:	f7ff ba2d 	b.w	800549a <_svfprintf_r+0x37e>
 8006040:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006042:	eba3 0308 	sub.w	r3, r3, r8
 8006046:	9307      	str	r3, [sp, #28]
 8006048:	f7ff baaf 	b.w	80055aa <_svfprintf_r+0x48e>
 800604c:	ea56 0207 	orrs.w	r2, r6, r7
 8006050:	950f      	str	r5, [sp, #60]	; 0x3c
 8006052:	f43f ac2b 	beq.w	80058ac <_svfprintf_r+0x790>
 8006056:	2b01      	cmp	r3, #1
 8006058:	f43f ac9d 	beq.w	8005996 <_svfprintf_r+0x87a>
 800605c:	2b02      	cmp	r3, #2
 800605e:	f43f acbd 	beq.w	80059dc <_svfprintf_r+0x8c0>
 8006062:	ab2e      	add	r3, sp, #184	; 0xb8
 8006064:	08f1      	lsrs	r1, r6, #3
 8006066:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800606a:	08f8      	lsrs	r0, r7, #3
 800606c:	f006 0207 	and.w	r2, r6, #7
 8006070:	4607      	mov	r7, r0
 8006072:	460e      	mov	r6, r1
 8006074:	3230      	adds	r2, #48	; 0x30
 8006076:	ea56 0107 	orrs.w	r1, r6, r7
 800607a:	f103 38ff 	add.w	r8, r3, #4294967295
 800607e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8006082:	f47f ac86 	bne.w	8005992 <_svfprintf_r+0x876>
 8006086:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006088:	07c9      	lsls	r1, r1, #31
 800608a:	d506      	bpl.n	800609a <_svfprintf_r+0xf7e>
 800608c:	2a30      	cmp	r2, #48	; 0x30
 800608e:	d004      	beq.n	800609a <_svfprintf_r+0xf7e>
 8006090:	2230      	movs	r2, #48	; 0x30
 8006092:	f808 2c01 	strb.w	r2, [r8, #-1]
 8006096:	f1a3 0802 	sub.w	r8, r3, #2
 800609a:	ab2e      	add	r3, sp, #184	; 0xb8
 800609c:	465e      	mov	r6, fp
 800609e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80060a0:	eba3 0b08 	sub.w	fp, r3, r8
 80060a4:	2700      	movs	r7, #0
 80060a6:	f7ff bace 	b.w	8005646 <_svfprintf_r+0x52a>
 80060aa:	bf00      	nop
 80060ac:	08007f98 	.word	0x08007f98
 80060b0:	08007f88 	.word	0x08007f88
 80060b4:	08007f5c 	.word	0x08007f5c
 80060b8:	08007f60 	.word	0x08007f60

080060bc <quorem>:
 80060bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c0:	6903      	ldr	r3, [r0, #16]
 80060c2:	690c      	ldr	r4, [r1, #16]
 80060c4:	4680      	mov	r8, r0
 80060c6:	429c      	cmp	r4, r3
 80060c8:	f300 8082 	bgt.w	80061d0 <quorem+0x114>
 80060cc:	3c01      	subs	r4, #1
 80060ce:	f101 0714 	add.w	r7, r1, #20
 80060d2:	f100 0614 	add.w	r6, r0, #20
 80060d6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80060da:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80060de:	3501      	adds	r5, #1
 80060e0:	fbb0 f5f5 	udiv	r5, r0, r5
 80060e4:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80060e8:	eb06 030e 	add.w	r3, r6, lr
 80060ec:	eb07 090e 	add.w	r9, r7, lr
 80060f0:	9301      	str	r3, [sp, #4]
 80060f2:	b38d      	cbz	r5, 8006158 <quorem+0x9c>
 80060f4:	f04f 0a00 	mov.w	sl, #0
 80060f8:	4638      	mov	r0, r7
 80060fa:	46b4      	mov	ip, r6
 80060fc:	46d3      	mov	fp, sl
 80060fe:	f850 2b04 	ldr.w	r2, [r0], #4
 8006102:	b293      	uxth	r3, r2
 8006104:	fb05 a303 	mla	r3, r5, r3, sl
 8006108:	0c12      	lsrs	r2, r2, #16
 800610a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800610e:	fb05 a202 	mla	r2, r5, r2, sl
 8006112:	b29b      	uxth	r3, r3
 8006114:	ebab 0303 	sub.w	r3, fp, r3
 8006118:	f8bc b000 	ldrh.w	fp, [ip]
 800611c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006120:	445b      	add	r3, fp
 8006122:	fa1f fb82 	uxth.w	fp, r2
 8006126:	f8dc 2000 	ldr.w	r2, [ip]
 800612a:	4581      	cmp	r9, r0
 800612c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006130:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006134:	b29b      	uxth	r3, r3
 8006136:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800613a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800613e:	f84c 3b04 	str.w	r3, [ip], #4
 8006142:	d2dc      	bcs.n	80060fe <quorem+0x42>
 8006144:	f856 300e 	ldr.w	r3, [r6, lr]
 8006148:	b933      	cbnz	r3, 8006158 <quorem+0x9c>
 800614a:	9b01      	ldr	r3, [sp, #4]
 800614c:	3b04      	subs	r3, #4
 800614e:	429e      	cmp	r6, r3
 8006150:	461a      	mov	r2, r3
 8006152:	d331      	bcc.n	80061b8 <quorem+0xfc>
 8006154:	f8c8 4010 	str.w	r4, [r8, #16]
 8006158:	4640      	mov	r0, r8
 800615a:	f001 fa62 	bl	8007622 <__mcmp>
 800615e:	2800      	cmp	r0, #0
 8006160:	db26      	blt.n	80061b0 <quorem+0xf4>
 8006162:	4630      	mov	r0, r6
 8006164:	f04f 0e00 	mov.w	lr, #0
 8006168:	3501      	adds	r5, #1
 800616a:	f857 1b04 	ldr.w	r1, [r7], #4
 800616e:	f8d0 c000 	ldr.w	ip, [r0]
 8006172:	b28b      	uxth	r3, r1
 8006174:	ebae 0303 	sub.w	r3, lr, r3
 8006178:	fa1f f28c 	uxth.w	r2, ip
 800617c:	4413      	add	r3, r2
 800617e:	0c0a      	lsrs	r2, r1, #16
 8006180:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006184:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006188:	b29b      	uxth	r3, r3
 800618a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800618e:	45b9      	cmp	r9, r7
 8006190:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006194:	f840 3b04 	str.w	r3, [r0], #4
 8006198:	d2e7      	bcs.n	800616a <quorem+0xae>
 800619a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800619e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80061a2:	b92a      	cbnz	r2, 80061b0 <quorem+0xf4>
 80061a4:	3b04      	subs	r3, #4
 80061a6:	429e      	cmp	r6, r3
 80061a8:	461a      	mov	r2, r3
 80061aa:	d30b      	bcc.n	80061c4 <quorem+0x108>
 80061ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80061b0:	4628      	mov	r0, r5
 80061b2:	b003      	add	sp, #12
 80061b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b8:	6812      	ldr	r2, [r2, #0]
 80061ba:	3b04      	subs	r3, #4
 80061bc:	2a00      	cmp	r2, #0
 80061be:	d1c9      	bne.n	8006154 <quorem+0x98>
 80061c0:	3c01      	subs	r4, #1
 80061c2:	e7c4      	b.n	800614e <quorem+0x92>
 80061c4:	6812      	ldr	r2, [r2, #0]
 80061c6:	3b04      	subs	r3, #4
 80061c8:	2a00      	cmp	r2, #0
 80061ca:	d1ef      	bne.n	80061ac <quorem+0xf0>
 80061cc:	3c01      	subs	r4, #1
 80061ce:	e7ea      	b.n	80061a6 <quorem+0xea>
 80061d0:	2000      	movs	r0, #0
 80061d2:	e7ee      	b.n	80061b2 <quorem+0xf6>
 80061d4:	0000      	movs	r0, r0
	...

080061d8 <_dtoa_r>:
 80061d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061dc:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80061de:	b095      	sub	sp, #84	; 0x54
 80061e0:	4604      	mov	r4, r0
 80061e2:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80061e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061e8:	b93e      	cbnz	r6, 80061fa <_dtoa_r+0x22>
 80061ea:	2010      	movs	r0, #16
 80061ec:	f000 fdd6 	bl	8006d9c <malloc>
 80061f0:	6260      	str	r0, [r4, #36]	; 0x24
 80061f2:	6046      	str	r6, [r0, #4]
 80061f4:	6086      	str	r6, [r0, #8]
 80061f6:	6006      	str	r6, [r0, #0]
 80061f8:	60c6      	str	r6, [r0, #12]
 80061fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061fc:	6819      	ldr	r1, [r3, #0]
 80061fe:	b151      	cbz	r1, 8006216 <_dtoa_r+0x3e>
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	2301      	movs	r3, #1
 8006204:	4093      	lsls	r3, r2
 8006206:	604a      	str	r2, [r1, #4]
 8006208:	608b      	str	r3, [r1, #8]
 800620a:	4620      	mov	r0, r4
 800620c:	f001 f834 	bl	8007278 <_Bfree>
 8006210:	2200      	movs	r2, #0
 8006212:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006214:	601a      	str	r2, [r3, #0]
 8006216:	9b03      	ldr	r3, [sp, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	bfb7      	itett	lt
 800621c:	2301      	movlt	r3, #1
 800621e:	2300      	movge	r3, #0
 8006220:	602b      	strlt	r3, [r5, #0]
 8006222:	9b03      	ldrlt	r3, [sp, #12]
 8006224:	bfae      	itee	ge
 8006226:	602b      	strge	r3, [r5, #0]
 8006228:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800622c:	9303      	strlt	r3, [sp, #12]
 800622e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006232:	4bab      	ldr	r3, [pc, #684]	; (80064e0 <_dtoa_r+0x308>)
 8006234:	ea33 0309 	bics.w	r3, r3, r9
 8006238:	d11b      	bne.n	8006272 <_dtoa_r+0x9a>
 800623a:	f242 730f 	movw	r3, #9999	; 0x270f
 800623e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006240:	6013      	str	r3, [r2, #0]
 8006242:	9b02      	ldr	r3, [sp, #8]
 8006244:	b923      	cbnz	r3, 8006250 <_dtoa_r+0x78>
 8006246:	f3c9 0013 	ubfx	r0, r9, #0, #20
 800624a:	2800      	cmp	r0, #0
 800624c:	f000 8583 	beq.w	8006d56 <_dtoa_r+0xb7e>
 8006250:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006252:	b953      	cbnz	r3, 800626a <_dtoa_r+0x92>
 8006254:	4ba3      	ldr	r3, [pc, #652]	; (80064e4 <_dtoa_r+0x30c>)
 8006256:	e021      	b.n	800629c <_dtoa_r+0xc4>
 8006258:	4ba3      	ldr	r3, [pc, #652]	; (80064e8 <_dtoa_r+0x310>)
 800625a:	9306      	str	r3, [sp, #24]
 800625c:	3308      	adds	r3, #8
 800625e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	9806      	ldr	r0, [sp, #24]
 8006264:	b015      	add	sp, #84	; 0x54
 8006266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800626a:	4b9e      	ldr	r3, [pc, #632]	; (80064e4 <_dtoa_r+0x30c>)
 800626c:	9306      	str	r3, [sp, #24]
 800626e:	3303      	adds	r3, #3
 8006270:	e7f5      	b.n	800625e <_dtoa_r+0x86>
 8006272:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006276:	2200      	movs	r2, #0
 8006278:	2300      	movs	r3, #0
 800627a:	4630      	mov	r0, r6
 800627c:	4639      	mov	r1, r7
 800627e:	f7fa fb8f 	bl	80009a0 <__aeabi_dcmpeq>
 8006282:	4680      	mov	r8, r0
 8006284:	b160      	cbz	r0, 80062a0 <_dtoa_r+0xc8>
 8006286:	2301      	movs	r3, #1
 8006288:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 855e 	beq.w	8006d50 <_dtoa_r+0xb78>
 8006294:	4b95      	ldr	r3, [pc, #596]	; (80064ec <_dtoa_r+0x314>)
 8006296:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	3b01      	subs	r3, #1
 800629c:	9306      	str	r3, [sp, #24]
 800629e:	e7e0      	b.n	8006262 <_dtoa_r+0x8a>
 80062a0:	ab12      	add	r3, sp, #72	; 0x48
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	ab13      	add	r3, sp, #76	; 0x4c
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	4632      	mov	r2, r6
 80062aa:	463b      	mov	r3, r7
 80062ac:	4620      	mov	r0, r4
 80062ae:	f001 fa31 	bl	8007714 <__d2b>
 80062b2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80062b6:	4682      	mov	sl, r0
 80062b8:	2d00      	cmp	r5, #0
 80062ba:	d07d      	beq.n	80063b8 <_dtoa_r+0x1e0>
 80062bc:	4630      	mov	r0, r6
 80062be:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80062c2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80062c6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80062ca:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80062ce:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80062d2:	2200      	movs	r2, #0
 80062d4:	4b86      	ldr	r3, [pc, #536]	; (80064f0 <_dtoa_r+0x318>)
 80062d6:	f7f9 ff47 	bl	8000168 <__aeabi_dsub>
 80062da:	a37b      	add	r3, pc, #492	; (adr r3, 80064c8 <_dtoa_r+0x2f0>)
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	f7fa f8f6 	bl	80004d0 <__aeabi_dmul>
 80062e4:	a37a      	add	r3, pc, #488	; (adr r3, 80064d0 <_dtoa_r+0x2f8>)
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	f7f9 ff3f 	bl	800016c <__adddf3>
 80062ee:	4606      	mov	r6, r0
 80062f0:	4628      	mov	r0, r5
 80062f2:	460f      	mov	r7, r1
 80062f4:	f7fa f886 	bl	8000404 <__aeabi_i2d>
 80062f8:	a377      	add	r3, pc, #476	; (adr r3, 80064d8 <_dtoa_r+0x300>)
 80062fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fe:	f7fa f8e7 	bl	80004d0 <__aeabi_dmul>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	4630      	mov	r0, r6
 8006308:	4639      	mov	r1, r7
 800630a:	f7f9 ff2f 	bl	800016c <__adddf3>
 800630e:	4606      	mov	r6, r0
 8006310:	460f      	mov	r7, r1
 8006312:	f7fa fb8d 	bl	8000a30 <__aeabi_d2iz>
 8006316:	2200      	movs	r2, #0
 8006318:	4683      	mov	fp, r0
 800631a:	2300      	movs	r3, #0
 800631c:	4630      	mov	r0, r6
 800631e:	4639      	mov	r1, r7
 8006320:	f7fa fb48 	bl	80009b4 <__aeabi_dcmplt>
 8006324:	b158      	cbz	r0, 800633e <_dtoa_r+0x166>
 8006326:	4658      	mov	r0, fp
 8006328:	f7fa f86c 	bl	8000404 <__aeabi_i2d>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4630      	mov	r0, r6
 8006332:	4639      	mov	r1, r7
 8006334:	f7fa fb34 	bl	80009a0 <__aeabi_dcmpeq>
 8006338:	b908      	cbnz	r0, 800633e <_dtoa_r+0x166>
 800633a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800633e:	f1bb 0f16 	cmp.w	fp, #22
 8006342:	d858      	bhi.n	80063f6 <_dtoa_r+0x21e>
 8006344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006348:	496a      	ldr	r1, [pc, #424]	; (80064f4 <_dtoa_r+0x31c>)
 800634a:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800634e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006352:	f7fa fb4d 	bl	80009f0 <__aeabi_dcmpgt>
 8006356:	2800      	cmp	r0, #0
 8006358:	d04f      	beq.n	80063fa <_dtoa_r+0x222>
 800635a:	2300      	movs	r3, #0
 800635c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006360:	930d      	str	r3, [sp, #52]	; 0x34
 8006362:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006364:	1b5d      	subs	r5, r3, r5
 8006366:	1e6b      	subs	r3, r5, #1
 8006368:	9307      	str	r3, [sp, #28]
 800636a:	bf43      	ittte	mi
 800636c:	2300      	movmi	r3, #0
 800636e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006372:	9307      	strmi	r3, [sp, #28]
 8006374:	f04f 0800 	movpl.w	r8, #0
 8006378:	f1bb 0f00 	cmp.w	fp, #0
 800637c:	db3f      	blt.n	80063fe <_dtoa_r+0x226>
 800637e:	9b07      	ldr	r3, [sp, #28]
 8006380:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8006384:	445b      	add	r3, fp
 8006386:	9307      	str	r3, [sp, #28]
 8006388:	2300      	movs	r3, #0
 800638a:	9308      	str	r3, [sp, #32]
 800638c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800638e:	2b09      	cmp	r3, #9
 8006390:	f200 80b4 	bhi.w	80064fc <_dtoa_r+0x324>
 8006394:	2b05      	cmp	r3, #5
 8006396:	bfc4      	itt	gt
 8006398:	3b04      	subgt	r3, #4
 800639a:	931e      	strgt	r3, [sp, #120]	; 0x78
 800639c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800639e:	bfc8      	it	gt
 80063a0:	2600      	movgt	r6, #0
 80063a2:	f1a3 0302 	sub.w	r3, r3, #2
 80063a6:	bfd8      	it	le
 80063a8:	2601      	movle	r6, #1
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	f200 80b2 	bhi.w	8006514 <_dtoa_r+0x33c>
 80063b0:	e8df f003 	tbb	[pc, r3]
 80063b4:	782d8684 	.word	0x782d8684
 80063b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80063ba:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80063bc:	441d      	add	r5, r3
 80063be:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	dd11      	ble.n	80063ea <_dtoa_r+0x212>
 80063c6:	9a02      	ldr	r2, [sp, #8]
 80063c8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80063cc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80063d0:	fa22 f000 	lsr.w	r0, r2, r0
 80063d4:	fa09 f303 	lsl.w	r3, r9, r3
 80063d8:	4318      	orrs	r0, r3
 80063da:	f7fa f803 	bl	80003e4 <__aeabi_ui2d>
 80063de:	2301      	movs	r3, #1
 80063e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80063e4:	3d01      	subs	r5, #1
 80063e6:	9310      	str	r3, [sp, #64]	; 0x40
 80063e8:	e773      	b.n	80062d2 <_dtoa_r+0xfa>
 80063ea:	f1c3 0020 	rsb	r0, r3, #32
 80063ee:	9b02      	ldr	r3, [sp, #8]
 80063f0:	fa03 f000 	lsl.w	r0, r3, r0
 80063f4:	e7f1      	b.n	80063da <_dtoa_r+0x202>
 80063f6:	2301      	movs	r3, #1
 80063f8:	e7b2      	b.n	8006360 <_dtoa_r+0x188>
 80063fa:	900d      	str	r0, [sp, #52]	; 0x34
 80063fc:	e7b1      	b.n	8006362 <_dtoa_r+0x18a>
 80063fe:	f1cb 0300 	rsb	r3, fp, #0
 8006402:	9308      	str	r3, [sp, #32]
 8006404:	2300      	movs	r3, #0
 8006406:	eba8 080b 	sub.w	r8, r8, fp
 800640a:	930c      	str	r3, [sp, #48]	; 0x30
 800640c:	e7be      	b.n	800638c <_dtoa_r+0x1b4>
 800640e:	2301      	movs	r3, #1
 8006410:	9309      	str	r3, [sp, #36]	; 0x24
 8006412:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006414:	2b00      	cmp	r3, #0
 8006416:	f340 8080 	ble.w	800651a <_dtoa_r+0x342>
 800641a:	4699      	mov	r9, r3
 800641c:	9304      	str	r3, [sp, #16]
 800641e:	2200      	movs	r2, #0
 8006420:	2104      	movs	r1, #4
 8006422:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006424:	606a      	str	r2, [r5, #4]
 8006426:	f101 0214 	add.w	r2, r1, #20
 800642a:	429a      	cmp	r2, r3
 800642c:	d97a      	bls.n	8006524 <_dtoa_r+0x34c>
 800642e:	6869      	ldr	r1, [r5, #4]
 8006430:	4620      	mov	r0, r4
 8006432:	f000 feed 	bl	8007210 <_Balloc>
 8006436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006438:	6028      	str	r0, [r5, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f1b9 0f0e 	cmp.w	r9, #14
 8006440:	9306      	str	r3, [sp, #24]
 8006442:	f200 80f0 	bhi.w	8006626 <_dtoa_r+0x44e>
 8006446:	2e00      	cmp	r6, #0
 8006448:	f000 80ed 	beq.w	8006626 <_dtoa_r+0x44e>
 800644c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006450:	f1bb 0f00 	cmp.w	fp, #0
 8006454:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006458:	dd79      	ble.n	800654e <_dtoa_r+0x376>
 800645a:	4a26      	ldr	r2, [pc, #152]	; (80064f4 <_dtoa_r+0x31c>)
 800645c:	f00b 030f 	and.w	r3, fp, #15
 8006460:	ea4f 162b 	mov.w	r6, fp, asr #4
 8006464:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006468:	06f0      	lsls	r0, r6, #27
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006472:	d55c      	bpl.n	800652e <_dtoa_r+0x356>
 8006474:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006478:	4b1f      	ldr	r3, [pc, #124]	; (80064f8 <_dtoa_r+0x320>)
 800647a:	2503      	movs	r5, #3
 800647c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006480:	f7fa f950 	bl	8000724 <__aeabi_ddiv>
 8006484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006488:	f006 060f 	and.w	r6, r6, #15
 800648c:	4f1a      	ldr	r7, [pc, #104]	; (80064f8 <_dtoa_r+0x320>)
 800648e:	2e00      	cmp	r6, #0
 8006490:	d14f      	bne.n	8006532 <_dtoa_r+0x35a>
 8006492:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800649a:	f7fa f943 	bl	8000724 <__aeabi_ddiv>
 800649e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064a2:	e06e      	b.n	8006582 <_dtoa_r+0x3aa>
 80064a4:	2301      	movs	r3, #1
 80064a6:	9309      	str	r3, [sp, #36]	; 0x24
 80064a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80064aa:	445b      	add	r3, fp
 80064ac:	f103 0901 	add.w	r9, r3, #1
 80064b0:	9304      	str	r3, [sp, #16]
 80064b2:	464b      	mov	r3, r9
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	bfb8      	it	lt
 80064b8:	2301      	movlt	r3, #1
 80064ba:	e7b0      	b.n	800641e <_dtoa_r+0x246>
 80064bc:	2300      	movs	r3, #0
 80064be:	e7a7      	b.n	8006410 <_dtoa_r+0x238>
 80064c0:	2300      	movs	r3, #0
 80064c2:	e7f0      	b.n	80064a6 <_dtoa_r+0x2ce>
 80064c4:	f3af 8000 	nop.w
 80064c8:	636f4361 	.word	0x636f4361
 80064cc:	3fd287a7 	.word	0x3fd287a7
 80064d0:	8b60c8b3 	.word	0x8b60c8b3
 80064d4:	3fc68a28 	.word	0x3fc68a28
 80064d8:	509f79fb 	.word	0x509f79fb
 80064dc:	3fd34413 	.word	0x3fd34413
 80064e0:	7ff00000 	.word	0x7ff00000
 80064e4:	08007fb1 	.word	0x08007fb1
 80064e8:	08007fa8 	.word	0x08007fa8
 80064ec:	08007f87 	.word	0x08007f87
 80064f0:	3ff80000 	.word	0x3ff80000
 80064f4:	08007fe0 	.word	0x08007fe0
 80064f8:	08007fb8 	.word	0x08007fb8
 80064fc:	2601      	movs	r6, #1
 80064fe:	2300      	movs	r3, #0
 8006500:	9609      	str	r6, [sp, #36]	; 0x24
 8006502:	931e      	str	r3, [sp, #120]	; 0x78
 8006504:	f04f 33ff 	mov.w	r3, #4294967295
 8006508:	2200      	movs	r2, #0
 800650a:	9304      	str	r3, [sp, #16]
 800650c:	4699      	mov	r9, r3
 800650e:	2312      	movs	r3, #18
 8006510:	921f      	str	r2, [sp, #124]	; 0x7c
 8006512:	e784      	b.n	800641e <_dtoa_r+0x246>
 8006514:	2301      	movs	r3, #1
 8006516:	9309      	str	r3, [sp, #36]	; 0x24
 8006518:	e7f4      	b.n	8006504 <_dtoa_r+0x32c>
 800651a:	2301      	movs	r3, #1
 800651c:	9304      	str	r3, [sp, #16]
 800651e:	4699      	mov	r9, r3
 8006520:	461a      	mov	r2, r3
 8006522:	e7f5      	b.n	8006510 <_dtoa_r+0x338>
 8006524:	686a      	ldr	r2, [r5, #4]
 8006526:	0049      	lsls	r1, r1, #1
 8006528:	3201      	adds	r2, #1
 800652a:	606a      	str	r2, [r5, #4]
 800652c:	e77b      	b.n	8006426 <_dtoa_r+0x24e>
 800652e:	2502      	movs	r5, #2
 8006530:	e7ac      	b.n	800648c <_dtoa_r+0x2b4>
 8006532:	07f1      	lsls	r1, r6, #31
 8006534:	d508      	bpl.n	8006548 <_dtoa_r+0x370>
 8006536:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800653a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800653e:	f7f9 ffc7 	bl	80004d0 <__aeabi_dmul>
 8006542:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006546:	3501      	adds	r5, #1
 8006548:	1076      	asrs	r6, r6, #1
 800654a:	3708      	adds	r7, #8
 800654c:	e79f      	b.n	800648e <_dtoa_r+0x2b6>
 800654e:	f000 80a5 	beq.w	800669c <_dtoa_r+0x4c4>
 8006552:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006556:	f1cb 0600 	rsb	r6, fp, #0
 800655a:	4ba2      	ldr	r3, [pc, #648]	; (80067e4 <_dtoa_r+0x60c>)
 800655c:	f006 020f 	and.w	r2, r6, #15
 8006560:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006568:	f7f9 ffb2 	bl	80004d0 <__aeabi_dmul>
 800656c:	2502      	movs	r5, #2
 800656e:	2300      	movs	r3, #0
 8006570:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006574:	4f9c      	ldr	r7, [pc, #624]	; (80067e8 <_dtoa_r+0x610>)
 8006576:	1136      	asrs	r6, r6, #4
 8006578:	2e00      	cmp	r6, #0
 800657a:	f040 8084 	bne.w	8006686 <_dtoa_r+0x4ae>
 800657e:	2b00      	cmp	r3, #0
 8006580:	d18d      	bne.n	800649e <_dtoa_r+0x2c6>
 8006582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 808b 	beq.w	80066a0 <_dtoa_r+0x4c8>
 800658a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800658e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006592:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006596:	2200      	movs	r2, #0
 8006598:	4b94      	ldr	r3, [pc, #592]	; (80067ec <_dtoa_r+0x614>)
 800659a:	f7fa fa0b 	bl	80009b4 <__aeabi_dcmplt>
 800659e:	2800      	cmp	r0, #0
 80065a0:	d07e      	beq.n	80066a0 <_dtoa_r+0x4c8>
 80065a2:	f1b9 0f00 	cmp.w	r9, #0
 80065a6:	d07b      	beq.n	80066a0 <_dtoa_r+0x4c8>
 80065a8:	9b04      	ldr	r3, [sp, #16]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	dd37      	ble.n	800661e <_dtoa_r+0x446>
 80065ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065b2:	2200      	movs	r2, #0
 80065b4:	4b8e      	ldr	r3, [pc, #568]	; (80067f0 <_dtoa_r+0x618>)
 80065b6:	f7f9 ff8b 	bl	80004d0 <__aeabi_dmul>
 80065ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065be:	9e04      	ldr	r6, [sp, #16]
 80065c0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80065c4:	3501      	adds	r5, #1
 80065c6:	4628      	mov	r0, r5
 80065c8:	f7f9 ff1c 	bl	8000404 <__aeabi_i2d>
 80065cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065d0:	f7f9 ff7e 	bl	80004d0 <__aeabi_dmul>
 80065d4:	4b87      	ldr	r3, [pc, #540]	; (80067f4 <_dtoa_r+0x61c>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	f7f9 fdc8 	bl	800016c <__adddf3>
 80065dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80065e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065e2:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 80065e6:	950b      	str	r5, [sp, #44]	; 0x2c
 80065e8:	2e00      	cmp	r6, #0
 80065ea:	d15c      	bne.n	80066a6 <_dtoa_r+0x4ce>
 80065ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065f0:	2200      	movs	r2, #0
 80065f2:	4b81      	ldr	r3, [pc, #516]	; (80067f8 <_dtoa_r+0x620>)
 80065f4:	f7f9 fdb8 	bl	8000168 <__aeabi_dsub>
 80065f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065fa:	462b      	mov	r3, r5
 80065fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006600:	f7fa f9f6 	bl	80009f0 <__aeabi_dcmpgt>
 8006604:	2800      	cmp	r0, #0
 8006606:	f040 82f7 	bne.w	8006bf8 <_dtoa_r+0xa20>
 800660a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800660e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006610:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006614:	f7fa f9ce 	bl	80009b4 <__aeabi_dcmplt>
 8006618:	2800      	cmp	r0, #0
 800661a:	f040 82eb 	bne.w	8006bf4 <_dtoa_r+0xa1c>
 800661e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006622:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006626:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006628:	2b00      	cmp	r3, #0
 800662a:	f2c0 8150 	blt.w	80068ce <_dtoa_r+0x6f6>
 800662e:	f1bb 0f0e 	cmp.w	fp, #14
 8006632:	f300 814c 	bgt.w	80068ce <_dtoa_r+0x6f6>
 8006636:	4b6b      	ldr	r3, [pc, #428]	; (80067e4 <_dtoa_r+0x60c>)
 8006638:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006640:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006644:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006646:	2b00      	cmp	r3, #0
 8006648:	f280 80da 	bge.w	8006800 <_dtoa_r+0x628>
 800664c:	f1b9 0f00 	cmp.w	r9, #0
 8006650:	f300 80d6 	bgt.w	8006800 <_dtoa_r+0x628>
 8006654:	f040 82cd 	bne.w	8006bf2 <_dtoa_r+0xa1a>
 8006658:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800665c:	2200      	movs	r2, #0
 800665e:	4b66      	ldr	r3, [pc, #408]	; (80067f8 <_dtoa_r+0x620>)
 8006660:	f7f9 ff36 	bl	80004d0 <__aeabi_dmul>
 8006664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006668:	f7fa f9b8 	bl	80009dc <__aeabi_dcmpge>
 800666c:	464e      	mov	r6, r9
 800666e:	464f      	mov	r7, r9
 8006670:	2800      	cmp	r0, #0
 8006672:	f040 82a4 	bne.w	8006bbe <_dtoa_r+0x9e6>
 8006676:	9b06      	ldr	r3, [sp, #24]
 8006678:	9a06      	ldr	r2, [sp, #24]
 800667a:	1c5d      	adds	r5, r3, #1
 800667c:	2331      	movs	r3, #49	; 0x31
 800667e:	f10b 0b01 	add.w	fp, fp, #1
 8006682:	7013      	strb	r3, [r2, #0]
 8006684:	e29f      	b.n	8006bc6 <_dtoa_r+0x9ee>
 8006686:	07f2      	lsls	r2, r6, #31
 8006688:	d505      	bpl.n	8006696 <_dtoa_r+0x4be>
 800668a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800668e:	f7f9 ff1f 	bl	80004d0 <__aeabi_dmul>
 8006692:	2301      	movs	r3, #1
 8006694:	3501      	adds	r5, #1
 8006696:	1076      	asrs	r6, r6, #1
 8006698:	3708      	adds	r7, #8
 800669a:	e76d      	b.n	8006578 <_dtoa_r+0x3a0>
 800669c:	2502      	movs	r5, #2
 800669e:	e770      	b.n	8006582 <_dtoa_r+0x3aa>
 80066a0:	465f      	mov	r7, fp
 80066a2:	464e      	mov	r6, r9
 80066a4:	e78f      	b.n	80065c6 <_dtoa_r+0x3ee>
 80066a6:	9a06      	ldr	r2, [sp, #24]
 80066a8:	4b4e      	ldr	r3, [pc, #312]	; (80067e4 <_dtoa_r+0x60c>)
 80066aa:	4432      	add	r2, r6
 80066ac:	9211      	str	r2, [sp, #68]	; 0x44
 80066ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066b0:	1e71      	subs	r1, r6, #1
 80066b2:	2a00      	cmp	r2, #0
 80066b4:	d048      	beq.n	8006748 <_dtoa_r+0x570>
 80066b6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066be:	2000      	movs	r0, #0
 80066c0:	494e      	ldr	r1, [pc, #312]	; (80067fc <_dtoa_r+0x624>)
 80066c2:	f7fa f82f 	bl	8000724 <__aeabi_ddiv>
 80066c6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066ca:	f7f9 fd4d 	bl	8000168 <__aeabi_dsub>
 80066ce:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80066d2:	9d06      	ldr	r5, [sp, #24]
 80066d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066d8:	f7fa f9aa 	bl	8000a30 <__aeabi_d2iz>
 80066dc:	4606      	mov	r6, r0
 80066de:	f7f9 fe91 	bl	8000404 <__aeabi_i2d>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ea:	f7f9 fd3d 	bl	8000168 <__aeabi_dsub>
 80066ee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066f2:	3630      	adds	r6, #48	; 0x30
 80066f4:	f805 6b01 	strb.w	r6, [r5], #1
 80066f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066fc:	f7fa f95a 	bl	80009b4 <__aeabi_dcmplt>
 8006700:	2800      	cmp	r0, #0
 8006702:	d164      	bne.n	80067ce <_dtoa_r+0x5f6>
 8006704:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006708:	2000      	movs	r0, #0
 800670a:	4938      	ldr	r1, [pc, #224]	; (80067ec <_dtoa_r+0x614>)
 800670c:	f7f9 fd2c 	bl	8000168 <__aeabi_dsub>
 8006710:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006714:	f7fa f94e 	bl	80009b4 <__aeabi_dcmplt>
 8006718:	2800      	cmp	r0, #0
 800671a:	f040 80b9 	bne.w	8006890 <_dtoa_r+0x6b8>
 800671e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006720:	429d      	cmp	r5, r3
 8006722:	f43f af7c 	beq.w	800661e <_dtoa_r+0x446>
 8006726:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800672a:	2200      	movs	r2, #0
 800672c:	4b30      	ldr	r3, [pc, #192]	; (80067f0 <_dtoa_r+0x618>)
 800672e:	f7f9 fecf 	bl	80004d0 <__aeabi_dmul>
 8006732:	2200      	movs	r2, #0
 8006734:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800673c:	4b2c      	ldr	r3, [pc, #176]	; (80067f0 <_dtoa_r+0x618>)
 800673e:	f7f9 fec7 	bl	80004d0 <__aeabi_dmul>
 8006742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006746:	e7c5      	b.n	80066d4 <_dtoa_r+0x4fc>
 8006748:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800674c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006750:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006754:	f7f9 febc 	bl	80004d0 <__aeabi_dmul>
 8006758:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800675c:	9d06      	ldr	r5, [sp, #24]
 800675e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006762:	f7fa f965 	bl	8000a30 <__aeabi_d2iz>
 8006766:	4606      	mov	r6, r0
 8006768:	f7f9 fe4c 	bl	8000404 <__aeabi_i2d>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006774:	f7f9 fcf8 	bl	8000168 <__aeabi_dsub>
 8006778:	3630      	adds	r6, #48	; 0x30
 800677a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800677c:	f805 6b01 	strb.w	r6, [r5], #1
 8006780:	42ab      	cmp	r3, r5
 8006782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006786:	f04f 0200 	mov.w	r2, #0
 800678a:	d124      	bne.n	80067d6 <_dtoa_r+0x5fe>
 800678c:	4b1b      	ldr	r3, [pc, #108]	; (80067fc <_dtoa_r+0x624>)
 800678e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006792:	f7f9 fceb 	bl	800016c <__adddf3>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800679e:	f7fa f927 	bl	80009f0 <__aeabi_dcmpgt>
 80067a2:	2800      	cmp	r0, #0
 80067a4:	d174      	bne.n	8006890 <_dtoa_r+0x6b8>
 80067a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80067aa:	2000      	movs	r0, #0
 80067ac:	4913      	ldr	r1, [pc, #76]	; (80067fc <_dtoa_r+0x624>)
 80067ae:	f7f9 fcdb 	bl	8000168 <__aeabi_dsub>
 80067b2:	4602      	mov	r2, r0
 80067b4:	460b      	mov	r3, r1
 80067b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067ba:	f7fa f8fb 	bl	80009b4 <__aeabi_dcmplt>
 80067be:	2800      	cmp	r0, #0
 80067c0:	f43f af2d 	beq.w	800661e <_dtoa_r+0x446>
 80067c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067c8:	1e6a      	subs	r2, r5, #1
 80067ca:	2b30      	cmp	r3, #48	; 0x30
 80067cc:	d001      	beq.n	80067d2 <_dtoa_r+0x5fa>
 80067ce:	46bb      	mov	fp, r7
 80067d0:	e04d      	b.n	800686e <_dtoa_r+0x696>
 80067d2:	4615      	mov	r5, r2
 80067d4:	e7f6      	b.n	80067c4 <_dtoa_r+0x5ec>
 80067d6:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <_dtoa_r+0x618>)
 80067d8:	f7f9 fe7a 	bl	80004d0 <__aeabi_dmul>
 80067dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067e0:	e7bd      	b.n	800675e <_dtoa_r+0x586>
 80067e2:	bf00      	nop
 80067e4:	08007fe0 	.word	0x08007fe0
 80067e8:	08007fb8 	.word	0x08007fb8
 80067ec:	3ff00000 	.word	0x3ff00000
 80067f0:	40240000 	.word	0x40240000
 80067f4:	401c0000 	.word	0x401c0000
 80067f8:	40140000 	.word	0x40140000
 80067fc:	3fe00000 	.word	0x3fe00000
 8006800:	9d06      	ldr	r5, [sp, #24]
 8006802:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800680a:	4630      	mov	r0, r6
 800680c:	4639      	mov	r1, r7
 800680e:	f7f9 ff89 	bl	8000724 <__aeabi_ddiv>
 8006812:	f7fa f90d 	bl	8000a30 <__aeabi_d2iz>
 8006816:	4680      	mov	r8, r0
 8006818:	f7f9 fdf4 	bl	8000404 <__aeabi_i2d>
 800681c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006820:	f7f9 fe56 	bl	80004d0 <__aeabi_dmul>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4630      	mov	r0, r6
 800682a:	4639      	mov	r1, r7
 800682c:	f7f9 fc9c 	bl	8000168 <__aeabi_dsub>
 8006830:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006834:	f805 6b01 	strb.w	r6, [r5], #1
 8006838:	9e06      	ldr	r6, [sp, #24]
 800683a:	4602      	mov	r2, r0
 800683c:	1bae      	subs	r6, r5, r6
 800683e:	45b1      	cmp	r9, r6
 8006840:	460b      	mov	r3, r1
 8006842:	d137      	bne.n	80068b4 <_dtoa_r+0x6dc>
 8006844:	f7f9 fc92 	bl	800016c <__adddf3>
 8006848:	4606      	mov	r6, r0
 800684a:	460f      	mov	r7, r1
 800684c:	4602      	mov	r2, r0
 800684e:	460b      	mov	r3, r1
 8006850:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006854:	f7fa f8ae 	bl	80009b4 <__aeabi_dcmplt>
 8006858:	b9c8      	cbnz	r0, 800688e <_dtoa_r+0x6b6>
 800685a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800685e:	4632      	mov	r2, r6
 8006860:	463b      	mov	r3, r7
 8006862:	f7fa f89d 	bl	80009a0 <__aeabi_dcmpeq>
 8006866:	b110      	cbz	r0, 800686e <_dtoa_r+0x696>
 8006868:	f018 0f01 	tst.w	r8, #1
 800686c:	d10f      	bne.n	800688e <_dtoa_r+0x6b6>
 800686e:	4651      	mov	r1, sl
 8006870:	4620      	mov	r0, r4
 8006872:	f000 fd01 	bl	8007278 <_Bfree>
 8006876:	2300      	movs	r3, #0
 8006878:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800687a:	702b      	strb	r3, [r5, #0]
 800687c:	f10b 0301 	add.w	r3, fp, #1
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006884:	2b00      	cmp	r3, #0
 8006886:	f43f acec 	beq.w	8006262 <_dtoa_r+0x8a>
 800688a:	601d      	str	r5, [r3, #0]
 800688c:	e4e9      	b.n	8006262 <_dtoa_r+0x8a>
 800688e:	465f      	mov	r7, fp
 8006890:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006894:	1e6b      	subs	r3, r5, #1
 8006896:	2a39      	cmp	r2, #57	; 0x39
 8006898:	d106      	bne.n	80068a8 <_dtoa_r+0x6d0>
 800689a:	9a06      	ldr	r2, [sp, #24]
 800689c:	429a      	cmp	r2, r3
 800689e:	d107      	bne.n	80068b0 <_dtoa_r+0x6d8>
 80068a0:	2330      	movs	r3, #48	; 0x30
 80068a2:	7013      	strb	r3, [r2, #0]
 80068a4:	4613      	mov	r3, r2
 80068a6:	3701      	adds	r7, #1
 80068a8:	781a      	ldrb	r2, [r3, #0]
 80068aa:	3201      	adds	r2, #1
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	e78e      	b.n	80067ce <_dtoa_r+0x5f6>
 80068b0:	461d      	mov	r5, r3
 80068b2:	e7ed      	b.n	8006890 <_dtoa_r+0x6b8>
 80068b4:	2200      	movs	r2, #0
 80068b6:	4bb5      	ldr	r3, [pc, #724]	; (8006b8c <_dtoa_r+0x9b4>)
 80068b8:	f7f9 fe0a 	bl	80004d0 <__aeabi_dmul>
 80068bc:	2200      	movs	r2, #0
 80068be:	2300      	movs	r3, #0
 80068c0:	4606      	mov	r6, r0
 80068c2:	460f      	mov	r7, r1
 80068c4:	f7fa f86c 	bl	80009a0 <__aeabi_dcmpeq>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d09c      	beq.n	8006806 <_dtoa_r+0x62e>
 80068cc:	e7cf      	b.n	800686e <_dtoa_r+0x696>
 80068ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068d0:	2a00      	cmp	r2, #0
 80068d2:	f000 8129 	beq.w	8006b28 <_dtoa_r+0x950>
 80068d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80068d8:	2a01      	cmp	r2, #1
 80068da:	f300 810e 	bgt.w	8006afa <_dtoa_r+0x922>
 80068de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068e0:	2a00      	cmp	r2, #0
 80068e2:	f000 8106 	beq.w	8006af2 <_dtoa_r+0x91a>
 80068e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068ea:	4645      	mov	r5, r8
 80068ec:	9e08      	ldr	r6, [sp, #32]
 80068ee:	9a07      	ldr	r2, [sp, #28]
 80068f0:	2101      	movs	r1, #1
 80068f2:	441a      	add	r2, r3
 80068f4:	4620      	mov	r0, r4
 80068f6:	4498      	add	r8, r3
 80068f8:	9207      	str	r2, [sp, #28]
 80068fa:	f000 fd5d 	bl	80073b8 <__i2b>
 80068fe:	4607      	mov	r7, r0
 8006900:	2d00      	cmp	r5, #0
 8006902:	dd0b      	ble.n	800691c <_dtoa_r+0x744>
 8006904:	9b07      	ldr	r3, [sp, #28]
 8006906:	2b00      	cmp	r3, #0
 8006908:	dd08      	ble.n	800691c <_dtoa_r+0x744>
 800690a:	42ab      	cmp	r3, r5
 800690c:	bfa8      	it	ge
 800690e:	462b      	movge	r3, r5
 8006910:	9a07      	ldr	r2, [sp, #28]
 8006912:	eba8 0803 	sub.w	r8, r8, r3
 8006916:	1aed      	subs	r5, r5, r3
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	9307      	str	r3, [sp, #28]
 800691c:	9b08      	ldr	r3, [sp, #32]
 800691e:	b1fb      	cbz	r3, 8006960 <_dtoa_r+0x788>
 8006920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 8104 	beq.w	8006b30 <_dtoa_r+0x958>
 8006928:	2e00      	cmp	r6, #0
 800692a:	dd11      	ble.n	8006950 <_dtoa_r+0x778>
 800692c:	4639      	mov	r1, r7
 800692e:	4632      	mov	r2, r6
 8006930:	4620      	mov	r0, r4
 8006932:	f000 fdd7 	bl	80074e4 <__pow5mult>
 8006936:	4652      	mov	r2, sl
 8006938:	4601      	mov	r1, r0
 800693a:	4607      	mov	r7, r0
 800693c:	4620      	mov	r0, r4
 800693e:	f000 fd44 	bl	80073ca <__multiply>
 8006942:	4651      	mov	r1, sl
 8006944:	900a      	str	r0, [sp, #40]	; 0x28
 8006946:	4620      	mov	r0, r4
 8006948:	f000 fc96 	bl	8007278 <_Bfree>
 800694c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800694e:	469a      	mov	sl, r3
 8006950:	9b08      	ldr	r3, [sp, #32]
 8006952:	1b9a      	subs	r2, r3, r6
 8006954:	d004      	beq.n	8006960 <_dtoa_r+0x788>
 8006956:	4651      	mov	r1, sl
 8006958:	4620      	mov	r0, r4
 800695a:	f000 fdc3 	bl	80074e4 <__pow5mult>
 800695e:	4682      	mov	sl, r0
 8006960:	2101      	movs	r1, #1
 8006962:	4620      	mov	r0, r4
 8006964:	f000 fd28 	bl	80073b8 <__i2b>
 8006968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800696a:	4606      	mov	r6, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	f340 80e1 	ble.w	8006b34 <_dtoa_r+0x95c>
 8006972:	461a      	mov	r2, r3
 8006974:	4601      	mov	r1, r0
 8006976:	4620      	mov	r0, r4
 8006978:	f000 fdb4 	bl	80074e4 <__pow5mult>
 800697c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800697e:	4606      	mov	r6, r0
 8006980:	2b01      	cmp	r3, #1
 8006982:	f340 80da 	ble.w	8006b3a <_dtoa_r+0x962>
 8006986:	2300      	movs	r3, #0
 8006988:	9308      	str	r3, [sp, #32]
 800698a:	6933      	ldr	r3, [r6, #16]
 800698c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006990:	6918      	ldr	r0, [r3, #16]
 8006992:	f000 fcc3 	bl	800731c <__hi0bits>
 8006996:	f1c0 0020 	rsb	r0, r0, #32
 800699a:	9b07      	ldr	r3, [sp, #28]
 800699c:	4418      	add	r0, r3
 800699e:	f010 001f 	ands.w	r0, r0, #31
 80069a2:	f000 80f0 	beq.w	8006b86 <_dtoa_r+0x9ae>
 80069a6:	f1c0 0320 	rsb	r3, r0, #32
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	f340 80e2 	ble.w	8006b74 <_dtoa_r+0x99c>
 80069b0:	9b07      	ldr	r3, [sp, #28]
 80069b2:	f1c0 001c 	rsb	r0, r0, #28
 80069b6:	4480      	add	r8, r0
 80069b8:	4405      	add	r5, r0
 80069ba:	4403      	add	r3, r0
 80069bc:	9307      	str	r3, [sp, #28]
 80069be:	f1b8 0f00 	cmp.w	r8, #0
 80069c2:	dd05      	ble.n	80069d0 <_dtoa_r+0x7f8>
 80069c4:	4651      	mov	r1, sl
 80069c6:	4642      	mov	r2, r8
 80069c8:	4620      	mov	r0, r4
 80069ca:	f000 fdd9 	bl	8007580 <__lshift>
 80069ce:	4682      	mov	sl, r0
 80069d0:	9b07      	ldr	r3, [sp, #28]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	dd05      	ble.n	80069e2 <_dtoa_r+0x80a>
 80069d6:	4631      	mov	r1, r6
 80069d8:	461a      	mov	r2, r3
 80069da:	4620      	mov	r0, r4
 80069dc:	f000 fdd0 	bl	8007580 <__lshift>
 80069e0:	4606      	mov	r6, r0
 80069e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 80d3 	beq.w	8006b90 <_dtoa_r+0x9b8>
 80069ea:	4631      	mov	r1, r6
 80069ec:	4650      	mov	r0, sl
 80069ee:	f000 fe18 	bl	8007622 <__mcmp>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	f280 80cc 	bge.w	8006b90 <_dtoa_r+0x9b8>
 80069f8:	2300      	movs	r3, #0
 80069fa:	4651      	mov	r1, sl
 80069fc:	220a      	movs	r2, #10
 80069fe:	4620      	mov	r0, r4
 8006a00:	f000 fc51 	bl	80072a6 <__multadd>
 8006a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a06:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a0a:	4682      	mov	sl, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 81a9 	beq.w	8006d64 <_dtoa_r+0xb8c>
 8006a12:	2300      	movs	r3, #0
 8006a14:	4639      	mov	r1, r7
 8006a16:	220a      	movs	r2, #10
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f000 fc44 	bl	80072a6 <__multadd>
 8006a1e:	9b04      	ldr	r3, [sp, #16]
 8006a20:	4607      	mov	r7, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	dc03      	bgt.n	8006a2e <_dtoa_r+0x856>
 8006a26:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	f300 80b9 	bgt.w	8006ba0 <_dtoa_r+0x9c8>
 8006a2e:	2d00      	cmp	r5, #0
 8006a30:	dd05      	ble.n	8006a3e <_dtoa_r+0x866>
 8006a32:	4639      	mov	r1, r7
 8006a34:	462a      	mov	r2, r5
 8006a36:	4620      	mov	r0, r4
 8006a38:	f000 fda2 	bl	8007580 <__lshift>
 8006a3c:	4607      	mov	r7, r0
 8006a3e:	9b08      	ldr	r3, [sp, #32]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 8110 	beq.w	8006c66 <_dtoa_r+0xa8e>
 8006a46:	6879      	ldr	r1, [r7, #4]
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f000 fbe1 	bl	8007210 <_Balloc>
 8006a4e:	4605      	mov	r5, r0
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	f107 010c 	add.w	r1, r7, #12
 8006a56:	3202      	adds	r2, #2
 8006a58:	0092      	lsls	r2, r2, #2
 8006a5a:	300c      	adds	r0, #12
 8006a5c:	f000 fbc0 	bl	80071e0 <memcpy>
 8006a60:	2201      	movs	r2, #1
 8006a62:	4629      	mov	r1, r5
 8006a64:	4620      	mov	r0, r4
 8006a66:	f000 fd8b 	bl	8007580 <__lshift>
 8006a6a:	9707      	str	r7, [sp, #28]
 8006a6c:	4607      	mov	r7, r0
 8006a6e:	9b02      	ldr	r3, [sp, #8]
 8006a70:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	9308      	str	r3, [sp, #32]
 8006a7a:	4631      	mov	r1, r6
 8006a7c:	4650      	mov	r0, sl
 8006a7e:	f7ff fb1d 	bl	80060bc <quorem>
 8006a82:	9907      	ldr	r1, [sp, #28]
 8006a84:	4605      	mov	r5, r0
 8006a86:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006a8a:	4650      	mov	r0, sl
 8006a8c:	f000 fdc9 	bl	8007622 <__mcmp>
 8006a90:	463a      	mov	r2, r7
 8006a92:	9002      	str	r0, [sp, #8]
 8006a94:	4631      	mov	r1, r6
 8006a96:	4620      	mov	r0, r4
 8006a98:	f000 fddd 	bl	8007656 <__mdiff>
 8006a9c:	68c3      	ldr	r3, [r0, #12]
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f040 80e2 	bne.w	8006c6a <_dtoa_r+0xa92>
 8006aa6:	4601      	mov	r1, r0
 8006aa8:	9009      	str	r0, [sp, #36]	; 0x24
 8006aaa:	4650      	mov	r0, sl
 8006aac:	f000 fdb9 	bl	8007622 <__mcmp>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8006aba:	f000 fbdd 	bl	8007278 <_Bfree>
 8006abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f040 80d4 	bne.w	8006c6e <_dtoa_r+0xa96>
 8006ac6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006ac8:	2a00      	cmp	r2, #0
 8006aca:	f040 80d0 	bne.w	8006c6e <_dtoa_r+0xa96>
 8006ace:	9a08      	ldr	r2, [sp, #32]
 8006ad0:	2a00      	cmp	r2, #0
 8006ad2:	f040 80cc 	bne.w	8006c6e <_dtoa_r+0xa96>
 8006ad6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ada:	f000 80e8 	beq.w	8006cae <_dtoa_r+0xad6>
 8006ade:	9b02      	ldr	r3, [sp, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	dd01      	ble.n	8006ae8 <_dtoa_r+0x910>
 8006ae4:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8006ae8:	f108 0501 	add.w	r5, r8, #1
 8006aec:	f888 9000 	strb.w	r9, [r8]
 8006af0:	e06b      	b.n	8006bca <_dtoa_r+0x9f2>
 8006af2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006af4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006af8:	e6f7      	b.n	80068ea <_dtoa_r+0x712>
 8006afa:	9b08      	ldr	r3, [sp, #32]
 8006afc:	f109 36ff 	add.w	r6, r9, #4294967295
 8006b00:	42b3      	cmp	r3, r6
 8006b02:	bfb7      	itett	lt
 8006b04:	9b08      	ldrlt	r3, [sp, #32]
 8006b06:	1b9e      	subge	r6, r3, r6
 8006b08:	1af2      	sublt	r2, r6, r3
 8006b0a:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006b0c:	bfbf      	itttt	lt
 8006b0e:	9608      	strlt	r6, [sp, #32]
 8006b10:	189b      	addlt	r3, r3, r2
 8006b12:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006b14:	2600      	movlt	r6, #0
 8006b16:	f1b9 0f00 	cmp.w	r9, #0
 8006b1a:	bfb9      	ittee	lt
 8006b1c:	eba8 0509 	sublt.w	r5, r8, r9
 8006b20:	2300      	movlt	r3, #0
 8006b22:	4645      	movge	r5, r8
 8006b24:	464b      	movge	r3, r9
 8006b26:	e6e2      	b.n	80068ee <_dtoa_r+0x716>
 8006b28:	9e08      	ldr	r6, [sp, #32]
 8006b2a:	4645      	mov	r5, r8
 8006b2c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006b2e:	e6e7      	b.n	8006900 <_dtoa_r+0x728>
 8006b30:	9a08      	ldr	r2, [sp, #32]
 8006b32:	e710      	b.n	8006956 <_dtoa_r+0x77e>
 8006b34:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	dc18      	bgt.n	8006b6c <_dtoa_r+0x994>
 8006b3a:	9b02      	ldr	r3, [sp, #8]
 8006b3c:	b9b3      	cbnz	r3, 8006b6c <_dtoa_r+0x994>
 8006b3e:	9b03      	ldr	r3, [sp, #12]
 8006b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b44:	b9a3      	cbnz	r3, 8006b70 <_dtoa_r+0x998>
 8006b46:	9b03      	ldr	r3, [sp, #12]
 8006b48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b4c:	0d1b      	lsrs	r3, r3, #20
 8006b4e:	051b      	lsls	r3, r3, #20
 8006b50:	b12b      	cbz	r3, 8006b5e <_dtoa_r+0x986>
 8006b52:	9b07      	ldr	r3, [sp, #28]
 8006b54:	f108 0801 	add.w	r8, r8, #1
 8006b58:	3301      	adds	r3, #1
 8006b5a:	9307      	str	r3, [sp, #28]
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	9308      	str	r3, [sp, #32]
 8006b60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f47f af11 	bne.w	800698a <_dtoa_r+0x7b2>
 8006b68:	2001      	movs	r0, #1
 8006b6a:	e716      	b.n	800699a <_dtoa_r+0x7c2>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	e7f6      	b.n	8006b5e <_dtoa_r+0x986>
 8006b70:	9b02      	ldr	r3, [sp, #8]
 8006b72:	e7f4      	b.n	8006b5e <_dtoa_r+0x986>
 8006b74:	f43f af23 	beq.w	80069be <_dtoa_r+0x7e6>
 8006b78:	9a07      	ldr	r2, [sp, #28]
 8006b7a:	331c      	adds	r3, #28
 8006b7c:	441a      	add	r2, r3
 8006b7e:	4498      	add	r8, r3
 8006b80:	441d      	add	r5, r3
 8006b82:	4613      	mov	r3, r2
 8006b84:	e71a      	b.n	80069bc <_dtoa_r+0x7e4>
 8006b86:	4603      	mov	r3, r0
 8006b88:	e7f6      	b.n	8006b78 <_dtoa_r+0x9a0>
 8006b8a:	bf00      	nop
 8006b8c:	40240000 	.word	0x40240000
 8006b90:	f1b9 0f00 	cmp.w	r9, #0
 8006b94:	dc33      	bgt.n	8006bfe <_dtoa_r+0xa26>
 8006b96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	dd30      	ble.n	8006bfe <_dtoa_r+0xa26>
 8006b9c:	f8cd 9010 	str.w	r9, [sp, #16]
 8006ba0:	9b04      	ldr	r3, [sp, #16]
 8006ba2:	b963      	cbnz	r3, 8006bbe <_dtoa_r+0x9e6>
 8006ba4:	4631      	mov	r1, r6
 8006ba6:	2205      	movs	r2, #5
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f000 fb7c 	bl	80072a6 <__multadd>
 8006bae:	4601      	mov	r1, r0
 8006bb0:	4606      	mov	r6, r0
 8006bb2:	4650      	mov	r0, sl
 8006bb4:	f000 fd35 	bl	8007622 <__mcmp>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	f73f ad5c 	bgt.w	8006676 <_dtoa_r+0x49e>
 8006bbe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006bc0:	9d06      	ldr	r5, [sp, #24]
 8006bc2:	ea6f 0b03 	mvn.w	fp, r3
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	9307      	str	r3, [sp, #28]
 8006bca:	4631      	mov	r1, r6
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f000 fb53 	bl	8007278 <_Bfree>
 8006bd2:	2f00      	cmp	r7, #0
 8006bd4:	f43f ae4b 	beq.w	800686e <_dtoa_r+0x696>
 8006bd8:	9b07      	ldr	r3, [sp, #28]
 8006bda:	b12b      	cbz	r3, 8006be8 <_dtoa_r+0xa10>
 8006bdc:	42bb      	cmp	r3, r7
 8006bde:	d003      	beq.n	8006be8 <_dtoa_r+0xa10>
 8006be0:	4619      	mov	r1, r3
 8006be2:	4620      	mov	r0, r4
 8006be4:	f000 fb48 	bl	8007278 <_Bfree>
 8006be8:	4639      	mov	r1, r7
 8006bea:	4620      	mov	r0, r4
 8006bec:	f000 fb44 	bl	8007278 <_Bfree>
 8006bf0:	e63d      	b.n	800686e <_dtoa_r+0x696>
 8006bf2:	2600      	movs	r6, #0
 8006bf4:	4637      	mov	r7, r6
 8006bf6:	e7e2      	b.n	8006bbe <_dtoa_r+0x9e6>
 8006bf8:	46bb      	mov	fp, r7
 8006bfa:	4637      	mov	r7, r6
 8006bfc:	e53b      	b.n	8006676 <_dtoa_r+0x49e>
 8006bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c00:	f8cd 9010 	str.w	r9, [sp, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f47f af12 	bne.w	8006a2e <_dtoa_r+0x856>
 8006c0a:	9d06      	ldr	r5, [sp, #24]
 8006c0c:	4631      	mov	r1, r6
 8006c0e:	4650      	mov	r0, sl
 8006c10:	f7ff fa54 	bl	80060bc <quorem>
 8006c14:	9b06      	ldr	r3, [sp, #24]
 8006c16:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006c1a:	f805 9b01 	strb.w	r9, [r5], #1
 8006c1e:	9a04      	ldr	r2, [sp, #16]
 8006c20:	1aeb      	subs	r3, r5, r3
 8006c22:	429a      	cmp	r2, r3
 8006c24:	f300 8081 	bgt.w	8006d2a <_dtoa_r+0xb52>
 8006c28:	9b06      	ldr	r3, [sp, #24]
 8006c2a:	2a01      	cmp	r2, #1
 8006c2c:	bfac      	ite	ge
 8006c2e:	189b      	addge	r3, r3, r2
 8006c30:	3301      	addlt	r3, #1
 8006c32:	4698      	mov	r8, r3
 8006c34:	2300      	movs	r3, #0
 8006c36:	9307      	str	r3, [sp, #28]
 8006c38:	4651      	mov	r1, sl
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f000 fc9f 	bl	8007580 <__lshift>
 8006c42:	4631      	mov	r1, r6
 8006c44:	4682      	mov	sl, r0
 8006c46:	f000 fcec 	bl	8007622 <__mcmp>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	dc34      	bgt.n	8006cb8 <_dtoa_r+0xae0>
 8006c4e:	d102      	bne.n	8006c56 <_dtoa_r+0xa7e>
 8006c50:	f019 0f01 	tst.w	r9, #1
 8006c54:	d130      	bne.n	8006cb8 <_dtoa_r+0xae0>
 8006c56:	4645      	mov	r5, r8
 8006c58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c5c:	1e6a      	subs	r2, r5, #1
 8006c5e:	2b30      	cmp	r3, #48	; 0x30
 8006c60:	d1b3      	bne.n	8006bca <_dtoa_r+0x9f2>
 8006c62:	4615      	mov	r5, r2
 8006c64:	e7f8      	b.n	8006c58 <_dtoa_r+0xa80>
 8006c66:	4638      	mov	r0, r7
 8006c68:	e6ff      	b.n	8006a6a <_dtoa_r+0x892>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e722      	b.n	8006ab4 <_dtoa_r+0x8dc>
 8006c6e:	9a02      	ldr	r2, [sp, #8]
 8006c70:	2a00      	cmp	r2, #0
 8006c72:	db04      	blt.n	8006c7e <_dtoa_r+0xaa6>
 8006c74:	d128      	bne.n	8006cc8 <_dtoa_r+0xaf0>
 8006c76:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006c78:	bb32      	cbnz	r2, 8006cc8 <_dtoa_r+0xaf0>
 8006c7a:	9a08      	ldr	r2, [sp, #32]
 8006c7c:	bb22      	cbnz	r2, 8006cc8 <_dtoa_r+0xaf0>
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f77f af32 	ble.w	8006ae8 <_dtoa_r+0x910>
 8006c84:	4651      	mov	r1, sl
 8006c86:	2201      	movs	r2, #1
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f000 fc79 	bl	8007580 <__lshift>
 8006c8e:	4631      	mov	r1, r6
 8006c90:	4682      	mov	sl, r0
 8006c92:	f000 fcc6 	bl	8007622 <__mcmp>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	dc05      	bgt.n	8006ca6 <_dtoa_r+0xace>
 8006c9a:	f47f af25 	bne.w	8006ae8 <_dtoa_r+0x910>
 8006c9e:	f019 0f01 	tst.w	r9, #1
 8006ca2:	f43f af21 	beq.w	8006ae8 <_dtoa_r+0x910>
 8006ca6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006caa:	f47f af1b 	bne.w	8006ae4 <_dtoa_r+0x90c>
 8006cae:	2339      	movs	r3, #57	; 0x39
 8006cb0:	f108 0801 	add.w	r8, r8, #1
 8006cb4:	f808 3c01 	strb.w	r3, [r8, #-1]
 8006cb8:	4645      	mov	r5, r8
 8006cba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006cbe:	1e6a      	subs	r2, r5, #1
 8006cc0:	2b39      	cmp	r3, #57	; 0x39
 8006cc2:	d03a      	beq.n	8006d3a <_dtoa_r+0xb62>
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	e03f      	b.n	8006d48 <_dtoa_r+0xb70>
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f108 0501 	add.w	r5, r8, #1
 8006cce:	dd05      	ble.n	8006cdc <_dtoa_r+0xb04>
 8006cd0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006cd4:	d0eb      	beq.n	8006cae <_dtoa_r+0xad6>
 8006cd6:	f109 0901 	add.w	r9, r9, #1
 8006cda:	e707      	b.n	8006aec <_dtoa_r+0x914>
 8006cdc:	9b06      	ldr	r3, [sp, #24]
 8006cde:	9a04      	ldr	r2, [sp, #16]
 8006ce0:	1aeb      	subs	r3, r5, r3
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	46a8      	mov	r8, r5
 8006ce6:	f805 9c01 	strb.w	r9, [r5, #-1]
 8006cea:	d0a5      	beq.n	8006c38 <_dtoa_r+0xa60>
 8006cec:	4651      	mov	r1, sl
 8006cee:	2300      	movs	r3, #0
 8006cf0:	220a      	movs	r2, #10
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f000 fad7 	bl	80072a6 <__multadd>
 8006cf8:	9b07      	ldr	r3, [sp, #28]
 8006cfa:	4682      	mov	sl, r0
 8006cfc:	42bb      	cmp	r3, r7
 8006cfe:	f04f 020a 	mov.w	r2, #10
 8006d02:	f04f 0300 	mov.w	r3, #0
 8006d06:	9907      	ldr	r1, [sp, #28]
 8006d08:	4620      	mov	r0, r4
 8006d0a:	d104      	bne.n	8006d16 <_dtoa_r+0xb3e>
 8006d0c:	f000 facb 	bl	80072a6 <__multadd>
 8006d10:	9007      	str	r0, [sp, #28]
 8006d12:	4607      	mov	r7, r0
 8006d14:	e6b1      	b.n	8006a7a <_dtoa_r+0x8a2>
 8006d16:	f000 fac6 	bl	80072a6 <__multadd>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	9007      	str	r0, [sp, #28]
 8006d1e:	220a      	movs	r2, #10
 8006d20:	4639      	mov	r1, r7
 8006d22:	4620      	mov	r0, r4
 8006d24:	f000 fabf 	bl	80072a6 <__multadd>
 8006d28:	e7f3      	b.n	8006d12 <_dtoa_r+0xb3a>
 8006d2a:	4651      	mov	r1, sl
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	220a      	movs	r2, #10
 8006d30:	4620      	mov	r0, r4
 8006d32:	f000 fab8 	bl	80072a6 <__multadd>
 8006d36:	4682      	mov	sl, r0
 8006d38:	e768      	b.n	8006c0c <_dtoa_r+0xa34>
 8006d3a:	9b06      	ldr	r3, [sp, #24]
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d105      	bne.n	8006d4c <_dtoa_r+0xb74>
 8006d40:	2331      	movs	r3, #49	; 0x31
 8006d42:	9a06      	ldr	r2, [sp, #24]
 8006d44:	f10b 0b01 	add.w	fp, fp, #1
 8006d48:	7013      	strb	r3, [r2, #0]
 8006d4a:	e73e      	b.n	8006bca <_dtoa_r+0x9f2>
 8006d4c:	4615      	mov	r5, r2
 8006d4e:	e7b4      	b.n	8006cba <_dtoa_r+0xae2>
 8006d50:	4b09      	ldr	r3, [pc, #36]	; (8006d78 <_dtoa_r+0xba0>)
 8006d52:	f7ff baa3 	b.w	800629c <_dtoa_r+0xc4>
 8006d56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f47f aa7d 	bne.w	8006258 <_dtoa_r+0x80>
 8006d5e:	4b07      	ldr	r3, [pc, #28]	; (8006d7c <_dtoa_r+0xba4>)
 8006d60:	f7ff ba9c 	b.w	800629c <_dtoa_r+0xc4>
 8006d64:	9b04      	ldr	r3, [sp, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f73f af4f 	bgt.w	8006c0a <_dtoa_r+0xa32>
 8006d6c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	f77f af4b 	ble.w	8006c0a <_dtoa_r+0xa32>
 8006d74:	e714      	b.n	8006ba0 <_dtoa_r+0x9c8>
 8006d76:	bf00      	nop
 8006d78:	08007f86 	.word	0x08007f86
 8006d7c:	08007fa8 	.word	0x08007fa8

08006d80 <_localeconv_r>:
 8006d80:	4b04      	ldr	r3, [pc, #16]	; (8006d94 <_localeconv_r+0x14>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6a18      	ldr	r0, [r3, #32]
 8006d86:	4b04      	ldr	r3, [pc, #16]	; (8006d98 <_localeconv_r+0x18>)
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	bf08      	it	eq
 8006d8c:	4618      	moveq	r0, r3
 8006d8e:	30f0      	adds	r0, #240	; 0xf0
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	2000000c 	.word	0x2000000c
 8006d98:	20000510 	.word	0x20000510

08006d9c <malloc>:
 8006d9c:	4b02      	ldr	r3, [pc, #8]	; (8006da8 <malloc+0xc>)
 8006d9e:	4601      	mov	r1, r0
 8006da0:	6818      	ldr	r0, [r3, #0]
 8006da2:	f000 b803 	b.w	8006dac <_malloc_r>
 8006da6:	bf00      	nop
 8006da8:	2000000c 	.word	0x2000000c

08006dac <_malloc_r>:
 8006dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db0:	f101 040b 	add.w	r4, r1, #11
 8006db4:	2c16      	cmp	r4, #22
 8006db6:	4681      	mov	r9, r0
 8006db8:	d907      	bls.n	8006dca <_malloc_r+0x1e>
 8006dba:	f034 0407 	bics.w	r4, r4, #7
 8006dbe:	d505      	bpl.n	8006dcc <_malloc_r+0x20>
 8006dc0:	230c      	movs	r3, #12
 8006dc2:	f8c9 3000 	str.w	r3, [r9]
 8006dc6:	2600      	movs	r6, #0
 8006dc8:	e131      	b.n	800702e <_malloc_r+0x282>
 8006dca:	2410      	movs	r4, #16
 8006dcc:	428c      	cmp	r4, r1
 8006dce:	d3f7      	bcc.n	8006dc0 <_malloc_r+0x14>
 8006dd0:	4648      	mov	r0, r9
 8006dd2:	f000 fa11 	bl	80071f8 <__malloc_lock>
 8006dd6:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8006dda:	4d9b      	ldr	r5, [pc, #620]	; (8007048 <_malloc_r+0x29c>)
 8006ddc:	d236      	bcs.n	8006e4c <_malloc_r+0xa0>
 8006dde:	f104 0208 	add.w	r2, r4, #8
 8006de2:	442a      	add	r2, r5
 8006de4:	6856      	ldr	r6, [r2, #4]
 8006de6:	f1a2 0108 	sub.w	r1, r2, #8
 8006dea:	428e      	cmp	r6, r1
 8006dec:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8006df0:	d102      	bne.n	8006df8 <_malloc_r+0x4c>
 8006df2:	68d6      	ldr	r6, [r2, #12]
 8006df4:	42b2      	cmp	r2, r6
 8006df6:	d010      	beq.n	8006e1a <_malloc_r+0x6e>
 8006df8:	6873      	ldr	r3, [r6, #4]
 8006dfa:	68f2      	ldr	r2, [r6, #12]
 8006dfc:	68b1      	ldr	r1, [r6, #8]
 8006dfe:	f023 0303 	bic.w	r3, r3, #3
 8006e02:	60ca      	str	r2, [r1, #12]
 8006e04:	4433      	add	r3, r6
 8006e06:	6091      	str	r1, [r2, #8]
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	f042 0201 	orr.w	r2, r2, #1
 8006e0e:	605a      	str	r2, [r3, #4]
 8006e10:	4648      	mov	r0, r9
 8006e12:	f000 f9f7 	bl	8007204 <__malloc_unlock>
 8006e16:	3608      	adds	r6, #8
 8006e18:	e109      	b.n	800702e <_malloc_r+0x282>
 8006e1a:	3302      	adds	r3, #2
 8006e1c:	4a8b      	ldr	r2, [pc, #556]	; (800704c <_malloc_r+0x2a0>)
 8006e1e:	692e      	ldr	r6, [r5, #16]
 8006e20:	4611      	mov	r1, r2
 8006e22:	4296      	cmp	r6, r2
 8006e24:	d06d      	beq.n	8006f02 <_malloc_r+0x156>
 8006e26:	6870      	ldr	r0, [r6, #4]
 8006e28:	f020 0003 	bic.w	r0, r0, #3
 8006e2c:	1b07      	subs	r7, r0, r4
 8006e2e:	2f0f      	cmp	r7, #15
 8006e30:	dd47      	ble.n	8006ec2 <_malloc_r+0x116>
 8006e32:	1933      	adds	r3, r6, r4
 8006e34:	f044 0401 	orr.w	r4, r4, #1
 8006e38:	6074      	str	r4, [r6, #4]
 8006e3a:	616b      	str	r3, [r5, #20]
 8006e3c:	612b      	str	r3, [r5, #16]
 8006e3e:	60da      	str	r2, [r3, #12]
 8006e40:	609a      	str	r2, [r3, #8]
 8006e42:	f047 0201 	orr.w	r2, r7, #1
 8006e46:	605a      	str	r2, [r3, #4]
 8006e48:	5037      	str	r7, [r6, r0]
 8006e4a:	e7e1      	b.n	8006e10 <_malloc_r+0x64>
 8006e4c:	0a63      	lsrs	r3, r4, #9
 8006e4e:	d02a      	beq.n	8006ea6 <_malloc_r+0xfa>
 8006e50:	2b04      	cmp	r3, #4
 8006e52:	d812      	bhi.n	8006e7a <_malloc_r+0xce>
 8006e54:	09a3      	lsrs	r3, r4, #6
 8006e56:	3338      	adds	r3, #56	; 0x38
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8006e5e:	6856      	ldr	r6, [r2, #4]
 8006e60:	f1a2 0008 	sub.w	r0, r2, #8
 8006e64:	4286      	cmp	r6, r0
 8006e66:	d006      	beq.n	8006e76 <_malloc_r+0xca>
 8006e68:	6872      	ldr	r2, [r6, #4]
 8006e6a:	f022 0203 	bic.w	r2, r2, #3
 8006e6e:	1b11      	subs	r1, r2, r4
 8006e70:	290f      	cmp	r1, #15
 8006e72:	dd1c      	ble.n	8006eae <_malloc_r+0x102>
 8006e74:	3b01      	subs	r3, #1
 8006e76:	3301      	adds	r3, #1
 8006e78:	e7d0      	b.n	8006e1c <_malloc_r+0x70>
 8006e7a:	2b14      	cmp	r3, #20
 8006e7c:	d801      	bhi.n	8006e82 <_malloc_r+0xd6>
 8006e7e:	335b      	adds	r3, #91	; 0x5b
 8006e80:	e7ea      	b.n	8006e58 <_malloc_r+0xac>
 8006e82:	2b54      	cmp	r3, #84	; 0x54
 8006e84:	d802      	bhi.n	8006e8c <_malloc_r+0xe0>
 8006e86:	0b23      	lsrs	r3, r4, #12
 8006e88:	336e      	adds	r3, #110	; 0x6e
 8006e8a:	e7e5      	b.n	8006e58 <_malloc_r+0xac>
 8006e8c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006e90:	d802      	bhi.n	8006e98 <_malloc_r+0xec>
 8006e92:	0be3      	lsrs	r3, r4, #15
 8006e94:	3377      	adds	r3, #119	; 0x77
 8006e96:	e7df      	b.n	8006e58 <_malloc_r+0xac>
 8006e98:	f240 5254 	movw	r2, #1364	; 0x554
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d804      	bhi.n	8006eaa <_malloc_r+0xfe>
 8006ea0:	0ca3      	lsrs	r3, r4, #18
 8006ea2:	337c      	adds	r3, #124	; 0x7c
 8006ea4:	e7d8      	b.n	8006e58 <_malloc_r+0xac>
 8006ea6:	233f      	movs	r3, #63	; 0x3f
 8006ea8:	e7d6      	b.n	8006e58 <_malloc_r+0xac>
 8006eaa:	237e      	movs	r3, #126	; 0x7e
 8006eac:	e7d4      	b.n	8006e58 <_malloc_r+0xac>
 8006eae:	2900      	cmp	r1, #0
 8006eb0:	68f1      	ldr	r1, [r6, #12]
 8006eb2:	db04      	blt.n	8006ebe <_malloc_r+0x112>
 8006eb4:	68b3      	ldr	r3, [r6, #8]
 8006eb6:	60d9      	str	r1, [r3, #12]
 8006eb8:	608b      	str	r3, [r1, #8]
 8006eba:	18b3      	adds	r3, r6, r2
 8006ebc:	e7a4      	b.n	8006e08 <_malloc_r+0x5c>
 8006ebe:	460e      	mov	r6, r1
 8006ec0:	e7d0      	b.n	8006e64 <_malloc_r+0xb8>
 8006ec2:	2f00      	cmp	r7, #0
 8006ec4:	616a      	str	r2, [r5, #20]
 8006ec6:	612a      	str	r2, [r5, #16]
 8006ec8:	db05      	blt.n	8006ed6 <_malloc_r+0x12a>
 8006eca:	4430      	add	r0, r6
 8006ecc:	6843      	ldr	r3, [r0, #4]
 8006ece:	f043 0301 	orr.w	r3, r3, #1
 8006ed2:	6043      	str	r3, [r0, #4]
 8006ed4:	e79c      	b.n	8006e10 <_malloc_r+0x64>
 8006ed6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006eda:	d244      	bcs.n	8006f66 <_malloc_r+0x1ba>
 8006edc:	2201      	movs	r2, #1
 8006ede:	08c0      	lsrs	r0, r0, #3
 8006ee0:	1087      	asrs	r7, r0, #2
 8006ee2:	fa02 f707 	lsl.w	r7, r2, r7
 8006ee6:	686a      	ldr	r2, [r5, #4]
 8006ee8:	3001      	adds	r0, #1
 8006eea:	433a      	orrs	r2, r7
 8006eec:	606a      	str	r2, [r5, #4]
 8006eee:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8006ef2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8006ef6:	3a08      	subs	r2, #8
 8006ef8:	60f2      	str	r2, [r6, #12]
 8006efa:	60b7      	str	r7, [r6, #8]
 8006efc:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8006f00:	60fe      	str	r6, [r7, #12]
 8006f02:	2001      	movs	r0, #1
 8006f04:	109a      	asrs	r2, r3, #2
 8006f06:	fa00 f202 	lsl.w	r2, r0, r2
 8006f0a:	6868      	ldr	r0, [r5, #4]
 8006f0c:	4282      	cmp	r2, r0
 8006f0e:	f200 809f 	bhi.w	8007050 <_malloc_r+0x2a4>
 8006f12:	4202      	tst	r2, r0
 8006f14:	d106      	bne.n	8006f24 <_malloc_r+0x178>
 8006f16:	f023 0303 	bic.w	r3, r3, #3
 8006f1a:	0052      	lsls	r2, r2, #1
 8006f1c:	4202      	tst	r2, r0
 8006f1e:	f103 0304 	add.w	r3, r3, #4
 8006f22:	d0fa      	beq.n	8006f1a <_malloc_r+0x16e>
 8006f24:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8006f28:	46e0      	mov	r8, ip
 8006f2a:	469e      	mov	lr, r3
 8006f2c:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8006f30:	4546      	cmp	r6, r8
 8006f32:	d153      	bne.n	8006fdc <_malloc_r+0x230>
 8006f34:	f10e 0e01 	add.w	lr, lr, #1
 8006f38:	f01e 0f03 	tst.w	lr, #3
 8006f3c:	f108 0808 	add.w	r8, r8, #8
 8006f40:	d1f4      	bne.n	8006f2c <_malloc_r+0x180>
 8006f42:	0798      	lsls	r0, r3, #30
 8006f44:	d179      	bne.n	800703a <_malloc_r+0x28e>
 8006f46:	686b      	ldr	r3, [r5, #4]
 8006f48:	ea23 0302 	bic.w	r3, r3, r2
 8006f4c:	606b      	str	r3, [r5, #4]
 8006f4e:	6868      	ldr	r0, [r5, #4]
 8006f50:	0052      	lsls	r2, r2, #1
 8006f52:	4282      	cmp	r2, r0
 8006f54:	d87c      	bhi.n	8007050 <_malloc_r+0x2a4>
 8006f56:	2a00      	cmp	r2, #0
 8006f58:	d07a      	beq.n	8007050 <_malloc_r+0x2a4>
 8006f5a:	4673      	mov	r3, lr
 8006f5c:	4202      	tst	r2, r0
 8006f5e:	d1e1      	bne.n	8006f24 <_malloc_r+0x178>
 8006f60:	3304      	adds	r3, #4
 8006f62:	0052      	lsls	r2, r2, #1
 8006f64:	e7fa      	b.n	8006f5c <_malloc_r+0x1b0>
 8006f66:	0a42      	lsrs	r2, r0, #9
 8006f68:	2a04      	cmp	r2, #4
 8006f6a:	d815      	bhi.n	8006f98 <_malloc_r+0x1ec>
 8006f6c:	0982      	lsrs	r2, r0, #6
 8006f6e:	3238      	adds	r2, #56	; 0x38
 8006f70:	1c57      	adds	r7, r2, #1
 8006f72:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8006f76:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8006f7a:	45be      	cmp	lr, r7
 8006f7c:	d126      	bne.n	8006fcc <_malloc_r+0x220>
 8006f7e:	2001      	movs	r0, #1
 8006f80:	1092      	asrs	r2, r2, #2
 8006f82:	fa00 f202 	lsl.w	r2, r0, r2
 8006f86:	6868      	ldr	r0, [r5, #4]
 8006f88:	4310      	orrs	r0, r2
 8006f8a:	6068      	str	r0, [r5, #4]
 8006f8c:	f8c6 e00c 	str.w	lr, [r6, #12]
 8006f90:	60b7      	str	r7, [r6, #8]
 8006f92:	f8ce 6008 	str.w	r6, [lr, #8]
 8006f96:	e7b3      	b.n	8006f00 <_malloc_r+0x154>
 8006f98:	2a14      	cmp	r2, #20
 8006f9a:	d801      	bhi.n	8006fa0 <_malloc_r+0x1f4>
 8006f9c:	325b      	adds	r2, #91	; 0x5b
 8006f9e:	e7e7      	b.n	8006f70 <_malloc_r+0x1c4>
 8006fa0:	2a54      	cmp	r2, #84	; 0x54
 8006fa2:	d802      	bhi.n	8006faa <_malloc_r+0x1fe>
 8006fa4:	0b02      	lsrs	r2, r0, #12
 8006fa6:	326e      	adds	r2, #110	; 0x6e
 8006fa8:	e7e2      	b.n	8006f70 <_malloc_r+0x1c4>
 8006faa:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006fae:	d802      	bhi.n	8006fb6 <_malloc_r+0x20a>
 8006fb0:	0bc2      	lsrs	r2, r0, #15
 8006fb2:	3277      	adds	r2, #119	; 0x77
 8006fb4:	e7dc      	b.n	8006f70 <_malloc_r+0x1c4>
 8006fb6:	f240 5754 	movw	r7, #1364	; 0x554
 8006fba:	42ba      	cmp	r2, r7
 8006fbc:	bf9a      	itte	ls
 8006fbe:	0c82      	lsrls	r2, r0, #18
 8006fc0:	327c      	addls	r2, #124	; 0x7c
 8006fc2:	227e      	movhi	r2, #126	; 0x7e
 8006fc4:	e7d4      	b.n	8006f70 <_malloc_r+0x1c4>
 8006fc6:	68bf      	ldr	r7, [r7, #8]
 8006fc8:	45be      	cmp	lr, r7
 8006fca:	d004      	beq.n	8006fd6 <_malloc_r+0x22a>
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	f022 0203 	bic.w	r2, r2, #3
 8006fd2:	4290      	cmp	r0, r2
 8006fd4:	d3f7      	bcc.n	8006fc6 <_malloc_r+0x21a>
 8006fd6:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8006fda:	e7d7      	b.n	8006f8c <_malloc_r+0x1e0>
 8006fdc:	6870      	ldr	r0, [r6, #4]
 8006fde:	68f7      	ldr	r7, [r6, #12]
 8006fe0:	f020 0003 	bic.w	r0, r0, #3
 8006fe4:	eba0 0a04 	sub.w	sl, r0, r4
 8006fe8:	f1ba 0f0f 	cmp.w	sl, #15
 8006fec:	dd10      	ble.n	8007010 <_malloc_r+0x264>
 8006fee:	68b2      	ldr	r2, [r6, #8]
 8006ff0:	1933      	adds	r3, r6, r4
 8006ff2:	f044 0401 	orr.w	r4, r4, #1
 8006ff6:	6074      	str	r4, [r6, #4]
 8006ff8:	60d7      	str	r7, [r2, #12]
 8006ffa:	60ba      	str	r2, [r7, #8]
 8006ffc:	f04a 0201 	orr.w	r2, sl, #1
 8007000:	616b      	str	r3, [r5, #20]
 8007002:	612b      	str	r3, [r5, #16]
 8007004:	60d9      	str	r1, [r3, #12]
 8007006:	6099      	str	r1, [r3, #8]
 8007008:	605a      	str	r2, [r3, #4]
 800700a:	f846 a000 	str.w	sl, [r6, r0]
 800700e:	e6ff      	b.n	8006e10 <_malloc_r+0x64>
 8007010:	f1ba 0f00 	cmp.w	sl, #0
 8007014:	db0f      	blt.n	8007036 <_malloc_r+0x28a>
 8007016:	4430      	add	r0, r6
 8007018:	6843      	ldr	r3, [r0, #4]
 800701a:	f043 0301 	orr.w	r3, r3, #1
 800701e:	6043      	str	r3, [r0, #4]
 8007020:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8007024:	4648      	mov	r0, r9
 8007026:	60df      	str	r7, [r3, #12]
 8007028:	60bb      	str	r3, [r7, #8]
 800702a:	f000 f8eb 	bl	8007204 <__malloc_unlock>
 800702e:	4630      	mov	r0, r6
 8007030:	b003      	add	sp, #12
 8007032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007036:	463e      	mov	r6, r7
 8007038:	e77a      	b.n	8006f30 <_malloc_r+0x184>
 800703a:	f85c 0908 	ldr.w	r0, [ip], #-8
 800703e:	3b01      	subs	r3, #1
 8007040:	4584      	cmp	ip, r0
 8007042:	f43f af7e 	beq.w	8006f42 <_malloc_r+0x196>
 8007046:	e782      	b.n	8006f4e <_malloc_r+0x1a2>
 8007048:	20000100 	.word	0x20000100
 800704c:	20000108 	.word	0x20000108
 8007050:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8007054:	f8db 6004 	ldr.w	r6, [fp, #4]
 8007058:	f026 0603 	bic.w	r6, r6, #3
 800705c:	42b4      	cmp	r4, r6
 800705e:	d803      	bhi.n	8007068 <_malloc_r+0x2bc>
 8007060:	1b33      	subs	r3, r6, r4
 8007062:	2b0f      	cmp	r3, #15
 8007064:	f300 8095 	bgt.w	8007192 <_malloc_r+0x3e6>
 8007068:	4a4f      	ldr	r2, [pc, #316]	; (80071a8 <_malloc_r+0x3fc>)
 800706a:	eb0b 0306 	add.w	r3, fp, r6
 800706e:	6817      	ldr	r7, [r2, #0]
 8007070:	4a4e      	ldr	r2, [pc, #312]	; (80071ac <_malloc_r+0x400>)
 8007072:	3710      	adds	r7, #16
 8007074:	6811      	ldr	r1, [r2, #0]
 8007076:	4427      	add	r7, r4
 8007078:	3101      	adds	r1, #1
 800707a:	d005      	beq.n	8007088 <_malloc_r+0x2dc>
 800707c:	494c      	ldr	r1, [pc, #304]	; (80071b0 <_malloc_r+0x404>)
 800707e:	3901      	subs	r1, #1
 8007080:	440f      	add	r7, r1
 8007082:	3101      	adds	r1, #1
 8007084:	4249      	negs	r1, r1
 8007086:	400f      	ands	r7, r1
 8007088:	4639      	mov	r1, r7
 800708a:	4648      	mov	r0, r9
 800708c:	9201      	str	r2, [sp, #4]
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	f000 fb90 	bl	80077b4 <_sbrk_r>
 8007094:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007098:	4680      	mov	r8, r0
 800709a:	d055      	beq.n	8007148 <_malloc_r+0x39c>
 800709c:	9b00      	ldr	r3, [sp, #0]
 800709e:	9a01      	ldr	r2, [sp, #4]
 80070a0:	4283      	cmp	r3, r0
 80070a2:	d901      	bls.n	80070a8 <_malloc_r+0x2fc>
 80070a4:	45ab      	cmp	fp, r5
 80070a6:	d14f      	bne.n	8007148 <_malloc_r+0x39c>
 80070a8:	4842      	ldr	r0, [pc, #264]	; (80071b4 <_malloc_r+0x408>)
 80070aa:	4543      	cmp	r3, r8
 80070ac:	6801      	ldr	r1, [r0, #0]
 80070ae:	4682      	mov	sl, r0
 80070b0:	eb07 0e01 	add.w	lr, r7, r1
 80070b4:	f8c0 e000 	str.w	lr, [r0]
 80070b8:	493f      	ldr	r1, [pc, #252]	; (80071b8 <_malloc_r+0x40c>)
 80070ba:	d113      	bne.n	80070e4 <_malloc_r+0x338>
 80070bc:	420b      	tst	r3, r1
 80070be:	d111      	bne.n	80070e4 <_malloc_r+0x338>
 80070c0:	68ab      	ldr	r3, [r5, #8]
 80070c2:	443e      	add	r6, r7
 80070c4:	f046 0601 	orr.w	r6, r6, #1
 80070c8:	605e      	str	r6, [r3, #4]
 80070ca:	4a3c      	ldr	r2, [pc, #240]	; (80071bc <_malloc_r+0x410>)
 80070cc:	f8da 3000 	ldr.w	r3, [sl]
 80070d0:	6811      	ldr	r1, [r2, #0]
 80070d2:	428b      	cmp	r3, r1
 80070d4:	bf88      	it	hi
 80070d6:	6013      	strhi	r3, [r2, #0]
 80070d8:	4a39      	ldr	r2, [pc, #228]	; (80071c0 <_malloc_r+0x414>)
 80070da:	6811      	ldr	r1, [r2, #0]
 80070dc:	428b      	cmp	r3, r1
 80070de:	bf88      	it	hi
 80070e0:	6013      	strhi	r3, [r2, #0]
 80070e2:	e031      	b.n	8007148 <_malloc_r+0x39c>
 80070e4:	6810      	ldr	r0, [r2, #0]
 80070e6:	3001      	adds	r0, #1
 80070e8:	bf1b      	ittet	ne
 80070ea:	eba8 0303 	subne.w	r3, r8, r3
 80070ee:	4473      	addne	r3, lr
 80070f0:	f8c2 8000 	streq.w	r8, [r2]
 80070f4:	f8ca 3000 	strne.w	r3, [sl]
 80070f8:	f018 0007 	ands.w	r0, r8, #7
 80070fc:	bf1c      	itt	ne
 80070fe:	f1c0 0008 	rsbne	r0, r0, #8
 8007102:	4480      	addne	r8, r0
 8007104:	4b2a      	ldr	r3, [pc, #168]	; (80071b0 <_malloc_r+0x404>)
 8007106:	4447      	add	r7, r8
 8007108:	4418      	add	r0, r3
 800710a:	400f      	ands	r7, r1
 800710c:	1bc7      	subs	r7, r0, r7
 800710e:	4639      	mov	r1, r7
 8007110:	4648      	mov	r0, r9
 8007112:	f000 fb4f 	bl	80077b4 <_sbrk_r>
 8007116:	1c43      	adds	r3, r0, #1
 8007118:	bf04      	itt	eq
 800711a:	4640      	moveq	r0, r8
 800711c:	2700      	moveq	r7, #0
 800711e:	f8da 3000 	ldr.w	r3, [sl]
 8007122:	eba0 0008 	sub.w	r0, r0, r8
 8007126:	443b      	add	r3, r7
 8007128:	4407      	add	r7, r0
 800712a:	f047 0701 	orr.w	r7, r7, #1
 800712e:	45ab      	cmp	fp, r5
 8007130:	f8c5 8008 	str.w	r8, [r5, #8]
 8007134:	f8ca 3000 	str.w	r3, [sl]
 8007138:	f8c8 7004 	str.w	r7, [r8, #4]
 800713c:	d0c5      	beq.n	80070ca <_malloc_r+0x31e>
 800713e:	2e0f      	cmp	r6, #15
 8007140:	d810      	bhi.n	8007164 <_malloc_r+0x3b8>
 8007142:	2301      	movs	r3, #1
 8007144:	f8c8 3004 	str.w	r3, [r8, #4]
 8007148:	68ab      	ldr	r3, [r5, #8]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	f022 0203 	bic.w	r2, r2, #3
 8007150:	4294      	cmp	r4, r2
 8007152:	eba2 0304 	sub.w	r3, r2, r4
 8007156:	d801      	bhi.n	800715c <_malloc_r+0x3b0>
 8007158:	2b0f      	cmp	r3, #15
 800715a:	dc1a      	bgt.n	8007192 <_malloc_r+0x3e6>
 800715c:	4648      	mov	r0, r9
 800715e:	f000 f851 	bl	8007204 <__malloc_unlock>
 8007162:	e630      	b.n	8006dc6 <_malloc_r+0x1a>
 8007164:	2205      	movs	r2, #5
 8007166:	f8db 3004 	ldr.w	r3, [fp, #4]
 800716a:	3e0c      	subs	r6, #12
 800716c:	f026 0607 	bic.w	r6, r6, #7
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	4333      	orrs	r3, r6
 8007176:	f8cb 3004 	str.w	r3, [fp, #4]
 800717a:	2e0f      	cmp	r6, #15
 800717c:	eb0b 0306 	add.w	r3, fp, r6
 8007180:	605a      	str	r2, [r3, #4]
 8007182:	609a      	str	r2, [r3, #8]
 8007184:	d9a1      	bls.n	80070ca <_malloc_r+0x31e>
 8007186:	f10b 0108 	add.w	r1, fp, #8
 800718a:	4648      	mov	r0, r9
 800718c:	f000 fc20 	bl	80079d0 <_free_r>
 8007190:	e79b      	b.n	80070ca <_malloc_r+0x31e>
 8007192:	68ae      	ldr	r6, [r5, #8]
 8007194:	f044 0201 	orr.w	r2, r4, #1
 8007198:	f043 0301 	orr.w	r3, r3, #1
 800719c:	4434      	add	r4, r6
 800719e:	6072      	str	r2, [r6, #4]
 80071a0:	60ac      	str	r4, [r5, #8]
 80071a2:	6063      	str	r3, [r4, #4]
 80071a4:	e634      	b.n	8006e10 <_malloc_r+0x64>
 80071a6:	bf00      	nop
 80071a8:	200006d0 	.word	0x200006d0
 80071ac:	20000508 	.word	0x20000508
 80071b0:	00000080 	.word	0x00000080
 80071b4:	200006a0 	.word	0x200006a0
 80071b8:	0000007f 	.word	0x0000007f
 80071bc:	200006c8 	.word	0x200006c8
 80071c0:	200006cc 	.word	0x200006cc

080071c4 <memchr>:
 80071c4:	b510      	push	{r4, lr}
 80071c6:	b2c9      	uxtb	r1, r1
 80071c8:	4402      	add	r2, r0
 80071ca:	4290      	cmp	r0, r2
 80071cc:	4603      	mov	r3, r0
 80071ce:	d101      	bne.n	80071d4 <memchr+0x10>
 80071d0:	2000      	movs	r0, #0
 80071d2:	bd10      	pop	{r4, pc}
 80071d4:	781c      	ldrb	r4, [r3, #0]
 80071d6:	3001      	adds	r0, #1
 80071d8:	428c      	cmp	r4, r1
 80071da:	d1f6      	bne.n	80071ca <memchr+0x6>
 80071dc:	4618      	mov	r0, r3
 80071de:	bd10      	pop	{r4, pc}

080071e0 <memcpy>:
 80071e0:	b510      	push	{r4, lr}
 80071e2:	1e43      	subs	r3, r0, #1
 80071e4:	440a      	add	r2, r1
 80071e6:	4291      	cmp	r1, r2
 80071e8:	d100      	bne.n	80071ec <memcpy+0xc>
 80071ea:	bd10      	pop	{r4, pc}
 80071ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071f4:	e7f7      	b.n	80071e6 <memcpy+0x6>
	...

080071f8 <__malloc_lock>:
 80071f8:	4801      	ldr	r0, [pc, #4]	; (8007200 <__malloc_lock+0x8>)
 80071fa:	f000 bca5 	b.w	8007b48 <__retarget_lock_acquire_recursive>
 80071fe:	bf00      	nop
 8007200:	20000864 	.word	0x20000864

08007204 <__malloc_unlock>:
 8007204:	4801      	ldr	r0, [pc, #4]	; (800720c <__malloc_unlock+0x8>)
 8007206:	f000 bca0 	b.w	8007b4a <__retarget_lock_release_recursive>
 800720a:	bf00      	nop
 800720c:	20000864 	.word	0x20000864

08007210 <_Balloc>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007214:	4604      	mov	r4, r0
 8007216:	460e      	mov	r6, r1
 8007218:	b93d      	cbnz	r5, 800722a <_Balloc+0x1a>
 800721a:	2010      	movs	r0, #16
 800721c:	f7ff fdbe 	bl	8006d9c <malloc>
 8007220:	6260      	str	r0, [r4, #36]	; 0x24
 8007222:	6045      	str	r5, [r0, #4]
 8007224:	6085      	str	r5, [r0, #8]
 8007226:	6005      	str	r5, [r0, #0]
 8007228:	60c5      	str	r5, [r0, #12]
 800722a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800722c:	68eb      	ldr	r3, [r5, #12]
 800722e:	b183      	cbz	r3, 8007252 <_Balloc+0x42>
 8007230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007238:	b9b8      	cbnz	r0, 800726a <_Balloc+0x5a>
 800723a:	2101      	movs	r1, #1
 800723c:	fa01 f506 	lsl.w	r5, r1, r6
 8007240:	1d6a      	adds	r2, r5, #5
 8007242:	0092      	lsls	r2, r2, #2
 8007244:	4620      	mov	r0, r4
 8007246:	f000 fb3f 	bl	80078c8 <_calloc_r>
 800724a:	b160      	cbz	r0, 8007266 <_Balloc+0x56>
 800724c:	6046      	str	r6, [r0, #4]
 800724e:	6085      	str	r5, [r0, #8]
 8007250:	e00e      	b.n	8007270 <_Balloc+0x60>
 8007252:	2221      	movs	r2, #33	; 0x21
 8007254:	2104      	movs	r1, #4
 8007256:	4620      	mov	r0, r4
 8007258:	f000 fb36 	bl	80078c8 <_calloc_r>
 800725c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800725e:	60e8      	str	r0, [r5, #12]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e4      	bne.n	8007230 <_Balloc+0x20>
 8007266:	2000      	movs	r0, #0
 8007268:	bd70      	pop	{r4, r5, r6, pc}
 800726a:	6802      	ldr	r2, [r0, #0]
 800726c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007270:	2300      	movs	r3, #0
 8007272:	6103      	str	r3, [r0, #16]
 8007274:	60c3      	str	r3, [r0, #12]
 8007276:	bd70      	pop	{r4, r5, r6, pc}

08007278 <_Bfree>:
 8007278:	b570      	push	{r4, r5, r6, lr}
 800727a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800727c:	4606      	mov	r6, r0
 800727e:	460d      	mov	r5, r1
 8007280:	b93c      	cbnz	r4, 8007292 <_Bfree+0x1a>
 8007282:	2010      	movs	r0, #16
 8007284:	f7ff fd8a 	bl	8006d9c <malloc>
 8007288:	6270      	str	r0, [r6, #36]	; 0x24
 800728a:	6044      	str	r4, [r0, #4]
 800728c:	6084      	str	r4, [r0, #8]
 800728e:	6004      	str	r4, [r0, #0]
 8007290:	60c4      	str	r4, [r0, #12]
 8007292:	b13d      	cbz	r5, 80072a4 <_Bfree+0x2c>
 8007294:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007296:	686a      	ldr	r2, [r5, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800729e:	6029      	str	r1, [r5, #0]
 80072a0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80072a4:	bd70      	pop	{r4, r5, r6, pc}

080072a6 <__multadd>:
 80072a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072aa:	461f      	mov	r7, r3
 80072ac:	4606      	mov	r6, r0
 80072ae:	460c      	mov	r4, r1
 80072b0:	2300      	movs	r3, #0
 80072b2:	690d      	ldr	r5, [r1, #16]
 80072b4:	f101 0e14 	add.w	lr, r1, #20
 80072b8:	f8de 0000 	ldr.w	r0, [lr]
 80072bc:	3301      	adds	r3, #1
 80072be:	b281      	uxth	r1, r0
 80072c0:	fb02 7101 	mla	r1, r2, r1, r7
 80072c4:	0c00      	lsrs	r0, r0, #16
 80072c6:	0c0f      	lsrs	r7, r1, #16
 80072c8:	fb02 7000 	mla	r0, r2, r0, r7
 80072cc:	b289      	uxth	r1, r1
 80072ce:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80072d2:	429d      	cmp	r5, r3
 80072d4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80072d8:	f84e 1b04 	str.w	r1, [lr], #4
 80072dc:	dcec      	bgt.n	80072b8 <__multadd+0x12>
 80072de:	b1d7      	cbz	r7, 8007316 <__multadd+0x70>
 80072e0:	68a3      	ldr	r3, [r4, #8]
 80072e2:	429d      	cmp	r5, r3
 80072e4:	db12      	blt.n	800730c <__multadd+0x66>
 80072e6:	6861      	ldr	r1, [r4, #4]
 80072e8:	4630      	mov	r0, r6
 80072ea:	3101      	adds	r1, #1
 80072ec:	f7ff ff90 	bl	8007210 <_Balloc>
 80072f0:	4680      	mov	r8, r0
 80072f2:	6922      	ldr	r2, [r4, #16]
 80072f4:	f104 010c 	add.w	r1, r4, #12
 80072f8:	3202      	adds	r2, #2
 80072fa:	0092      	lsls	r2, r2, #2
 80072fc:	300c      	adds	r0, #12
 80072fe:	f7ff ff6f 	bl	80071e0 <memcpy>
 8007302:	4621      	mov	r1, r4
 8007304:	4630      	mov	r0, r6
 8007306:	f7ff ffb7 	bl	8007278 <_Bfree>
 800730a:	4644      	mov	r4, r8
 800730c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007310:	3501      	adds	r5, #1
 8007312:	615f      	str	r7, [r3, #20]
 8007314:	6125      	str	r5, [r4, #16]
 8007316:	4620      	mov	r0, r4
 8007318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800731c <__hi0bits>:
 800731c:	0c02      	lsrs	r2, r0, #16
 800731e:	0412      	lsls	r2, r2, #16
 8007320:	4603      	mov	r3, r0
 8007322:	b9b2      	cbnz	r2, 8007352 <__hi0bits+0x36>
 8007324:	0403      	lsls	r3, r0, #16
 8007326:	2010      	movs	r0, #16
 8007328:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800732c:	bf04      	itt	eq
 800732e:	021b      	lsleq	r3, r3, #8
 8007330:	3008      	addeq	r0, #8
 8007332:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007336:	bf04      	itt	eq
 8007338:	011b      	lsleq	r3, r3, #4
 800733a:	3004      	addeq	r0, #4
 800733c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007340:	bf04      	itt	eq
 8007342:	009b      	lsleq	r3, r3, #2
 8007344:	3002      	addeq	r0, #2
 8007346:	2b00      	cmp	r3, #0
 8007348:	db06      	blt.n	8007358 <__hi0bits+0x3c>
 800734a:	005b      	lsls	r3, r3, #1
 800734c:	d503      	bpl.n	8007356 <__hi0bits+0x3a>
 800734e:	3001      	adds	r0, #1
 8007350:	4770      	bx	lr
 8007352:	2000      	movs	r0, #0
 8007354:	e7e8      	b.n	8007328 <__hi0bits+0xc>
 8007356:	2020      	movs	r0, #32
 8007358:	4770      	bx	lr

0800735a <__lo0bits>:
 800735a:	6803      	ldr	r3, [r0, #0]
 800735c:	4601      	mov	r1, r0
 800735e:	f013 0207 	ands.w	r2, r3, #7
 8007362:	d00b      	beq.n	800737c <__lo0bits+0x22>
 8007364:	07da      	lsls	r2, r3, #31
 8007366:	d423      	bmi.n	80073b0 <__lo0bits+0x56>
 8007368:	0798      	lsls	r0, r3, #30
 800736a:	bf49      	itett	mi
 800736c:	085b      	lsrmi	r3, r3, #1
 800736e:	089b      	lsrpl	r3, r3, #2
 8007370:	2001      	movmi	r0, #1
 8007372:	600b      	strmi	r3, [r1, #0]
 8007374:	bf5c      	itt	pl
 8007376:	600b      	strpl	r3, [r1, #0]
 8007378:	2002      	movpl	r0, #2
 800737a:	4770      	bx	lr
 800737c:	b298      	uxth	r0, r3
 800737e:	b9a8      	cbnz	r0, 80073ac <__lo0bits+0x52>
 8007380:	2010      	movs	r0, #16
 8007382:	0c1b      	lsrs	r3, r3, #16
 8007384:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007388:	bf04      	itt	eq
 800738a:	0a1b      	lsreq	r3, r3, #8
 800738c:	3008      	addeq	r0, #8
 800738e:	071a      	lsls	r2, r3, #28
 8007390:	bf04      	itt	eq
 8007392:	091b      	lsreq	r3, r3, #4
 8007394:	3004      	addeq	r0, #4
 8007396:	079a      	lsls	r2, r3, #30
 8007398:	bf04      	itt	eq
 800739a:	089b      	lsreq	r3, r3, #2
 800739c:	3002      	addeq	r0, #2
 800739e:	07da      	lsls	r2, r3, #31
 80073a0:	d402      	bmi.n	80073a8 <__lo0bits+0x4e>
 80073a2:	085b      	lsrs	r3, r3, #1
 80073a4:	d006      	beq.n	80073b4 <__lo0bits+0x5a>
 80073a6:	3001      	adds	r0, #1
 80073a8:	600b      	str	r3, [r1, #0]
 80073aa:	4770      	bx	lr
 80073ac:	4610      	mov	r0, r2
 80073ae:	e7e9      	b.n	8007384 <__lo0bits+0x2a>
 80073b0:	2000      	movs	r0, #0
 80073b2:	4770      	bx	lr
 80073b4:	2020      	movs	r0, #32
 80073b6:	4770      	bx	lr

080073b8 <__i2b>:
 80073b8:	b510      	push	{r4, lr}
 80073ba:	460c      	mov	r4, r1
 80073bc:	2101      	movs	r1, #1
 80073be:	f7ff ff27 	bl	8007210 <_Balloc>
 80073c2:	2201      	movs	r2, #1
 80073c4:	6144      	str	r4, [r0, #20]
 80073c6:	6102      	str	r2, [r0, #16]
 80073c8:	bd10      	pop	{r4, pc}

080073ca <__multiply>:
 80073ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ce:	4614      	mov	r4, r2
 80073d0:	690a      	ldr	r2, [r1, #16]
 80073d2:	6923      	ldr	r3, [r4, #16]
 80073d4:	4689      	mov	r9, r1
 80073d6:	429a      	cmp	r2, r3
 80073d8:	bfbe      	ittt	lt
 80073da:	460b      	movlt	r3, r1
 80073dc:	46a1      	movlt	r9, r4
 80073de:	461c      	movlt	r4, r3
 80073e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80073e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80073e8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80073ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80073f0:	eb07 060a 	add.w	r6, r7, sl
 80073f4:	429e      	cmp	r6, r3
 80073f6:	bfc8      	it	gt
 80073f8:	3101      	addgt	r1, #1
 80073fa:	f7ff ff09 	bl	8007210 <_Balloc>
 80073fe:	f100 0514 	add.w	r5, r0, #20
 8007402:	462b      	mov	r3, r5
 8007404:	2200      	movs	r2, #0
 8007406:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800740a:	4543      	cmp	r3, r8
 800740c:	d316      	bcc.n	800743c <__multiply+0x72>
 800740e:	f104 0214 	add.w	r2, r4, #20
 8007412:	f109 0114 	add.w	r1, r9, #20
 8007416:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800741a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800741e:	9301      	str	r3, [sp, #4]
 8007420:	9c01      	ldr	r4, [sp, #4]
 8007422:	4613      	mov	r3, r2
 8007424:	4294      	cmp	r4, r2
 8007426:	d80c      	bhi.n	8007442 <__multiply+0x78>
 8007428:	2e00      	cmp	r6, #0
 800742a:	dd03      	ble.n	8007434 <__multiply+0x6a>
 800742c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007430:	2b00      	cmp	r3, #0
 8007432:	d054      	beq.n	80074de <__multiply+0x114>
 8007434:	6106      	str	r6, [r0, #16]
 8007436:	b003      	add	sp, #12
 8007438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800743c:	f843 2b04 	str.w	r2, [r3], #4
 8007440:	e7e3      	b.n	800740a <__multiply+0x40>
 8007442:	f8b3 a000 	ldrh.w	sl, [r3]
 8007446:	3204      	adds	r2, #4
 8007448:	f1ba 0f00 	cmp.w	sl, #0
 800744c:	d020      	beq.n	8007490 <__multiply+0xc6>
 800744e:	46ae      	mov	lr, r5
 8007450:	4689      	mov	r9, r1
 8007452:	f04f 0c00 	mov.w	ip, #0
 8007456:	f859 4b04 	ldr.w	r4, [r9], #4
 800745a:	f8be b000 	ldrh.w	fp, [lr]
 800745e:	b2a3      	uxth	r3, r4
 8007460:	fb0a b303 	mla	r3, sl, r3, fp
 8007464:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8007468:	f8de 4000 	ldr.w	r4, [lr]
 800746c:	4463      	add	r3, ip
 800746e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007472:	fb0a c40b 	mla	r4, sl, fp, ip
 8007476:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800747a:	b29b      	uxth	r3, r3
 800747c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007480:	454f      	cmp	r7, r9
 8007482:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007486:	f84e 3b04 	str.w	r3, [lr], #4
 800748a:	d8e4      	bhi.n	8007456 <__multiply+0x8c>
 800748c:	f8ce c000 	str.w	ip, [lr]
 8007490:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8007494:	f1b9 0f00 	cmp.w	r9, #0
 8007498:	d01f      	beq.n	80074da <__multiply+0x110>
 800749a:	46ae      	mov	lr, r5
 800749c:	468c      	mov	ip, r1
 800749e:	f04f 0a00 	mov.w	sl, #0
 80074a2:	682b      	ldr	r3, [r5, #0]
 80074a4:	f8bc 4000 	ldrh.w	r4, [ip]
 80074a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	fb09 b404 	mla	r4, r9, r4, fp
 80074b2:	44a2      	add	sl, r4
 80074b4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80074b8:	f84e 3b04 	str.w	r3, [lr], #4
 80074bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80074c0:	f8be 4000 	ldrh.w	r4, [lr]
 80074c4:	0c1b      	lsrs	r3, r3, #16
 80074c6:	fb09 4303 	mla	r3, r9, r3, r4
 80074ca:	4567      	cmp	r7, ip
 80074cc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80074d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074d4:	d8e6      	bhi.n	80074a4 <__multiply+0xda>
 80074d6:	f8ce 3000 	str.w	r3, [lr]
 80074da:	3504      	adds	r5, #4
 80074dc:	e7a0      	b.n	8007420 <__multiply+0x56>
 80074de:	3e01      	subs	r6, #1
 80074e0:	e7a2      	b.n	8007428 <__multiply+0x5e>
	...

080074e4 <__pow5mult>:
 80074e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e8:	4615      	mov	r5, r2
 80074ea:	f012 0203 	ands.w	r2, r2, #3
 80074ee:	4606      	mov	r6, r0
 80074f0:	460f      	mov	r7, r1
 80074f2:	d007      	beq.n	8007504 <__pow5mult+0x20>
 80074f4:	4c21      	ldr	r4, [pc, #132]	; (800757c <__pow5mult+0x98>)
 80074f6:	3a01      	subs	r2, #1
 80074f8:	2300      	movs	r3, #0
 80074fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074fe:	f7ff fed2 	bl	80072a6 <__multadd>
 8007502:	4607      	mov	r7, r0
 8007504:	10ad      	asrs	r5, r5, #2
 8007506:	d035      	beq.n	8007574 <__pow5mult+0x90>
 8007508:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800750a:	b93c      	cbnz	r4, 800751c <__pow5mult+0x38>
 800750c:	2010      	movs	r0, #16
 800750e:	f7ff fc45 	bl	8006d9c <malloc>
 8007512:	6270      	str	r0, [r6, #36]	; 0x24
 8007514:	6044      	str	r4, [r0, #4]
 8007516:	6084      	str	r4, [r0, #8]
 8007518:	6004      	str	r4, [r0, #0]
 800751a:	60c4      	str	r4, [r0, #12]
 800751c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007520:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007524:	b94c      	cbnz	r4, 800753a <__pow5mult+0x56>
 8007526:	f240 2171 	movw	r1, #625	; 0x271
 800752a:	4630      	mov	r0, r6
 800752c:	f7ff ff44 	bl	80073b8 <__i2b>
 8007530:	2300      	movs	r3, #0
 8007532:	4604      	mov	r4, r0
 8007534:	f8c8 0008 	str.w	r0, [r8, #8]
 8007538:	6003      	str	r3, [r0, #0]
 800753a:	f04f 0800 	mov.w	r8, #0
 800753e:	07eb      	lsls	r3, r5, #31
 8007540:	d50a      	bpl.n	8007558 <__pow5mult+0x74>
 8007542:	4639      	mov	r1, r7
 8007544:	4622      	mov	r2, r4
 8007546:	4630      	mov	r0, r6
 8007548:	f7ff ff3f 	bl	80073ca <__multiply>
 800754c:	4681      	mov	r9, r0
 800754e:	4639      	mov	r1, r7
 8007550:	4630      	mov	r0, r6
 8007552:	f7ff fe91 	bl	8007278 <_Bfree>
 8007556:	464f      	mov	r7, r9
 8007558:	106d      	asrs	r5, r5, #1
 800755a:	d00b      	beq.n	8007574 <__pow5mult+0x90>
 800755c:	6820      	ldr	r0, [r4, #0]
 800755e:	b938      	cbnz	r0, 8007570 <__pow5mult+0x8c>
 8007560:	4622      	mov	r2, r4
 8007562:	4621      	mov	r1, r4
 8007564:	4630      	mov	r0, r6
 8007566:	f7ff ff30 	bl	80073ca <__multiply>
 800756a:	6020      	str	r0, [r4, #0]
 800756c:	f8c0 8000 	str.w	r8, [r0]
 8007570:	4604      	mov	r4, r0
 8007572:	e7e4      	b.n	800753e <__pow5mult+0x5a>
 8007574:	4638      	mov	r0, r7
 8007576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800757a:	bf00      	nop
 800757c:	080080a8 	.word	0x080080a8

08007580 <__lshift>:
 8007580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007584:	460c      	mov	r4, r1
 8007586:	4607      	mov	r7, r0
 8007588:	4616      	mov	r6, r2
 800758a:	6923      	ldr	r3, [r4, #16]
 800758c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007590:	eb0a 0903 	add.w	r9, sl, r3
 8007594:	6849      	ldr	r1, [r1, #4]
 8007596:	68a3      	ldr	r3, [r4, #8]
 8007598:	f109 0501 	add.w	r5, r9, #1
 800759c:	42ab      	cmp	r3, r5
 800759e:	db31      	blt.n	8007604 <__lshift+0x84>
 80075a0:	4638      	mov	r0, r7
 80075a2:	f7ff fe35 	bl	8007210 <_Balloc>
 80075a6:	2200      	movs	r2, #0
 80075a8:	4680      	mov	r8, r0
 80075aa:	4611      	mov	r1, r2
 80075ac:	f100 0314 	add.w	r3, r0, #20
 80075b0:	4552      	cmp	r2, sl
 80075b2:	db2a      	blt.n	800760a <__lshift+0x8a>
 80075b4:	6920      	ldr	r0, [r4, #16]
 80075b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075ba:	f104 0114 	add.w	r1, r4, #20
 80075be:	f016 021f 	ands.w	r2, r6, #31
 80075c2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80075c6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80075ca:	d022      	beq.n	8007612 <__lshift+0x92>
 80075cc:	2000      	movs	r0, #0
 80075ce:	f1c2 0c20 	rsb	ip, r2, #32
 80075d2:	680e      	ldr	r6, [r1, #0]
 80075d4:	4096      	lsls	r6, r2
 80075d6:	4330      	orrs	r0, r6
 80075d8:	f843 0b04 	str.w	r0, [r3], #4
 80075dc:	f851 0b04 	ldr.w	r0, [r1], #4
 80075e0:	458e      	cmp	lr, r1
 80075e2:	fa20 f00c 	lsr.w	r0, r0, ip
 80075e6:	d8f4      	bhi.n	80075d2 <__lshift+0x52>
 80075e8:	6018      	str	r0, [r3, #0]
 80075ea:	b108      	cbz	r0, 80075f0 <__lshift+0x70>
 80075ec:	f109 0502 	add.w	r5, r9, #2
 80075f0:	3d01      	subs	r5, #1
 80075f2:	4638      	mov	r0, r7
 80075f4:	f8c8 5010 	str.w	r5, [r8, #16]
 80075f8:	4621      	mov	r1, r4
 80075fa:	f7ff fe3d 	bl	8007278 <_Bfree>
 80075fe:	4640      	mov	r0, r8
 8007600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007604:	3101      	adds	r1, #1
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	e7c8      	b.n	800759c <__lshift+0x1c>
 800760a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800760e:	3201      	adds	r2, #1
 8007610:	e7ce      	b.n	80075b0 <__lshift+0x30>
 8007612:	3b04      	subs	r3, #4
 8007614:	f851 2b04 	ldr.w	r2, [r1], #4
 8007618:	458e      	cmp	lr, r1
 800761a:	f843 2f04 	str.w	r2, [r3, #4]!
 800761e:	d8f9      	bhi.n	8007614 <__lshift+0x94>
 8007620:	e7e6      	b.n	80075f0 <__lshift+0x70>

08007622 <__mcmp>:
 8007622:	6903      	ldr	r3, [r0, #16]
 8007624:	690a      	ldr	r2, [r1, #16]
 8007626:	b530      	push	{r4, r5, lr}
 8007628:	1a9b      	subs	r3, r3, r2
 800762a:	d10c      	bne.n	8007646 <__mcmp+0x24>
 800762c:	0092      	lsls	r2, r2, #2
 800762e:	3014      	adds	r0, #20
 8007630:	3114      	adds	r1, #20
 8007632:	1884      	adds	r4, r0, r2
 8007634:	4411      	add	r1, r2
 8007636:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800763a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800763e:	4295      	cmp	r5, r2
 8007640:	d003      	beq.n	800764a <__mcmp+0x28>
 8007642:	d305      	bcc.n	8007650 <__mcmp+0x2e>
 8007644:	2301      	movs	r3, #1
 8007646:	4618      	mov	r0, r3
 8007648:	bd30      	pop	{r4, r5, pc}
 800764a:	42a0      	cmp	r0, r4
 800764c:	d3f3      	bcc.n	8007636 <__mcmp+0x14>
 800764e:	e7fa      	b.n	8007646 <__mcmp+0x24>
 8007650:	f04f 33ff 	mov.w	r3, #4294967295
 8007654:	e7f7      	b.n	8007646 <__mcmp+0x24>

08007656 <__mdiff>:
 8007656:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800765a:	460d      	mov	r5, r1
 800765c:	4607      	mov	r7, r0
 800765e:	4611      	mov	r1, r2
 8007660:	4628      	mov	r0, r5
 8007662:	4614      	mov	r4, r2
 8007664:	f7ff ffdd 	bl	8007622 <__mcmp>
 8007668:	1e06      	subs	r6, r0, #0
 800766a:	d108      	bne.n	800767e <__mdiff+0x28>
 800766c:	4631      	mov	r1, r6
 800766e:	4638      	mov	r0, r7
 8007670:	f7ff fdce 	bl	8007210 <_Balloc>
 8007674:	2301      	movs	r3, #1
 8007676:	6146      	str	r6, [r0, #20]
 8007678:	6103      	str	r3, [r0, #16]
 800767a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800767e:	bfa4      	itt	ge
 8007680:	4623      	movge	r3, r4
 8007682:	462c      	movge	r4, r5
 8007684:	4638      	mov	r0, r7
 8007686:	6861      	ldr	r1, [r4, #4]
 8007688:	bfa6      	itte	ge
 800768a:	461d      	movge	r5, r3
 800768c:	2600      	movge	r6, #0
 800768e:	2601      	movlt	r6, #1
 8007690:	f7ff fdbe 	bl	8007210 <_Balloc>
 8007694:	f04f 0c00 	mov.w	ip, #0
 8007698:	60c6      	str	r6, [r0, #12]
 800769a:	692b      	ldr	r3, [r5, #16]
 800769c:	6926      	ldr	r6, [r4, #16]
 800769e:	f104 0214 	add.w	r2, r4, #20
 80076a2:	f105 0914 	add.w	r9, r5, #20
 80076a6:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80076aa:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80076ae:	f100 0114 	add.w	r1, r0, #20
 80076b2:	f852 ab04 	ldr.w	sl, [r2], #4
 80076b6:	f859 5b04 	ldr.w	r5, [r9], #4
 80076ba:	fa1f f38a 	uxth.w	r3, sl
 80076be:	4463      	add	r3, ip
 80076c0:	b2ac      	uxth	r4, r5
 80076c2:	1b1b      	subs	r3, r3, r4
 80076c4:	0c2c      	lsrs	r4, r5, #16
 80076c6:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80076ca:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80076d4:	45c8      	cmp	r8, r9
 80076d6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80076da:	4696      	mov	lr, r2
 80076dc:	f841 4b04 	str.w	r4, [r1], #4
 80076e0:	d8e7      	bhi.n	80076b2 <__mdiff+0x5c>
 80076e2:	45be      	cmp	lr, r7
 80076e4:	d305      	bcc.n	80076f2 <__mdiff+0x9c>
 80076e6:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80076ea:	b18b      	cbz	r3, 8007710 <__mdiff+0xba>
 80076ec:	6106      	str	r6, [r0, #16]
 80076ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80076f6:	b2a2      	uxth	r2, r4
 80076f8:	4462      	add	r2, ip
 80076fa:	1413      	asrs	r3, r2, #16
 80076fc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007700:	b292      	uxth	r2, r2
 8007702:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007706:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800770a:	f841 2b04 	str.w	r2, [r1], #4
 800770e:	e7e8      	b.n	80076e2 <__mdiff+0x8c>
 8007710:	3e01      	subs	r6, #1
 8007712:	e7e8      	b.n	80076e6 <__mdiff+0x90>

08007714 <__d2b>:
 8007714:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007718:	461c      	mov	r4, r3
 800771a:	2101      	movs	r1, #1
 800771c:	4690      	mov	r8, r2
 800771e:	9e08      	ldr	r6, [sp, #32]
 8007720:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007722:	f7ff fd75 	bl	8007210 <_Balloc>
 8007726:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800772a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800772e:	4607      	mov	r7, r0
 8007730:	bb34      	cbnz	r4, 8007780 <__d2b+0x6c>
 8007732:	9201      	str	r2, [sp, #4]
 8007734:	f1b8 0f00 	cmp.w	r8, #0
 8007738:	d027      	beq.n	800778a <__d2b+0x76>
 800773a:	a802      	add	r0, sp, #8
 800773c:	f840 8d08 	str.w	r8, [r0, #-8]!
 8007740:	f7ff fe0b 	bl	800735a <__lo0bits>
 8007744:	9900      	ldr	r1, [sp, #0]
 8007746:	b1f0      	cbz	r0, 8007786 <__d2b+0x72>
 8007748:	9a01      	ldr	r2, [sp, #4]
 800774a:	f1c0 0320 	rsb	r3, r0, #32
 800774e:	fa02 f303 	lsl.w	r3, r2, r3
 8007752:	430b      	orrs	r3, r1
 8007754:	40c2      	lsrs	r2, r0
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	9201      	str	r2, [sp, #4]
 800775a:	9b01      	ldr	r3, [sp, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	bf14      	ite	ne
 8007760:	2102      	movne	r1, #2
 8007762:	2101      	moveq	r1, #1
 8007764:	61bb      	str	r3, [r7, #24]
 8007766:	6139      	str	r1, [r7, #16]
 8007768:	b1c4      	cbz	r4, 800779c <__d2b+0x88>
 800776a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800776e:	4404      	add	r4, r0
 8007770:	6034      	str	r4, [r6, #0]
 8007772:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007776:	6028      	str	r0, [r5, #0]
 8007778:	4638      	mov	r0, r7
 800777a:	b002      	add	sp, #8
 800777c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007780:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007784:	e7d5      	b.n	8007732 <__d2b+0x1e>
 8007786:	6179      	str	r1, [r7, #20]
 8007788:	e7e7      	b.n	800775a <__d2b+0x46>
 800778a:	a801      	add	r0, sp, #4
 800778c:	f7ff fde5 	bl	800735a <__lo0bits>
 8007790:	2101      	movs	r1, #1
 8007792:	9b01      	ldr	r3, [sp, #4]
 8007794:	6139      	str	r1, [r7, #16]
 8007796:	617b      	str	r3, [r7, #20]
 8007798:	3020      	adds	r0, #32
 800779a:	e7e5      	b.n	8007768 <__d2b+0x54>
 800779c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077a0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80077a4:	6030      	str	r0, [r6, #0]
 80077a6:	6918      	ldr	r0, [r3, #16]
 80077a8:	f7ff fdb8 	bl	800731c <__hi0bits>
 80077ac:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80077b0:	e7e1      	b.n	8007776 <__d2b+0x62>
	...

080077b4 <_sbrk_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	2300      	movs	r3, #0
 80077b8:	4c05      	ldr	r4, [pc, #20]	; (80077d0 <_sbrk_r+0x1c>)
 80077ba:	4605      	mov	r5, r0
 80077bc:	4608      	mov	r0, r1
 80077be:	6023      	str	r3, [r4, #0]
 80077c0:	f7fa fcec 	bl	800219c <_sbrk>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d102      	bne.n	80077ce <_sbrk_r+0x1a>
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	b103      	cbz	r3, 80077ce <_sbrk_r+0x1a>
 80077cc:	602b      	str	r3, [r5, #0]
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	2000086c 	.word	0x2000086c

080077d4 <__ssprint_r>:
 80077d4:	6893      	ldr	r3, [r2, #8]
 80077d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077da:	4681      	mov	r9, r0
 80077dc:	460c      	mov	r4, r1
 80077de:	4617      	mov	r7, r2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d060      	beq.n	80078a6 <__ssprint_r+0xd2>
 80077e4:	f04f 0b00 	mov.w	fp, #0
 80077e8:	465e      	mov	r6, fp
 80077ea:	f8d2 a000 	ldr.w	sl, [r2]
 80077ee:	b356      	cbz	r6, 8007846 <__ssprint_r+0x72>
 80077f0:	68a3      	ldr	r3, [r4, #8]
 80077f2:	429e      	cmp	r6, r3
 80077f4:	d344      	bcc.n	8007880 <__ssprint_r+0xac>
 80077f6:	89a2      	ldrh	r2, [r4, #12]
 80077f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077fc:	d03e      	beq.n	800787c <__ssprint_r+0xa8>
 80077fe:	2302      	movs	r3, #2
 8007800:	6825      	ldr	r5, [r4, #0]
 8007802:	6921      	ldr	r1, [r4, #16]
 8007804:	eba5 0801 	sub.w	r8, r5, r1
 8007808:	6965      	ldr	r5, [r4, #20]
 800780a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800780e:	fb95 f5f3 	sdiv	r5, r5, r3
 8007812:	f108 0301 	add.w	r3, r8, #1
 8007816:	4433      	add	r3, r6
 8007818:	429d      	cmp	r5, r3
 800781a:	bf38      	it	cc
 800781c:	461d      	movcc	r5, r3
 800781e:	0553      	lsls	r3, r2, #21
 8007820:	d546      	bpl.n	80078b0 <__ssprint_r+0xdc>
 8007822:	4629      	mov	r1, r5
 8007824:	4648      	mov	r0, r9
 8007826:	f7ff fac1 	bl	8006dac <_malloc_r>
 800782a:	b998      	cbnz	r0, 8007854 <__ssprint_r+0x80>
 800782c:	230c      	movs	r3, #12
 800782e:	f8c9 3000 	str.w	r3, [r9]
 8007832:	89a3      	ldrh	r3, [r4, #12]
 8007834:	f04f 30ff 	mov.w	r0, #4294967295
 8007838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800783c:	81a3      	strh	r3, [r4, #12]
 800783e:	2300      	movs	r3, #0
 8007840:	60bb      	str	r3, [r7, #8]
 8007842:	607b      	str	r3, [r7, #4]
 8007844:	e031      	b.n	80078aa <__ssprint_r+0xd6>
 8007846:	f8da b000 	ldr.w	fp, [sl]
 800784a:	f8da 6004 	ldr.w	r6, [sl, #4]
 800784e:	f10a 0a08 	add.w	sl, sl, #8
 8007852:	e7cc      	b.n	80077ee <__ssprint_r+0x1a>
 8007854:	4642      	mov	r2, r8
 8007856:	6921      	ldr	r1, [r4, #16]
 8007858:	9001      	str	r0, [sp, #4]
 800785a:	f7ff fcc1 	bl	80071e0 <memcpy>
 800785e:	89a2      	ldrh	r2, [r4, #12]
 8007860:	9b01      	ldr	r3, [sp, #4]
 8007862:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007866:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800786a:	81a2      	strh	r2, [r4, #12]
 800786c:	6123      	str	r3, [r4, #16]
 800786e:	4443      	add	r3, r8
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	4633      	mov	r3, r6
 8007874:	6165      	str	r5, [r4, #20]
 8007876:	eba5 0508 	sub.w	r5, r5, r8
 800787a:	60a5      	str	r5, [r4, #8]
 800787c:	429e      	cmp	r6, r3
 800787e:	d200      	bcs.n	8007882 <__ssprint_r+0xae>
 8007880:	4633      	mov	r3, r6
 8007882:	461a      	mov	r2, r3
 8007884:	4659      	mov	r1, fp
 8007886:	6820      	ldr	r0, [r4, #0]
 8007888:	9301      	str	r3, [sp, #4]
 800788a:	f000 f971 	bl	8007b70 <memmove>
 800788e:	68a2      	ldr	r2, [r4, #8]
 8007890:	9b01      	ldr	r3, [sp, #4]
 8007892:	1ad2      	subs	r2, r2, r3
 8007894:	60a2      	str	r2, [r4, #8]
 8007896:	6822      	ldr	r2, [r4, #0]
 8007898:	4413      	add	r3, r2
 800789a:	6023      	str	r3, [r4, #0]
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	1b9e      	subs	r6, r3, r6
 80078a0:	60be      	str	r6, [r7, #8]
 80078a2:	2e00      	cmp	r6, #0
 80078a4:	d1cf      	bne.n	8007846 <__ssprint_r+0x72>
 80078a6:	2000      	movs	r0, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	b003      	add	sp, #12
 80078ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b0:	462a      	mov	r2, r5
 80078b2:	4648      	mov	r0, r9
 80078b4:	f000 f976 	bl	8007ba4 <_realloc_r>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d1d6      	bne.n	800786c <__ssprint_r+0x98>
 80078be:	6921      	ldr	r1, [r4, #16]
 80078c0:	4648      	mov	r0, r9
 80078c2:	f000 f885 	bl	80079d0 <_free_r>
 80078c6:	e7b1      	b.n	800782c <__ssprint_r+0x58>

080078c8 <_calloc_r>:
 80078c8:	b510      	push	{r4, lr}
 80078ca:	4351      	muls	r1, r2
 80078cc:	f7ff fa6e 	bl	8006dac <_malloc_r>
 80078d0:	4604      	mov	r4, r0
 80078d2:	b198      	cbz	r0, 80078fc <_calloc_r+0x34>
 80078d4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80078d8:	f022 0203 	bic.w	r2, r2, #3
 80078dc:	3a04      	subs	r2, #4
 80078de:	2a24      	cmp	r2, #36	; 0x24
 80078e0:	d81b      	bhi.n	800791a <_calloc_r+0x52>
 80078e2:	2a13      	cmp	r2, #19
 80078e4:	d917      	bls.n	8007916 <_calloc_r+0x4e>
 80078e6:	2100      	movs	r1, #0
 80078e8:	2a1b      	cmp	r2, #27
 80078ea:	6001      	str	r1, [r0, #0]
 80078ec:	6041      	str	r1, [r0, #4]
 80078ee:	d807      	bhi.n	8007900 <_calloc_r+0x38>
 80078f0:	f100 0308 	add.w	r3, r0, #8
 80078f4:	2200      	movs	r2, #0
 80078f6:	601a      	str	r2, [r3, #0]
 80078f8:	605a      	str	r2, [r3, #4]
 80078fa:	609a      	str	r2, [r3, #8]
 80078fc:	4620      	mov	r0, r4
 80078fe:	bd10      	pop	{r4, pc}
 8007900:	2a24      	cmp	r2, #36	; 0x24
 8007902:	6081      	str	r1, [r0, #8]
 8007904:	60c1      	str	r1, [r0, #12]
 8007906:	bf11      	iteee	ne
 8007908:	f100 0310 	addne.w	r3, r0, #16
 800790c:	6101      	streq	r1, [r0, #16]
 800790e:	f100 0318 	addeq.w	r3, r0, #24
 8007912:	6141      	streq	r1, [r0, #20]
 8007914:	e7ee      	b.n	80078f4 <_calloc_r+0x2c>
 8007916:	4603      	mov	r3, r0
 8007918:	e7ec      	b.n	80078f4 <_calloc_r+0x2c>
 800791a:	2100      	movs	r1, #0
 800791c:	f7fd fbd2 	bl	80050c4 <memset>
 8007920:	e7ec      	b.n	80078fc <_calloc_r+0x34>
	...

08007924 <_malloc_trim_r>:
 8007924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007928:	4689      	mov	r9, r1
 800792a:	4f25      	ldr	r7, [pc, #148]	; (80079c0 <_malloc_trim_r+0x9c>)
 800792c:	4606      	mov	r6, r0
 800792e:	f7ff fc63 	bl	80071f8 <__malloc_lock>
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80079cc <_malloc_trim_r+0xa8>
 8007938:	685d      	ldr	r5, [r3, #4]
 800793a:	f1a8 0411 	sub.w	r4, r8, #17
 800793e:	f025 0503 	bic.w	r5, r5, #3
 8007942:	eba4 0409 	sub.w	r4, r4, r9
 8007946:	442c      	add	r4, r5
 8007948:	fbb4 f4f8 	udiv	r4, r4, r8
 800794c:	3c01      	subs	r4, #1
 800794e:	fb08 f404 	mul.w	r4, r8, r4
 8007952:	4544      	cmp	r4, r8
 8007954:	da05      	bge.n	8007962 <_malloc_trim_r+0x3e>
 8007956:	4630      	mov	r0, r6
 8007958:	f7ff fc54 	bl	8007204 <__malloc_unlock>
 800795c:	2000      	movs	r0, #0
 800795e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007962:	2100      	movs	r1, #0
 8007964:	4630      	mov	r0, r6
 8007966:	f7ff ff25 	bl	80077b4 <_sbrk_r>
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	442b      	add	r3, r5
 800796e:	4298      	cmp	r0, r3
 8007970:	d1f1      	bne.n	8007956 <_malloc_trim_r+0x32>
 8007972:	4261      	negs	r1, r4
 8007974:	4630      	mov	r0, r6
 8007976:	f7ff ff1d 	bl	80077b4 <_sbrk_r>
 800797a:	3001      	adds	r0, #1
 800797c:	d110      	bne.n	80079a0 <_malloc_trim_r+0x7c>
 800797e:	2100      	movs	r1, #0
 8007980:	4630      	mov	r0, r6
 8007982:	f7ff ff17 	bl	80077b4 <_sbrk_r>
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	1a83      	subs	r3, r0, r2
 800798a:	2b0f      	cmp	r3, #15
 800798c:	dde3      	ble.n	8007956 <_malloc_trim_r+0x32>
 800798e:	490d      	ldr	r1, [pc, #52]	; (80079c4 <_malloc_trim_r+0xa0>)
 8007990:	f043 0301 	orr.w	r3, r3, #1
 8007994:	6809      	ldr	r1, [r1, #0]
 8007996:	6053      	str	r3, [r2, #4]
 8007998:	1a40      	subs	r0, r0, r1
 800799a:	490b      	ldr	r1, [pc, #44]	; (80079c8 <_malloc_trim_r+0xa4>)
 800799c:	6008      	str	r0, [r1, #0]
 800799e:	e7da      	b.n	8007956 <_malloc_trim_r+0x32>
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	4a09      	ldr	r2, [pc, #36]	; (80079c8 <_malloc_trim_r+0xa4>)
 80079a4:	1b2d      	subs	r5, r5, r4
 80079a6:	f045 0501 	orr.w	r5, r5, #1
 80079aa:	605d      	str	r5, [r3, #4]
 80079ac:	6813      	ldr	r3, [r2, #0]
 80079ae:	4630      	mov	r0, r6
 80079b0:	1b1c      	subs	r4, r3, r4
 80079b2:	6014      	str	r4, [r2, #0]
 80079b4:	f7ff fc26 	bl	8007204 <__malloc_unlock>
 80079b8:	2001      	movs	r0, #1
 80079ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079be:	bf00      	nop
 80079c0:	20000100 	.word	0x20000100
 80079c4:	20000508 	.word	0x20000508
 80079c8:	200006a0 	.word	0x200006a0
 80079cc:	00000080 	.word	0x00000080

080079d0 <_free_r>:
 80079d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d4:	4604      	mov	r4, r0
 80079d6:	4688      	mov	r8, r1
 80079d8:	2900      	cmp	r1, #0
 80079da:	f000 80ab 	beq.w	8007b34 <_free_r+0x164>
 80079de:	f7ff fc0b 	bl	80071f8 <__malloc_lock>
 80079e2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80079e6:	4d54      	ldr	r5, [pc, #336]	; (8007b38 <_free_r+0x168>)
 80079e8:	f022 0001 	bic.w	r0, r2, #1
 80079ec:	f1a8 0308 	sub.w	r3, r8, #8
 80079f0:	181f      	adds	r7, r3, r0
 80079f2:	68a9      	ldr	r1, [r5, #8]
 80079f4:	687e      	ldr	r6, [r7, #4]
 80079f6:	428f      	cmp	r7, r1
 80079f8:	f026 0603 	bic.w	r6, r6, #3
 80079fc:	f002 0201 	and.w	r2, r2, #1
 8007a00:	d11b      	bne.n	8007a3a <_free_r+0x6a>
 8007a02:	4430      	add	r0, r6
 8007a04:	b93a      	cbnz	r2, 8007a16 <_free_r+0x46>
 8007a06:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8007a0a:	1a9b      	subs	r3, r3, r2
 8007a0c:	6899      	ldr	r1, [r3, #8]
 8007a0e:	4410      	add	r0, r2
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	60ca      	str	r2, [r1, #12]
 8007a14:	6091      	str	r1, [r2, #8]
 8007a16:	f040 0201 	orr.w	r2, r0, #1
 8007a1a:	605a      	str	r2, [r3, #4]
 8007a1c:	60ab      	str	r3, [r5, #8]
 8007a1e:	4b47      	ldr	r3, [pc, #284]	; (8007b3c <_free_r+0x16c>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4298      	cmp	r0, r3
 8007a24:	d304      	bcc.n	8007a30 <_free_r+0x60>
 8007a26:	4b46      	ldr	r3, [pc, #280]	; (8007b40 <_free_r+0x170>)
 8007a28:	4620      	mov	r0, r4
 8007a2a:	6819      	ldr	r1, [r3, #0]
 8007a2c:	f7ff ff7a 	bl	8007924 <_malloc_trim_r>
 8007a30:	4620      	mov	r0, r4
 8007a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a36:	f7ff bbe5 	b.w	8007204 <__malloc_unlock>
 8007a3a:	607e      	str	r6, [r7, #4]
 8007a3c:	2a00      	cmp	r2, #0
 8007a3e:	d139      	bne.n	8007ab4 <_free_r+0xe4>
 8007a40:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8007a44:	f105 0e08 	add.w	lr, r5, #8
 8007a48:	1a5b      	subs	r3, r3, r1
 8007a4a:	4408      	add	r0, r1
 8007a4c:	6899      	ldr	r1, [r3, #8]
 8007a4e:	4571      	cmp	r1, lr
 8007a50:	d032      	beq.n	8007ab8 <_free_r+0xe8>
 8007a52:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8007a56:	f8c1 e00c 	str.w	lr, [r1, #12]
 8007a5a:	f8ce 1008 	str.w	r1, [lr, #8]
 8007a5e:	19b9      	adds	r1, r7, r6
 8007a60:	6849      	ldr	r1, [r1, #4]
 8007a62:	07c9      	lsls	r1, r1, #31
 8007a64:	d40a      	bmi.n	8007a7c <_free_r+0xac>
 8007a66:	4430      	add	r0, r6
 8007a68:	68b9      	ldr	r1, [r7, #8]
 8007a6a:	bb3a      	cbnz	r2, 8007abc <_free_r+0xec>
 8007a6c:	4e35      	ldr	r6, [pc, #212]	; (8007b44 <_free_r+0x174>)
 8007a6e:	42b1      	cmp	r1, r6
 8007a70:	d124      	bne.n	8007abc <_free_r+0xec>
 8007a72:	2201      	movs	r2, #1
 8007a74:	616b      	str	r3, [r5, #20]
 8007a76:	612b      	str	r3, [r5, #16]
 8007a78:	60d9      	str	r1, [r3, #12]
 8007a7a:	6099      	str	r1, [r3, #8]
 8007a7c:	f040 0101 	orr.w	r1, r0, #1
 8007a80:	6059      	str	r1, [r3, #4]
 8007a82:	5018      	str	r0, [r3, r0]
 8007a84:	2a00      	cmp	r2, #0
 8007a86:	d1d3      	bne.n	8007a30 <_free_r+0x60>
 8007a88:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007a8c:	d21a      	bcs.n	8007ac4 <_free_r+0xf4>
 8007a8e:	2201      	movs	r2, #1
 8007a90:	08c0      	lsrs	r0, r0, #3
 8007a92:	1081      	asrs	r1, r0, #2
 8007a94:	408a      	lsls	r2, r1
 8007a96:	6869      	ldr	r1, [r5, #4]
 8007a98:	3001      	adds	r0, #1
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	606a      	str	r2, [r5, #4]
 8007a9e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8007aa2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8007aa6:	3a08      	subs	r2, #8
 8007aa8:	60da      	str	r2, [r3, #12]
 8007aaa:	6099      	str	r1, [r3, #8]
 8007aac:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8007ab0:	60cb      	str	r3, [r1, #12]
 8007ab2:	e7bd      	b.n	8007a30 <_free_r+0x60>
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	e7d2      	b.n	8007a5e <_free_r+0x8e>
 8007ab8:	2201      	movs	r2, #1
 8007aba:	e7d0      	b.n	8007a5e <_free_r+0x8e>
 8007abc:	68fe      	ldr	r6, [r7, #12]
 8007abe:	60ce      	str	r6, [r1, #12]
 8007ac0:	60b1      	str	r1, [r6, #8]
 8007ac2:	e7db      	b.n	8007a7c <_free_r+0xac>
 8007ac4:	0a42      	lsrs	r2, r0, #9
 8007ac6:	2a04      	cmp	r2, #4
 8007ac8:	d813      	bhi.n	8007af2 <_free_r+0x122>
 8007aca:	0982      	lsrs	r2, r0, #6
 8007acc:	3238      	adds	r2, #56	; 0x38
 8007ace:	1c51      	adds	r1, r2, #1
 8007ad0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8007ad4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8007ad8:	428e      	cmp	r6, r1
 8007ada:	d124      	bne.n	8007b26 <_free_r+0x156>
 8007adc:	2001      	movs	r0, #1
 8007ade:	1092      	asrs	r2, r2, #2
 8007ae0:	fa00 f202 	lsl.w	r2, r0, r2
 8007ae4:	6868      	ldr	r0, [r5, #4]
 8007ae6:	4302      	orrs	r2, r0
 8007ae8:	606a      	str	r2, [r5, #4]
 8007aea:	60de      	str	r6, [r3, #12]
 8007aec:	6099      	str	r1, [r3, #8]
 8007aee:	60b3      	str	r3, [r6, #8]
 8007af0:	e7de      	b.n	8007ab0 <_free_r+0xe0>
 8007af2:	2a14      	cmp	r2, #20
 8007af4:	d801      	bhi.n	8007afa <_free_r+0x12a>
 8007af6:	325b      	adds	r2, #91	; 0x5b
 8007af8:	e7e9      	b.n	8007ace <_free_r+0xfe>
 8007afa:	2a54      	cmp	r2, #84	; 0x54
 8007afc:	d802      	bhi.n	8007b04 <_free_r+0x134>
 8007afe:	0b02      	lsrs	r2, r0, #12
 8007b00:	326e      	adds	r2, #110	; 0x6e
 8007b02:	e7e4      	b.n	8007ace <_free_r+0xfe>
 8007b04:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007b08:	d802      	bhi.n	8007b10 <_free_r+0x140>
 8007b0a:	0bc2      	lsrs	r2, r0, #15
 8007b0c:	3277      	adds	r2, #119	; 0x77
 8007b0e:	e7de      	b.n	8007ace <_free_r+0xfe>
 8007b10:	f240 5154 	movw	r1, #1364	; 0x554
 8007b14:	428a      	cmp	r2, r1
 8007b16:	bf9a      	itte	ls
 8007b18:	0c82      	lsrls	r2, r0, #18
 8007b1a:	327c      	addls	r2, #124	; 0x7c
 8007b1c:	227e      	movhi	r2, #126	; 0x7e
 8007b1e:	e7d6      	b.n	8007ace <_free_r+0xfe>
 8007b20:	6889      	ldr	r1, [r1, #8]
 8007b22:	428e      	cmp	r6, r1
 8007b24:	d004      	beq.n	8007b30 <_free_r+0x160>
 8007b26:	684a      	ldr	r2, [r1, #4]
 8007b28:	f022 0203 	bic.w	r2, r2, #3
 8007b2c:	4290      	cmp	r0, r2
 8007b2e:	d3f7      	bcc.n	8007b20 <_free_r+0x150>
 8007b30:	68ce      	ldr	r6, [r1, #12]
 8007b32:	e7da      	b.n	8007aea <_free_r+0x11a>
 8007b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b38:	20000100 	.word	0x20000100
 8007b3c:	2000050c 	.word	0x2000050c
 8007b40:	200006d0 	.word	0x200006d0
 8007b44:	20000108 	.word	0x20000108

08007b48 <__retarget_lock_acquire_recursive>:
 8007b48:	4770      	bx	lr

08007b4a <__retarget_lock_release_recursive>:
 8007b4a:	4770      	bx	lr

08007b4c <__ascii_mbtowc>:
 8007b4c:	b082      	sub	sp, #8
 8007b4e:	b901      	cbnz	r1, 8007b52 <__ascii_mbtowc+0x6>
 8007b50:	a901      	add	r1, sp, #4
 8007b52:	b142      	cbz	r2, 8007b66 <__ascii_mbtowc+0x1a>
 8007b54:	b14b      	cbz	r3, 8007b6a <__ascii_mbtowc+0x1e>
 8007b56:	7813      	ldrb	r3, [r2, #0]
 8007b58:	600b      	str	r3, [r1, #0]
 8007b5a:	7812      	ldrb	r2, [r2, #0]
 8007b5c:	1c10      	adds	r0, r2, #0
 8007b5e:	bf18      	it	ne
 8007b60:	2001      	movne	r0, #1
 8007b62:	b002      	add	sp, #8
 8007b64:	4770      	bx	lr
 8007b66:	4610      	mov	r0, r2
 8007b68:	e7fb      	b.n	8007b62 <__ascii_mbtowc+0x16>
 8007b6a:	f06f 0001 	mvn.w	r0, #1
 8007b6e:	e7f8      	b.n	8007b62 <__ascii_mbtowc+0x16>

08007b70 <memmove>:
 8007b70:	4288      	cmp	r0, r1
 8007b72:	b510      	push	{r4, lr}
 8007b74:	eb01 0302 	add.w	r3, r1, r2
 8007b78:	d803      	bhi.n	8007b82 <memmove+0x12>
 8007b7a:	1e42      	subs	r2, r0, #1
 8007b7c:	4299      	cmp	r1, r3
 8007b7e:	d10c      	bne.n	8007b9a <memmove+0x2a>
 8007b80:	bd10      	pop	{r4, pc}
 8007b82:	4298      	cmp	r0, r3
 8007b84:	d2f9      	bcs.n	8007b7a <memmove+0xa>
 8007b86:	1881      	adds	r1, r0, r2
 8007b88:	1ad2      	subs	r2, r2, r3
 8007b8a:	42d3      	cmn	r3, r2
 8007b8c:	d100      	bne.n	8007b90 <memmove+0x20>
 8007b8e:	bd10      	pop	{r4, pc}
 8007b90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b94:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007b98:	e7f7      	b.n	8007b8a <memmove+0x1a>
 8007b9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b9e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007ba2:	e7eb      	b.n	8007b7c <memmove+0xc>

08007ba4 <_realloc_r>:
 8007ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba8:	4682      	mov	sl, r0
 8007baa:	460c      	mov	r4, r1
 8007bac:	b929      	cbnz	r1, 8007bba <_realloc_r+0x16>
 8007bae:	4611      	mov	r1, r2
 8007bb0:	b003      	add	sp, #12
 8007bb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb6:	f7ff b8f9 	b.w	8006dac <_malloc_r>
 8007bba:	9201      	str	r2, [sp, #4]
 8007bbc:	f7ff fb1c 	bl	80071f8 <__malloc_lock>
 8007bc0:	9a01      	ldr	r2, [sp, #4]
 8007bc2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8007bc6:	f102 080b 	add.w	r8, r2, #11
 8007bca:	f1b8 0f16 	cmp.w	r8, #22
 8007bce:	f1a4 0908 	sub.w	r9, r4, #8
 8007bd2:	f025 0603 	bic.w	r6, r5, #3
 8007bd6:	d90a      	bls.n	8007bee <_realloc_r+0x4a>
 8007bd8:	f038 0807 	bics.w	r8, r8, #7
 8007bdc:	d509      	bpl.n	8007bf2 <_realloc_r+0x4e>
 8007bde:	230c      	movs	r3, #12
 8007be0:	2700      	movs	r7, #0
 8007be2:	f8ca 3000 	str.w	r3, [sl]
 8007be6:	4638      	mov	r0, r7
 8007be8:	b003      	add	sp, #12
 8007bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bee:	f04f 0810 	mov.w	r8, #16
 8007bf2:	4590      	cmp	r8, r2
 8007bf4:	d3f3      	bcc.n	8007bde <_realloc_r+0x3a>
 8007bf6:	45b0      	cmp	r8, r6
 8007bf8:	f340 8148 	ble.w	8007e8c <_realloc_r+0x2e8>
 8007bfc:	4ba9      	ldr	r3, [pc, #676]	; (8007ea4 <_realloc_r+0x300>)
 8007bfe:	eb09 0106 	add.w	r1, r9, r6
 8007c02:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8007c06:	469b      	mov	fp, r3
 8007c08:	4571      	cmp	r1, lr
 8007c0a:	684b      	ldr	r3, [r1, #4]
 8007c0c:	d005      	beq.n	8007c1a <_realloc_r+0x76>
 8007c0e:	f023 0001 	bic.w	r0, r3, #1
 8007c12:	4408      	add	r0, r1
 8007c14:	6840      	ldr	r0, [r0, #4]
 8007c16:	07c7      	lsls	r7, r0, #31
 8007c18:	d447      	bmi.n	8007caa <_realloc_r+0x106>
 8007c1a:	f023 0303 	bic.w	r3, r3, #3
 8007c1e:	4571      	cmp	r1, lr
 8007c20:	eb06 0703 	add.w	r7, r6, r3
 8007c24:	d119      	bne.n	8007c5a <_realloc_r+0xb6>
 8007c26:	f108 0010 	add.w	r0, r8, #16
 8007c2a:	4287      	cmp	r7, r0
 8007c2c:	db3f      	blt.n	8007cae <_realloc_r+0x10a>
 8007c2e:	eba7 0708 	sub.w	r7, r7, r8
 8007c32:	eb09 0308 	add.w	r3, r9, r8
 8007c36:	f047 0701 	orr.w	r7, r7, #1
 8007c3a:	f8cb 3008 	str.w	r3, [fp, #8]
 8007c3e:	605f      	str	r7, [r3, #4]
 8007c40:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007c44:	4650      	mov	r0, sl
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	ea43 0308 	orr.w	r3, r3, r8
 8007c4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007c52:	f7ff fad7 	bl	8007204 <__malloc_unlock>
 8007c56:	4627      	mov	r7, r4
 8007c58:	e7c5      	b.n	8007be6 <_realloc_r+0x42>
 8007c5a:	45b8      	cmp	r8, r7
 8007c5c:	dc27      	bgt.n	8007cae <_realloc_r+0x10a>
 8007c5e:	68cb      	ldr	r3, [r1, #12]
 8007c60:	688a      	ldr	r2, [r1, #8]
 8007c62:	60d3      	str	r3, [r2, #12]
 8007c64:	609a      	str	r2, [r3, #8]
 8007c66:	eba7 0008 	sub.w	r0, r7, r8
 8007c6a:	280f      	cmp	r0, #15
 8007c6c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007c70:	eb09 0207 	add.w	r2, r9, r7
 8007c74:	f240 810c 	bls.w	8007e90 <_realloc_r+0x2ec>
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	eb09 0108 	add.w	r1, r9, r8
 8007c80:	ea43 0308 	orr.w	r3, r3, r8
 8007c84:	f040 0001 	orr.w	r0, r0, #1
 8007c88:	f8c9 3004 	str.w	r3, [r9, #4]
 8007c8c:	6048      	str	r0, [r1, #4]
 8007c8e:	6853      	ldr	r3, [r2, #4]
 8007c90:	3108      	adds	r1, #8
 8007c92:	f043 0301 	orr.w	r3, r3, #1
 8007c96:	6053      	str	r3, [r2, #4]
 8007c98:	4650      	mov	r0, sl
 8007c9a:	f7ff fe99 	bl	80079d0 <_free_r>
 8007c9e:	4650      	mov	r0, sl
 8007ca0:	f7ff fab0 	bl	8007204 <__malloc_unlock>
 8007ca4:	f109 0708 	add.w	r7, r9, #8
 8007ca8:	e79d      	b.n	8007be6 <_realloc_r+0x42>
 8007caa:	2300      	movs	r3, #0
 8007cac:	4619      	mov	r1, r3
 8007cae:	07e8      	lsls	r0, r5, #31
 8007cb0:	f100 8085 	bmi.w	8007dbe <_realloc_r+0x21a>
 8007cb4:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8007cb8:	eba9 0505 	sub.w	r5, r9, r5
 8007cbc:	6868      	ldr	r0, [r5, #4]
 8007cbe:	f020 0003 	bic.w	r0, r0, #3
 8007cc2:	4430      	add	r0, r6
 8007cc4:	2900      	cmp	r1, #0
 8007cc6:	d077      	beq.n	8007db8 <_realloc_r+0x214>
 8007cc8:	4571      	cmp	r1, lr
 8007cca:	d151      	bne.n	8007d70 <_realloc_r+0x1cc>
 8007ccc:	4403      	add	r3, r0
 8007cce:	f108 0110 	add.w	r1, r8, #16
 8007cd2:	428b      	cmp	r3, r1
 8007cd4:	db70      	blt.n	8007db8 <_realloc_r+0x214>
 8007cd6:	462f      	mov	r7, r5
 8007cd8:	68ea      	ldr	r2, [r5, #12]
 8007cda:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8007cde:	60ca      	str	r2, [r1, #12]
 8007ce0:	6091      	str	r1, [r2, #8]
 8007ce2:	1f32      	subs	r2, r6, #4
 8007ce4:	2a24      	cmp	r2, #36	; 0x24
 8007ce6:	d83c      	bhi.n	8007d62 <_realloc_r+0x1be>
 8007ce8:	2a13      	cmp	r2, #19
 8007cea:	d937      	bls.n	8007d5c <_realloc_r+0x1b8>
 8007cec:	6821      	ldr	r1, [r4, #0]
 8007cee:	2a1b      	cmp	r2, #27
 8007cf0:	60a9      	str	r1, [r5, #8]
 8007cf2:	6861      	ldr	r1, [r4, #4]
 8007cf4:	60e9      	str	r1, [r5, #12]
 8007cf6:	d81c      	bhi.n	8007d32 <_realloc_r+0x18e>
 8007cf8:	f105 0210 	add.w	r2, r5, #16
 8007cfc:	f104 0108 	add.w	r1, r4, #8
 8007d00:	6808      	ldr	r0, [r1, #0]
 8007d02:	6010      	str	r0, [r2, #0]
 8007d04:	6848      	ldr	r0, [r1, #4]
 8007d06:	6050      	str	r0, [r2, #4]
 8007d08:	6889      	ldr	r1, [r1, #8]
 8007d0a:	6091      	str	r1, [r2, #8]
 8007d0c:	eba3 0308 	sub.w	r3, r3, r8
 8007d10:	eb05 0208 	add.w	r2, r5, r8
 8007d14:	f043 0301 	orr.w	r3, r3, #1
 8007d18:	f8cb 2008 	str.w	r2, [fp, #8]
 8007d1c:	6053      	str	r3, [r2, #4]
 8007d1e:	686b      	ldr	r3, [r5, #4]
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	ea43 0308 	orr.w	r3, r3, r8
 8007d28:	606b      	str	r3, [r5, #4]
 8007d2a:	4650      	mov	r0, sl
 8007d2c:	f7ff fa6a 	bl	8007204 <__malloc_unlock>
 8007d30:	e759      	b.n	8007be6 <_realloc_r+0x42>
 8007d32:	68a1      	ldr	r1, [r4, #8]
 8007d34:	2a24      	cmp	r2, #36	; 0x24
 8007d36:	6129      	str	r1, [r5, #16]
 8007d38:	68e1      	ldr	r1, [r4, #12]
 8007d3a:	bf18      	it	ne
 8007d3c:	f105 0218 	addne.w	r2, r5, #24
 8007d40:	6169      	str	r1, [r5, #20]
 8007d42:	bf09      	itett	eq
 8007d44:	6922      	ldreq	r2, [r4, #16]
 8007d46:	f104 0110 	addne.w	r1, r4, #16
 8007d4a:	61aa      	streq	r2, [r5, #24]
 8007d4c:	6960      	ldreq	r0, [r4, #20]
 8007d4e:	bf02      	ittt	eq
 8007d50:	f105 0220 	addeq.w	r2, r5, #32
 8007d54:	f104 0118 	addeq.w	r1, r4, #24
 8007d58:	61e8      	streq	r0, [r5, #28]
 8007d5a:	e7d1      	b.n	8007d00 <_realloc_r+0x15c>
 8007d5c:	463a      	mov	r2, r7
 8007d5e:	4621      	mov	r1, r4
 8007d60:	e7ce      	b.n	8007d00 <_realloc_r+0x15c>
 8007d62:	4621      	mov	r1, r4
 8007d64:	4638      	mov	r0, r7
 8007d66:	9301      	str	r3, [sp, #4]
 8007d68:	f7ff ff02 	bl	8007b70 <memmove>
 8007d6c:	9b01      	ldr	r3, [sp, #4]
 8007d6e:	e7cd      	b.n	8007d0c <_realloc_r+0x168>
 8007d70:	18c7      	adds	r7, r0, r3
 8007d72:	45b8      	cmp	r8, r7
 8007d74:	dc20      	bgt.n	8007db8 <_realloc_r+0x214>
 8007d76:	68cb      	ldr	r3, [r1, #12]
 8007d78:	688a      	ldr	r2, [r1, #8]
 8007d7a:	60d3      	str	r3, [r2, #12]
 8007d7c:	609a      	str	r2, [r3, #8]
 8007d7e:	4628      	mov	r0, r5
 8007d80:	68eb      	ldr	r3, [r5, #12]
 8007d82:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8007d86:	60d3      	str	r3, [r2, #12]
 8007d88:	609a      	str	r2, [r3, #8]
 8007d8a:	1f32      	subs	r2, r6, #4
 8007d8c:	2a24      	cmp	r2, #36	; 0x24
 8007d8e:	d843      	bhi.n	8007e18 <_realloc_r+0x274>
 8007d90:	2a13      	cmp	r2, #19
 8007d92:	d93f      	bls.n	8007e14 <_realloc_r+0x270>
 8007d94:	6823      	ldr	r3, [r4, #0]
 8007d96:	2a1b      	cmp	r2, #27
 8007d98:	60ab      	str	r3, [r5, #8]
 8007d9a:	6863      	ldr	r3, [r4, #4]
 8007d9c:	60eb      	str	r3, [r5, #12]
 8007d9e:	d824      	bhi.n	8007dea <_realloc_r+0x246>
 8007da0:	f105 0010 	add.w	r0, r5, #16
 8007da4:	f104 0308 	add.w	r3, r4, #8
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	6002      	str	r2, [r0, #0]
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	6042      	str	r2, [r0, #4]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	6083      	str	r3, [r0, #8]
 8007db4:	46a9      	mov	r9, r5
 8007db6:	e756      	b.n	8007c66 <_realloc_r+0xc2>
 8007db8:	4580      	cmp	r8, r0
 8007dba:	4607      	mov	r7, r0
 8007dbc:	dddf      	ble.n	8007d7e <_realloc_r+0x1da>
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	4650      	mov	r0, sl
 8007dc2:	f7fe fff3 	bl	8006dac <_malloc_r>
 8007dc6:	4607      	mov	r7, r0
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d0ae      	beq.n	8007d2a <_realloc_r+0x186>
 8007dcc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007dd0:	f1a0 0208 	sub.w	r2, r0, #8
 8007dd4:	f023 0301 	bic.w	r3, r3, #1
 8007dd8:	444b      	add	r3, r9
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d120      	bne.n	8007e20 <_realloc_r+0x27c>
 8007dde:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8007de2:	f027 0703 	bic.w	r7, r7, #3
 8007de6:	4437      	add	r7, r6
 8007de8:	e73d      	b.n	8007c66 <_realloc_r+0xc2>
 8007dea:	68a3      	ldr	r3, [r4, #8]
 8007dec:	2a24      	cmp	r2, #36	; 0x24
 8007dee:	612b      	str	r3, [r5, #16]
 8007df0:	68e3      	ldr	r3, [r4, #12]
 8007df2:	bf18      	it	ne
 8007df4:	f105 0018 	addne.w	r0, r5, #24
 8007df8:	616b      	str	r3, [r5, #20]
 8007dfa:	bf09      	itett	eq
 8007dfc:	6923      	ldreq	r3, [r4, #16]
 8007dfe:	f104 0310 	addne.w	r3, r4, #16
 8007e02:	61ab      	streq	r3, [r5, #24]
 8007e04:	6962      	ldreq	r2, [r4, #20]
 8007e06:	bf02      	ittt	eq
 8007e08:	f105 0020 	addeq.w	r0, r5, #32
 8007e0c:	f104 0318 	addeq.w	r3, r4, #24
 8007e10:	61ea      	streq	r2, [r5, #28]
 8007e12:	e7c9      	b.n	8007da8 <_realloc_r+0x204>
 8007e14:	4623      	mov	r3, r4
 8007e16:	e7c7      	b.n	8007da8 <_realloc_r+0x204>
 8007e18:	4621      	mov	r1, r4
 8007e1a:	f7ff fea9 	bl	8007b70 <memmove>
 8007e1e:	e7c9      	b.n	8007db4 <_realloc_r+0x210>
 8007e20:	1f32      	subs	r2, r6, #4
 8007e22:	2a24      	cmp	r2, #36	; 0x24
 8007e24:	d82e      	bhi.n	8007e84 <_realloc_r+0x2e0>
 8007e26:	2a13      	cmp	r2, #19
 8007e28:	d929      	bls.n	8007e7e <_realloc_r+0x2da>
 8007e2a:	6823      	ldr	r3, [r4, #0]
 8007e2c:	2a1b      	cmp	r2, #27
 8007e2e:	6003      	str	r3, [r0, #0]
 8007e30:	6863      	ldr	r3, [r4, #4]
 8007e32:	6043      	str	r3, [r0, #4]
 8007e34:	d80e      	bhi.n	8007e54 <_realloc_r+0x2b0>
 8007e36:	f100 0308 	add.w	r3, r0, #8
 8007e3a:	f104 0208 	add.w	r2, r4, #8
 8007e3e:	6811      	ldr	r1, [r2, #0]
 8007e40:	6019      	str	r1, [r3, #0]
 8007e42:	6851      	ldr	r1, [r2, #4]
 8007e44:	6059      	str	r1, [r3, #4]
 8007e46:	6892      	ldr	r2, [r2, #8]
 8007e48:	609a      	str	r2, [r3, #8]
 8007e4a:	4621      	mov	r1, r4
 8007e4c:	4650      	mov	r0, sl
 8007e4e:	f7ff fdbf 	bl	80079d0 <_free_r>
 8007e52:	e76a      	b.n	8007d2a <_realloc_r+0x186>
 8007e54:	68a3      	ldr	r3, [r4, #8]
 8007e56:	2a24      	cmp	r2, #36	; 0x24
 8007e58:	6083      	str	r3, [r0, #8]
 8007e5a:	68e3      	ldr	r3, [r4, #12]
 8007e5c:	bf18      	it	ne
 8007e5e:	f104 0210 	addne.w	r2, r4, #16
 8007e62:	60c3      	str	r3, [r0, #12]
 8007e64:	bf09      	itett	eq
 8007e66:	6923      	ldreq	r3, [r4, #16]
 8007e68:	f100 0310 	addne.w	r3, r0, #16
 8007e6c:	6103      	streq	r3, [r0, #16]
 8007e6e:	6961      	ldreq	r1, [r4, #20]
 8007e70:	bf02      	ittt	eq
 8007e72:	f100 0318 	addeq.w	r3, r0, #24
 8007e76:	f104 0218 	addeq.w	r2, r4, #24
 8007e7a:	6141      	streq	r1, [r0, #20]
 8007e7c:	e7df      	b.n	8007e3e <_realloc_r+0x29a>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	4622      	mov	r2, r4
 8007e82:	e7dc      	b.n	8007e3e <_realloc_r+0x29a>
 8007e84:	4621      	mov	r1, r4
 8007e86:	f7ff fe73 	bl	8007b70 <memmove>
 8007e8a:	e7de      	b.n	8007e4a <_realloc_r+0x2a6>
 8007e8c:	4637      	mov	r7, r6
 8007e8e:	e6ea      	b.n	8007c66 <_realloc_r+0xc2>
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	431f      	orrs	r7, r3
 8007e96:	f8c9 7004 	str.w	r7, [r9, #4]
 8007e9a:	6853      	ldr	r3, [r2, #4]
 8007e9c:	f043 0301 	orr.w	r3, r3, #1
 8007ea0:	6053      	str	r3, [r2, #4]
 8007ea2:	e6fc      	b.n	8007c9e <_realloc_r+0xfa>
 8007ea4:	20000100 	.word	0x20000100

08007ea8 <__ascii_wctomb>:
 8007ea8:	b149      	cbz	r1, 8007ebe <__ascii_wctomb+0x16>
 8007eaa:	2aff      	cmp	r2, #255	; 0xff
 8007eac:	bf8b      	itete	hi
 8007eae:	238a      	movhi	r3, #138	; 0x8a
 8007eb0:	700a      	strbls	r2, [r1, #0]
 8007eb2:	6003      	strhi	r3, [r0, #0]
 8007eb4:	2001      	movls	r0, #1
 8007eb6:	bf88      	it	hi
 8007eb8:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ebc:	4770      	bx	lr
 8007ebe:	4608      	mov	r0, r1
 8007ec0:	4770      	bx	lr
	...

08007ec4 <_init>:
 8007ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec6:	bf00      	nop
 8007ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eca:	bc08      	pop	{r3}
 8007ecc:	469e      	mov	lr, r3
 8007ece:	4770      	bx	lr

08007ed0 <_fini>:
 8007ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed2:	bf00      	nop
 8007ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ed6:	bc08      	pop	{r3}
 8007ed8:	469e      	mov	lr, r3
 8007eda:	4770      	bx	lr
